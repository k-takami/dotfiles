chkconfig --list netfs漢字
[-ecolinux-config-steps-]
[-vim-]
	[-vimScript-]
	[-vimWindowTab-]
[-RubyMainOTL-]
	[-hpricot-]
[-RailsApache-]
	[-railsDBapi-]
	[-rails_activescafhold-]
	[-hpricot-]#test
	漢字

#heroku
gem install heroku
ssh-keygen -t rsa
heroku keys:add /root/.ssh/id_rsa.pub
#すでにデプロイされてるものを取得
git clone git@heroku.com:tkt-redmine.git

#すでにデプロイされてるものを取得 createしたばあいはgit repo名も表示される
heroku [(create|destroy|rename)] [heroku_app_name]

#origin以外のremote repoとしてheroku-repoを登録してpush
# git clone とかして持ってきたときには明示的に追加する
git remote add heroku git@heroku.com:[app-name].git
git push heroku master
#ここでheroku側のBundle install & bootupがおきるが､RDBMSがpostgresql以外はこけ
るので事前点検すべし

#mongoid4+rails4: mongoid4のlocalインストール
  git clone https://github.com/mongoid/mongoid.git
  tar zcvf mongoid.tar.gz mongoid
  cd mongoid
  gem build mongoid.gemspec
  gem install mongoid-4.0.0.beta1.gem
  gem list --local|grep mongoid
#mongoidとbsoni mongoid-paranoia関連のgemと記述を消去
gem uninstall bson
gem uninstall bson_ext
gem uninstall mongoid-paranoia
vim Gemfile.lock
vi Gemfile
  gem 'rails', '4.0.2'
  gem 'mongoid', '~> 4.0.0.beta1'
  gem 'bson_ext'
  gem 'mongoid-paranoia','~>0.1', github: 'simi/mongoid-paranoia'
  gem 'mongoid_auto_increment'
  # gem 'mongoid-autoinc'
gem list --local|grep bson
gem list --local|grep mongoid
gem install bson -v 2.2.2
bundle install
cd /opt/me/sample_mongodb_app/
  rails s
  rails c



#RHEL version
  cat /etc/redhat-release
#RHEL cleaning :cache
  rm /tmp/*
  du -h /var/cache/yum
  # mkdir /home/yum
  # mount --bind /home/yum /var/cache/yum/i386/6/base/packages/
  cat "/home/yum /var/cache/yum/i386/6/base/packages none,rw bind 0 0" >
/etc/fstab
  # find /var/ -name "*.log" -print |xargs rm
  # find /opt/ -name "*.log" -print |xargs rm
  # find ~/ -name "*.gz" -print
  # find ~/ -name "*.zip" -print

#RVM
  #新ruby のインストール
　　rvm install x.x.x  


#mongoDB

 # vi /etc/yum.repos.d/10gen.repo
    [10gen]
    name=10gen Repository
    ; 64 bit
    ; baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64
    ; 32 bit
    baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686
    gpgcheck=0
    enabled=1
 # yum install mongo-10gen mongo-10gen-server
 # service mongod start
~
~



  #centos+rails4.x
   gem 'mongoid'#,:git => 'git://github.com/mongoid/mongoid.git'
   gem 'bson_ext'
   gem 'mongoid-paranoia'#,'~>0.1', github: 'simi/mongoid-paranoia'
   gem 'mongoid_auto_increment'
   gem 'mongoid-autoinc'

  #mongoid




#github/some_body/vim メンテ方法
git add .
git status
git rm -r vim73/bundle/.vim-fuf-data/
git commit -m "update"
git pull origin master_win
git push origin master_win

#UNIX万能コマンド
　　 --help |grep  -nirE "(ignor|exclu|skip|行|名|\-e|show|list|disp|time)"

centOS

date -s "03/13 19:13 2013"

  http://www.linuxmaster.jp/linux_blog/2011/09/vmwaredevice-eth0-does-not-seem-to-be-present-delaying-initialization.html
  service network restart
	apachectl stop

  #nfs-disable
    chkconfig --list netfs
    chkconfig netfs off



■エラーメッセージDevice eth0 does not seem to be present, delaying initialization
	１．コマンド「/sbin/ifconfig -a」を実行してeth0が存在しない事を確認する
	２．「/etc/udev/rules.d/70-persistent-net.rules」ファイルを編集し、NAME="eth0"と記述されてる行を削除し、
	　　NAME="eth1"と記述されている箇所をNAME="eth0"に書き換えサーバーを再起動する
    ★vmware環境では デフォルトゲートウェイ=VMnet8のIPを指定
　　★windowsのipconfig結果ではなく、「Vmware仮想ネットワーク設定→NAT設定
ボタン」で表示されるIPアドレスを使う。通常既定値は最下位アドレスが2
	３．「/sbin/ifconfig -a」を実行してeth0のMACアドレスを取得する
	４．３で取得したMACアドレスを「/etc/sysconfig/network-scripts/ifcfg-eth0」ファイルのHWADDRの箇所にエディタで設定する
  ★VMwareをつかうときは、hostOSのVMware Network Adapter VMnet8のIPアドレスとマスクで通信しなければいけない。そのIPアドレスとサブネットクラス。サブネットマスクに注意。
	５．コマンド「ifup eth0」 を実行してeth0を起動（またはLinux自体を再起動）
	６．ネットワークに接続できることを確認する
  ★/etc/sysconfig/network でGATEWAY=****が固定的に（staticに）かいてあると、
DHCP環境でのdefault gatewayがまずいIPになる。

chkconfig --list
chkconfig --level 2345 httpd off
	
...が停止していますが PID ファイルが残っていますmaster が停止していますが PID ファイルが残っています
	--> ls -alt /var/run/*.pid ; rm /var/run/postmaster-9.2.pid
alternatives --display mta
rm /var/lock/subsys/postfix

DNSの設定
/etc/resolv.conf
nameserver 192.168.137.1  # VMnet8のIPアドレスを指定

#RVM
   bash -s stable < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
   
   vi ~/.bash_profile
   [[ -s "/root/.rvm/scripts/rvm" ]] && source "/root/.rvm/scripts/rvm"
   source /etc/profile.d/rvm.sh
    . ~/.bash_profile

   インストール可能なRubyのバージョンを確認します。
   $ rvm list known
   $ rvm use ruby-2.0.0-p195@rails3.2.13 --default


  root@localhost:/opt/me/tkt-redmine# rvm list
    rvm rubies
    => ruby-1.9.3-p429 [ i686 ]
     * ruby-2.0.0-p195 [ i686 ]

      # => - current
      # =* - current && default
      #  * - default

  rvm use ruby-2.0.0-p195
    rvm gemset use rails3ruby2 --default
    root@localhost:/opt/me/sample# rails -v
    Rails 3.2.13
  rvm use ruby-1.9.3-p429
    rvm gemset use rails323 --default
    rvm gemset rename rails323 rail40

#~/.gemrc
gem: --no-ri --no-rdoc

#removi rdoc and ri doc
rm -r `gem env gemdir`/doc

#rails3, rails4アプリ初期化
  #prep
  rvm use ruby-2.0.0-p195
  rvm gemset create rails405
  rvm gemset use rails405

　#required for rails3&4
  gem install therubyracer --version=0.10.2
　#required for rails4 only
  NOKOGIRI_USE_SYSTEM_LIBRARIES=1
  gem install nokogiri

  #commnt out all of therubyracer indication in Gemfle
  # https://github.com/cowboyd/libv8/issues/62 
  bundle install

  #commnt in therubyracer indication in Gemfile to pass rake db:*** commands
  #otherwise you will see an error message "Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes"
  rake db:setup

  #bootup
  git clone ***
  cd ***
  #copy frequent settngs 
    cat config/database.yml ;ls -alt db; ls -alt db/migrate/
    cat .gitignore
    cat config/environments/development.rb
    cat Gefiles

  rake db:setup




#iDisplay wii tethering
   1. invoke iDisplay Server on PC
   2. invoke TetheringChanger on Android deve#1
   3. establish tethering ad-hoc connetion between PC and Android device#1
   4. turn on iDisplay on Adroid device#1, and configure IPaddress that points
  to iDisply Server#1 on PC

#MaxViwer
 remoteでViewer起動､リモートのPCのマウスを直にさわって窓を横2000にする｡
 remote viewerがわでブラウザー描画する場合は､ブラウザー枠がホスト側にはみでて
いないと､イベント細くされず描画更新されない｡



#.*rc
	 gem install wirble
	 cp *.rc ~/

#debugger:NG?
	gem install debugger	
	vi RAils.root/plugin/Gemfile
		gem 'debugger'

	#NG
	gem install ruby-debug19
	gem install linecache19
	gem install ruby-debug-base19x --pre
	gem install ruby-debug-ide --pre


#Vmware
  converterをいれなくてもコンバートできる
  物理PCをVM化するまえに､VMwareWSを管理者権限で起動しないとだめ｡
#xperia
  Safe-mode:  reboot phone, Sony Ericsson or Sony appears, keep tapping menu key (volume down ). 
 

#VIM
	yum -y install vim-enhanced
	vi /etc/profile
	 # 最終行にエイリアス追記
		alias vi='vim'
	source /etc/profile	# 変更を反映
	#1設定ファイル移植
	cd ~;rm vimhomeold.tar*;tar -cvf vimhomeold.tar .vim* *vim* .ve_* MyWiki/ .*rc  ;gzip vimhomeold.tar; cd -
	chgrp -R root .vim* *vim* .ve_* MyWiki/ .*rc
	chown -R root .vim* *vim* .ve_* MyWiki/ .*rc	
	vim -S ~/Session.vim +VE +MRU
	:source ~/.vimrc
 :new +MRU
 :vnew +MRU
CTRL-W =        Make all windows (almost) equally high and wide,
 : set scrollbind   ;2窓同時スクロール　左ペインでコマンド発行
	#diff
		:vertical diffsplit C:\VMstatic\SOAP\SOAPClientExample-1.2\adsoltest.xml
	#今のペインをdiffモードにきりかえ｡左右両窓でやる
		:diffthis 
2005年04月21日
vimエディタで「文字コード、改行コードを変更して保存する。」
vimエディタで、ファイルの文字コード、改行コードを修正、もしくは変更する時の話。

ファイルの文字コードや、改行コードを変更する時は、
変更したいファイルを開いた状態で、


・spell checker
  :setlocal spell spelllang=en_us | set spell
  :set nospell
  :h spell
  [s / ]s  <--  jump prev/fwd
  z=       <--- suggest
  zg / zw  <--- register current word as good/wrong

  #カーソル下利用
    * 検索
    yiw yank


	#plugin
		#align
i	comment box square:     :\abox
		
		:AlignCtrl |
		:Align -\+
" 最初のセパレータを左寄せ
" 2番目のセパレータを左寄せ
" 3番目のセパレータを右寄せ
" 以後、ループ
:AlignCtrl <<>
:Align -\+




  " 文字コードutf-8を指定保存。
  :set fenc=utf-8
  " Unixの改行形式を指定。
  :set ff=unix

  " Windowsの改行形式を指定。
  :set ff=dos
  " Macの改行形式を指定。
  :set ff=mac

  " エンコーディングeuc-jpを指定して開き直す。
  :e ++enc=euc-jp
  " エンコーディングshift_jisを指定して開き直す。
  :e ++enc=shift_jis
  " エンコーディングutf-8を指定して開き直す。
  :e ++enc=utf-8

  「++enc」「++ff」を同時に指定する場合のコマンド例
  :e ++ff=unix ++enc=utf-8


・文字コードの変更

:set fileencoding=文字コード
:set fenc=文字コード (上のコマンドの短い形式。こちらでも良い。)
:set fileencoding=euc-jp (エンコーディングEUC-JPに変更。)
:set fileencoding=shift_jis (エンコーディングSHIFT_JISに変更。)
:set fileencoding=utf-8 (エンコーディングUTF-8に変更。)

・ファイルフォーマットの種類の変更

:set fileformat=ファイルフォーマットの種類
:set ff=ファイルフォーマットの種類 (上のコマンドの短い形式。こちらでも良い。)
:set fileformat=dos (改行をWindowsの形式に変更。)
:set fileformat=mac (改行をMacの形式に変更。)
:set fileformat=unix (改行をUnixの形式に変更。)


  #vimgrep補習
  " カレントディレクトリ以下のあらゆるファイルを対象にする
  :vim {pattern} **
  " app/views以下のあらゆるファイルを対象にする（ディレクトリを再帰的に検索）
  :vim {pattern} app/views/**
  " app/views/users内のファイルを対象にする
  :vim {patter} app/views/users/*
  " app/views以下で_で始まるerbファイルを対象にする
  :vim {pattern} app/views/**/_*.erb

  何度も同じ検索対象を使う場合?――>## 展開
  :ar path/to/search/dir/**
  :vim foo ##




#Redmine
		cd /opt/personfinder
		#boot with ruby-debug 
			rails server -u
      or
      rails s --debugger --port=80      

		http://192.168.18.130/redmine
		 ls -alt /usr/local/lib/ruby/gems/1.9.1/gems


#redmine class counting
	grep -nirE "^ +def" * --exclude=*~ > /home/apl/TMP/rakestats.txt
	grep -nirE "^ +def" * --exclude=*~ >> /home/apl/TMP/rakestats.txt
	grep -nirE "^ *class " * --exclude=*~ > /home/apl/TMP/tmp2.txt
	grep -nirE "^ *class " * --exclude=*~ >> /home/apl/TMP/tmp2.txt

#git
	vi /home/apl/.netrc
	vi /home/apl/.gitconfig
	 mkdir redmine; chown apl /opt/redmine/; chgrp apl /opt/redmine/
	 git clone https://github.com/LGDIS/LGDIS.git /opt/redmine
	* git pull https://github.com/LGDIS/LGDIS.git master
	 cd redmine; git branch -a; echo "";git branch ; echo "";
	 git checkout master

     su - root
      bundle install
    su - apl
    cd /opt/redmine/
    
    rake redmine:plugins:migrate
      rake redmine:plugins:migrate RAILS_ENV=****** 
    rake db:migrate
    rake db:seed
    rake generate_secret_token
    rails runner Batches::MemcacheStore.execute
    
    rails server　--debugger
    rails console　--debugger
    rails server

　#Redmine 
    admin>設定>プロジェクト>モジュールにチェック
    個別PJ>設定>モジュールにチェック
    
    /opt/redmine/plugins/lgdis/init.rb

    service httpd restart
    ※ポート3000はwebrick ,なしはapache
#redmine migrate options
/opt/fix/LGDIS/lib/redmine/plugin.rb
424     # Migrates all plugins or a single plugin to a given version
425     # Exemples:
426     #   Plugin.migrate
427     #   Plugin.migrate('sample_plugin')
428     #   Plugin.migrate('sample_plugin', 1)


 	------------------

    #準備
i
	 #history |grep mv
		 grep -nirE "debugger" /opt/fix/LGDIS/plugins/* --include=**  --exclude=*.sw* --exclude=*~ --exclude=*spec*
		Rails.root.Gemfile* Plugin[pluginname]Gemfile* を待避

	mv ../Gemfile*                                                 /opt/fix/stack-railsroot/
	mv lgdis/Gemfile*                                              /opt/fix/stack-LGDISPluginroot/

i	#e-mail送信前提
	mv config/environments/development.rb                          /opt/fix/stack-config/

	mv plugins/lgdis/app/controllers/deliver_issues_controller.rb  /opt/fix/stack-pluginCtrlr
	mv plugins/lgdis/config/destination_list.yml                   /opt/fix/stack-config/
	mv plugins/lgdis/lib/lgdis/issues_controller_patch.rb          /opt/fix/stack-liblgdis/
	mv plugins/lgdis/app/controllers/deliver_issues_controller.rb  /opt/fix/stack-appctrlr/
	mv plugins/lgdis/app/controllers/shelters_controller.rb        /opt/fix/stack-appctrlr/
	mv plugins/lgdis/files/xml/commons_evacuation.xml              /opt/fix/stack-xml
	mv plugins/lgdis/files/xml/some_bodySample.xml /opt/fix/stack-xml
	mv plugins/lgdis/files/xml/commons_evacuation.xml.sato         /opt/fix/stack-xml
	mv config/environments/development.rb                          /opt/fix/stack-config/
	mv plugins/lgdis/lib/lgdis/issue_patch.rb                      /opt/fix/stack-liblgdis/


    cp -p /home/apl/.gitconfig /root/
    cat  /root/.gitconfig
    git checkout master
    git status	
    git pull			差分解消
    git status
    git branch -a
    git bra:qnch
    git push origin master
    ls -alt /root/.git*		
    git status
    git rm config/routes.rb~ db/schema.rb
    git rm config/environments/development.rb~

	★refrain
    git status
    git st
    git diff [suspicious filename X]
    git add [suspicious filename X]

	★refrain
    git commit -m "some_body:苗字外部出力作成部分 不要ファイル削除版"
    git pull	#<----auto-merge 同じ窓で作業せず､初回おpull履歴を別窓に貼って一気に修正すること｡
    git add [手でmerge編集した個別のconflicted file]

		git diff
	★end of refrain


    git push origin master
    git branch -a
		Rails.root.Gemfile* Plugin[pluginname]Gemfile* をdiff後に復帰

		remote 削除はgit rm [deletable remote-filename]


  ★pattern#2 rebase and push
　　#windows
    find . -name *.rdf -o  -name *.sw* -o -name *.log -o -name *.*~ -o -name Thumbs.* -print |xargs rm --verbose
　　#linux
    find . -name *.rdf -o  -name *.sw* -o -name *.log -o -name *.*~  -print |xargs rm --verbose

rm ../public/*.rdf;  rm ../logs/*.log

find ./ -name *vim73* -print |xargs rm -rf --verbose

    git add [files 1..n]
    git commit -m ""
    git status
    git fetch
    git status
    git stash save
    git pull --rebase origin module_board
    git status
    git push origin module_board
    git stash pop

 ★こわれそうなとき、堂々巡りのときはcloneしなおす
　　git reflog
    git reset --hard HEAD@{6}


日々の開発のブランチの使い方
1. git checkout master
2. git pull origin master
3. git checkout -b feature-XXXXX
4. 修正をガシガシやる
5. git add && git commmit
6. 自信がない場合はここでbackup用のブランチを作成しとくと、めちゃくちゃになってもここで作ったブランチに戻せばなんとかなる。
7. git pull --rebase origin master
8. コンフリクトしたら色々直してaddして　git rebase --continue
9. git checkout master
10. git merge feature-XXXX --no-ff
11. git push origin master

feature-XXXとかはtopicブランチとかで検索すると意味がわかったりするかもしれませんが。
とりあえず機能追加はfeature-xxxx
バグフィックスはhotfix-xxxx



	#git そのほか
		stash一覧　（＋詳細つき）
			git stash list (-p)

      Stash-merge-conflict解消方法
      % git checkout --theirs test.txt
      直前のマージが衝突を起こしてまだ解決されていない時、ステージングエリアには“両側”の内容が記録されています。
      stashした内容を作業ツリーに持ってくるには--oursオプション、
      マージした内容を持ってくるには--theirsオプションを付けてgit checkoutコマンドを実行します。
      コンフリクトが発生した直後の状態にtest.txtを戻したい場合は、次のコマンドを実行します。
      % git checkout --merge test.txt

     

    ★GIT禁則NG:

       Git revert [commit-id]も変な手編集のあとは怪しい動作をする。
    　 stashは手でマージするな・。



    git checkout [filename/commit-id]
        変更前に移動したりまたもとに戻ってきたりできる 
        ここでの違いは、ワーキングツリーの変更されたファイルは保護されることだ。も
    し checkout コマンドに -f オプションを渡したら、reset --hard をしたのと同じこ
    とになる。ただし、checkout がワーキングツリーだけを変更するのに対して、reset
    --hard は現在のブランチの HEAD を、指定したバージョンの tree を参照するように
    変更する   



    #git localでいろいろ とりけす方法
      git checkout [filename/commit-id]
          変更前に移動したりまたもとに戻ってきたりできる 
          ここでの違いは、ワーキングツリーの変更されたファイルは保護されることだ。も
      し checkout コマンドに -f オプションを渡したら、reset --hard をしたのと同じこ
      とになる。ただし、checkout がワーキングツリーだけを変更するのに対して、reset
      --hard は現在のブランチの HEAD を、指定したバージョンの tree を参照するように
      変更する   

      git revert
          変更をなかったことにするためのコミットを作る(ログに残る)
      git reset
          変更をなかったことにする

    #git remote でいろいろ とりけす方法
     git push -f origin HEAD^:master
     #そのあとローカルの変更をpush

           --------------------------------------------------
        git reset --hard 05203ab6a8bfb4e18b01d831a745aad31fe26074
        git reset HEAD [filename-in-relative-path]

      #Gemfile.lockなどを中央管理からけすやりかた
        #管理下においてpush
        git add Gemfile.lock
        git add app/assets/javascripts/application.js
        git commit
        git push origin master
        #管理下からはずしてpush
        git rm app/assets/javascripts/application.js
        git rm Gemfile.lock

        <div class="actions">
          <%= f.submit %>
        </div>
      <% end %>
      root@localhost:/opt/me/sample# cat app/views/x06s/index.html.erb
        git commit
        git push origin master

      #git commitとりけし
      「git reset --soft filename」 → ワークディレクトリの内容はそのままでコミットだけを取り消す。
      「git reset --hard filename」 → コミット取り消した上でワークディレクトリの内容も書き換える。

      message cancel
      git commit --amend -m "fixed_commit_message_desu" --> 

    

    #git検索
      特定のファイルの変更履歴を見る場合は
      git blame db/migrate/20130601182525_create_categories_contents.rb  

      git log -p filename
      git log --follow -p filename

      コメント検索
      git log --grep=検索語正規表現

     ファイル名一覧だけ表示
     git show --name-only 1e78c04013e75b9faccc8d85c5d15741d770ebcd 

     ～以降の更新ファイル名差分だけ表示
　　  git diff --name-only eb7d5ebe05fae487fa7a89a03e4a0202c50cdda3
     



    #git試行錯誤環境
    　git co -b branchname
    　git co master
      git merge　branchname
     http://git-scm.com/book/ja/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A8%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%AE%E5%9F%BA%E6%9C%AC


    #git障害対応
      *GIT: error: bad index file sha1 signature fatal: index file corrupt
        rm .git/index; git reset
      *error: src refspec maser does not match any.
      *error: failed to push some refs to 'https://github.com/*****/*****.git'      
        git show-ref ; 
        git push origin HEAD:master

      *unable to update local ref)
         git gc --prune=now
         git remote prune origin

      *git branch detached from ([local branch name])
        差分fileをバックアップ待避 (Rails4root/binは不要)
        git checkout master
        差分fileを上書き復元
        commit & push
      * fatal: Unable to create '/opt/me/oksales_unistandard/.git/index.lock':
        rm .git/index.lock
#Windows short-cutkey
  Ctrl+Esc-Esc-Tab: task bar gropsにフォーカス移動､あとは矢印キーで選択 
        
#Rails予約語　:-aで終わるロマンシュ語っぽい英語､information,policeもか?

#rvm-combination
 oksales     ;  rvm use ruby-2.0.0-p195; rvm gemset use rails405
 rubylancer  ;  rvm use ruby-1.9.3-p429; rvm gemset use rails323
 samplescodes;  rvm use ruby-1.9.3-p429; rvm gemset use rails323

#typus http://docs.typuscmf.com/index.html#installation
  gem 'typus'
  bundle install
  rails generate typus
  vi config/typus/[modelname].yml
    #to_labelがrenderエラー｡列名の定義もこれらモデルごとのファイルでおこなう｡
    # default: to_label
    default: 

  #uninstall
    rails destroy typus
  #customize view
    rails generate typus:views

　#生成でひっかかればコメントアウト! 設定ファイルは config/typus/*yml, config/initializers/typus*

#typus リスト制御部分:調査中
  root@localhost:/opt/me/oksales_unistandard# grep -lnirE "@(data|items|data) *=" /usr/local/rvm/gems/ruby-2.0.0-p195@rails405/bundler/gems/typus-d06f85c7b345/* --exclude=*.sw* --exclude=*~ --exclude=*spec* --exclude=*log  --exclude=*svn* --exclude=*.log

sssssssssssssssss
/usr/local/rvm/gems/ruby-2.0.0-p195@rails405/bundler/gems/typus-d06f85c7b345/app/controllers/admin/resources_controller.rb
149   def get_objects
150     binding.pry
152     @resource = @resource.with_deleted

#N年に一度のPCメンテ作業
　モバイルバッテリー残電力チェック　:一番確実なのは純正バッテリー空にしてモバ
イルバッテリーだけで起動して残を目チェックすること｡電源オプションなどは期待した度差をしない

  HDDデータ移管: フォーマットはNTFSできまり｡パーティション統合はするな｡ウイル ス飛散を助長する｡

#ActiveADmin n Rails4　結論:typusの様には自動で既存モデルをよまないので 後述★の様な個別指定が要る｡また､既定で日本語ロケールを表示はしない｡ それから､ 保存しようとするとStrong parameter対応の記述をコントローラー単位でかかねばエ ラーになる｡ typusではこれらが全自動｡
  vim Gemfile
    gem 'activeadmin', github: 'gregbell/active_admin'#, branch: 'rails4'
  rails g active_admin:install --force
  ★rails g active_admin:resource product
     
  vim config/application.rb
    #coment out
    #     I18n.enforce_available_locales = true
    
  vim config/routes.rb
    #最下実行行に移動した方が無難
       devise_for :admin_users, ActiveAdmin::Devise.config
    end

  vim config/initializers/kaminari.rb
    #will_paginate使用の場合､以下を追加
    Kaminari.configure do |config|
      config.page_method_name = :per_page_kaminari
    end

  vim /opt/me/oksales_unistandard/db/migrate/20140208075341_create_active_admin_comments.rb
    change_tableブロック内を一切コメントアウト

  rake db:migrate
  vim config/application.rb
    #commentしかのをもどす｡
  bundle exec rails s
  #open localhost:3000/admin 
  #login;
    Email: admin@example.com
    Pass: password



#SVN #Subversion
  TortoiseSVN ダウンロード
    http://tortoisesvn.net/downloads.html
  eclipse ssh mount plugin
    ●
  #svn up/down
    svn status
    svn checkout svn+ssh://***.***.***/(directory) [checkout-name --username --password ***]
      svn list https://172.18.200.144/jalt_internal/J-ALERT-SOURCE/trunk/10_受信機設定管理ツール/SetupInfoManagement --username kaihatsu4
    svn update
    svn commit svn+ssh://***.***.***/(directory) [option] 
    svn add [filename1] [filename2] ...
    svn commit -m "活動名 コミット備忘録" a[filename1] [filename2] ...



#svn
 vim ~/.subversion/config
[miscellany]
 global-ignores = *.sw? *.*~ *vim73
 
 ながれ
　SVNでbranchからco --> branchにcommit

#aptana <-> vim
 S-C-l == shortcuts
 jump
   C-Q  <>  C-o

#DSL
  #CSS & SLIM/HAML
    mabopako: margin/border/padding/contents
    医者ｸラップ: .=> class, # =>ID
  #prototype.js
    #utility function :  $FARH(obj) (Fetch/Array/Range/Hash---conversion of Object)
  #DNS records
    A-CNAME NS-MX-SOA : Address
    


#postgres
  service postgresql-9.2 start
	su - postgres
	psql redmine_pg_dev
  psql SetupInfoManagement_production -U postgres -W
  #注意点
    .config/database.yml はhost: 127.0.0.1にしないと､既存user/pwでもident認証
にひっかかる｡postgresqlはident認証(unix id/pw = postgres d/pwで一致)がデフォル
ト｡
  #gem pg  fileでpgのインストールをもとめられたら
     REHL:
      事前にPATHとsoci-postgresql-devel.i686
       を準備しないとgem install はこける｡
       in case of REHL linuxes(REHL, centOS, fedora)
       you hae to make sure PATH and/or postgresql-devel is prepared as example below;
       export PATH=/usr/pgsql-9.2/bin:$PATH
       yum install soci-postgresql-devel.i686
      gem "pg", ">= 0.11.0", :platforms => [:mri, :mingw]
  　
    CentOS:
      パス指定しないとエラー Can't find the 'libpq-fe.h header
      gem  install pg -- --with-pg-dir=/usr/pgsql-9.2/

  #peer認証:既定のpeer認証では、ユーザ名がUnixのユーザ名と一致していないとエラーになります。
  /etc/init.d/postgresql-9.2 stop
   vim /var/lib/pgsql/9.2/data/pg_hba.conf
     --> peer を　passwordに
       81 # local   all             all                                     peer
       82 local   all             all                                  password
  /etc/init.d/postgresql-9.2 start
　　 
　#connect t DB
   psql redmine_pg_dev -U root 

  #db creation
    CREATE DATABASE tkt_redmine_development;
    \l: 
  #user creation
    createuser root;
    SELECT * FROM pg_shadow;

  #password creation
    alter user postgres with password 'root';

　　su - postgres
    /etc/init.d/postgresql-9.2 stop
    psql redmine_pg_dev -U postgres 
    alter user root with password '';
    /etc/init.d/postgresql-9.2 start


	select * from schema_migrations ;
	 \d issues_addtion_datat 
	ALTER evacuation_advisories rename type to advisory_type;

	PostgreSQLの基本的(よく使う)コマンドです。
    \c dbname               db 接続     
		\l　　　　　　　　　　　データベースの一覧
		\d+　　　　　　　　　 　テーブル一覧
		\d+ テーブル名|シークエンス名　　　テーブル|シークエンスの項目(フィールド)確認
      cf: mysql の show full columns [table_name]
		\i sqlファイル名　 　SQL(スクリプト)ファイルの実行
		\s                     コマンド履歴表示	
		\q　 　　　　　　　　　psqll切断 
		\x                     検索結果タテ表示　トグルで表示切り替え
      cf: mysql はSQL文末に \G;
           mysql の show full columns [table_name]
        
	root@localhost:/opt/fix/LGDIS# psql --version
	psql (PostgreSQL) 9.2.1

	ALTER TYPE
	Name
	列　拡張
		alter table hoge alter COLUMN hoge_column TYPE varchar(10)
	alter table issues add  mail_subject varchar(15)
/#
     cf: mysql列追加
alter table contents add deleted_at datetime;
     cf: mysql列型変更
      mysql> alter table contents change column newuser_max_num newuser_max_num  int;
     cf: mysqlt 列削除
　　　mysql> alter table categories_contents drop id;

#CSV出力
　　mysql> select * from stores into outfile '~/stores.csv' fields terminated by ',' optionally enclosed by '"' ;
  ls -alt /var/lib/mysql/realaf_development/;

#CSV入力
　RailsではまずCSVをUTF8保存してVIコマンド
  : set fenc=utf-8 | :set ff=unix | :w!
  | %s/^\w*,/NULL,/gc
　注意1:ID列のようなauto incrementカラムへはNULLを挿入する｡
        しかし時刻列にNULLをインポートするとNULLではなく0000-00-00 00:00:00 に
化けたりして､論理削除前提の動作環境では変になる｡(取得0件)
        Excelで空白列にNULLとかくと変なことになりうまくいかない｡  

  LOAD DATA LOCAL INFILE "/opt/me/oksales_unistandard/db/seeds/var_prices.csv" INTO TABLE var_prices FIELDS TERMINATED BY ',';
　注意2:LOAD文はCSV名とtable-name二カ所なおすこと｡

  結論:デフォルトでUTF8-UNIXでない環境RoRにむかない｡データ作成に手間取るだけ｡
　-->SeedImporter.rbクラスだと､列名不整合やautoincrement対策もしてくれるのでよい｡ただしdeleted_at以降は削れ｡


# mysqlに接続（default character set はutf8に）
chkconfig --level 345 mysqld on
service mysqld start
 mysql -u root -p  
	set names utf8;
	 show variables like "character !・>%";
	create database bikkuri_development
	create database bikkuri_mission_development
	create database bikkuri_hase_development
migrateとサーバー起動
	bundle exec rake db:migrate ;
	bundle exec rake db:seed
時計上の時間で検索したい場合は
Time.parse("2012-09-20 22:35").gmtime
といったようにやる。 MySQL上での時間データは、時差を加味しない時間が保存され
ているため、gmtimeで調整する/

SVN-trunkのダウンロード方法
★データ仕様書とダミーデータがあるだけ。
  svn list svn+ssh://svn.drecom.jp/svn/sg/bikkuri/doc/03_開発ドキュメント/

　"mysql履歴は vi ~/.mysql_history


#Ruby
present? blank? だけでなく try?(:symbol,args4symbol

Mysql2::Error: This version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery':
User.where(:id=>User.limit(3))じゃなくてUser.where(:id=>User.limit(3).map(&:id))で回避(rails3.2にて発生)

　　　

plugins/lgdis/db/migrate/008_create_evacuation_advisories.rb
+    add_index(:evacuation_advisories, :area, :unique => true, :where => 'deleted_at is NULL')
  	56 	+    add_index(:evacuation_advisories, :identifier, :unique => true, :where => 'deleted_at is NULL')


	
#1-liner
	#grep結果ファイル中文字列をかきかえ
	grep -lnirE "issueorlift" .  --include=**  --exclude=*.sw* --exclude=*~ --exclude=*.log --exclude=*spec* |xargs  ruby -p -e  '$_.gsub!(/issueorlift/, "issueorlift")'  -i
		rake db:seed

  #ps結果をgrepしてkill
   kill -9 `ps -ef |grep -nirE "(rub|rail|vim)"| ruby -ane 'p $F[1].to_i'`
  


	irb(main):020:0> puts Issue.first.methods.grep(/addition/i)

	Issue.first.issues_additional_data[0].remarks
		
	insert into issues_addtion_data values(2, 15, '日本測地系', -141.17184600, -38.39582800, '宮城県気仙沼市波路	上岩井崎１の地球の裏側', 'test for issue#15')
	insert into issues_addtion_data values(1, 14, '日本測地系',, '１',             'test for issue#14');
	insert into issues_addtion_data values(3, 14, '日本測地系', -179,          -89,          '南極近辺ロンドンの真裏',                   'test for issue#14-3');
	SELECT "issues_addtion_data".* FROM "issues_addtion_data";
	 update  issues_addtion_data set issue_id = 14 where id=2;

	insert into issue_geographies values(2, 15, '日本測地系','宮城県気仙沼市の地球の裏側', '-38.39582800-141.17184600',  'test for issue#15')
	insert into issue_geographies values(1, 14, '日本測地系','宮城県気仙沼市波路上岩井崎１',             '+38.82815400+141.60417200',  'test for issue#14');
 insert into issue_geographies values(3, 14, '日本測地系','南極近辺',                   '(-179,-89)', NULL,NULL, 'test for issue#14-3');

 insert into issue_geographies values(4, 14, '日本測地系','南極近辺point', '(-179,-89)', NULL,NULL, 'test for issue#14-3','2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00');
 insert into issue_geographies values(6, 14, '日本測地系','南極近辺line# ',NULL,'((-179,-89),(+141, +38))',NULL, 'test for issue#14-3','2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00');
 insert into issue_geographies values(5, 14, '日本測地系','南極近辺polygon',NULL,NULL,'((-179,-89),(+141, +38),(+142,+38),(-179,-89))', 'test for issue#14-3', '2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00');

新
INSERT INTO evacuation_advisories (advisory_type, alert, alerting_area, alias, area, area_kana, category, cause, changed_at, created_at, deleted_at, district, emergency_hq_needed_city, emergency_hq_needed_prefecture, evacuate_from, evacuate_to, evacuation_order, evacuation_steps_by_authorities, full_name, head_count, headline, households, identifier, issueorlift, issued_at, lifted_at, message, remarks, siren_area, sort_criteria, staff_no, updated_at) VALUES ('2', '警報内容03', '範囲 03', '別名称 03', '地区名称03', 'かないち','09', '原因03',NULL, '2010-11-30T14:59:00+09:00', NULL, '2','市町村 03', '都道府県 03', '要避難地域 03', '避難先03', '指示内容 03', '講ずべき措置03', '発令権限者03', 2700, 'ヘッドライン 03', 1000, '04202E00000000000029', '1', '2010-11-30T14:59:00+09:00', NULL, '情報文 03','備考 03', 'サイレン03', '2', '99999', '2010-11-30T14:59:00+09:00') ;

旧
INSERT INTO evacuation_advisories (advisory_type, alert, alerting_area, alias, area, area_kana, category, cause, changed_at, created_at, deleted_at, disaster_code, district, emergency_hq_needed_city, emergency_hq_needed_prefecture, evacuate_from, evacuate_to, evacuation_order, evacuation_steps_by_authorities, full_name, head_count, headline, households, identifier, issueorlift, issued_at, lifted_at, message, project_id, remarks, siren_area, sort_criteria, staff_no, updated_at) VALUES ('2', '警報内容03', '範囲 03', '別名称 03', '地区名称03', 'かないち','09', '原因03',NULL, '2010-11-30T14:59:00+09:00', NULL, 'lgdrm','2','市町村 03', '都道府県 03', '要避難地域 03', '避難先03', '指示内容 03', '講ずべき措置03', '発令権限者03', 2700, 'ヘッドライン 03', 1000, '04202E00000000000029', '1', '2010-11-30T14:59:00+09:00', NULL, '情報文 03', 3, '備考 03', 'サイレン03', '2', '99999', '2010-11-30T14:59:00+09:00') ;

 insert into edition_managements values (1,5,1,105,1,1, 'a2b33758-31a3-4a41-800e-4e9cc82147b1' , '2010-11-30T14:59:00+09:00', '2010-11-30T14:59:00+09:00');

	alter table issues alter COLUMN xml_head_title TYPE varchar(100);
	alter table issues add  mail_subject varchar(15)
	alter table issues add closed_at timestamp without time zone;
	alter table issues add  mail_subject TYPE varchar(15);
	alter table issues add summary varchar(4000);
	alter table issues add type_update varchar(255);
	alter table issues add published_at timestamp without time zone;
	alter table issues add opened_at timestamp without time zone;
	alter table issues add closed_at timestamp without time zone;
	alter table issues add delivered_area varchar(255);
	alter table evacuation_advisories alter COLUMN project_id DROP NOT NULL;
	alter table evacuation_advisories alter COLUMN disaster_code  DROP NOT NULL;
	alter table evacuation_advisories add issueorlift varchar(100);
  





----------------------------------------------------------------

INSERT into evacuation_advisories (
project_id,
disaster_code, sort_criteria, issueorlift, area,
issued_at, changed_at, lifted_at,
households, head_count,
identifier, category, cause, advisory_type,
staff_no, full_name, alias,
headline, message,
emergency_hq_needed_prefecture, emergency_hq_needed_city,
alert, alerting_area, siren_area,
evacuation_order, evacuate_from, evacuate_to, evacuation_steps_by_authorities,
remarks, deleted_at,created_at,updated_at
)values (
5,
'lgdrm-APPLIC参照','避難指示','発令', 'area-100-石巻市某地区',
'2010-11-30T14:59:00+09:00',NULL ,NULL ,
3, 7,
'県2市3管理番号5','WN','cause-4000-CAPでは｢category/event｣に相当。減災情報共有スキーマでは避難勧告発令情報の「発令要因」に相当-type-2-APPLIC準拠','TS',
'staff_no01', 'full_name-100-氏名間全角スペース1文字', 'alias-100-氏名間全角スペース1文字',
'headline-100-', 'message-4000-',
'emergency_hq_needed_prefecture-100-宮城県', 'emergency_hq_needed_city-100-石巻市',
'alert-4000-警報文', 'alerting_area-4000-全国もしくは特定地域名', 'siren_area-4000-全国もしくは特定地域名､或いはサイレン不使用',
'evacuation_order-4000-避難措置の指示内容', 'evacuate_from-4000-要避難地域', 'evacuate_to-4000-避難先地域', 'evacuation_steps_by_authorities-4000-緊急通>報発令_攻撃の予防鎮圧_安全経路場所',
'remarks-4000-備考', NULL, '2010-11-30T14:59:00+09:00', '2010-11-30T14:59:00+09:00'
)
;

----------------------------------------------------------------


指示等なし、避難準備、避難勧告、避難指示、警戒区域


#diff
	C:\VMstatic\0000000-215\trunk\document\技術検討\AtomFeed
		・TOPプロジェクトにて、Feed用のカスタムクエリを作成し、購読させる
	i	・カスタムクエリの範疇にて、抽出条件のカスタマイズが可能



#redmine-plugin
	rails g redmine_plugin_model lgdis issues_addtion_datum id:integer:yes issue_id:integer

      create  plugins/lgdis/app/models/issues_addtion_datum.rb
      create  plugins/lgdis/test/unit/issues_addtion_datum_test.rb
      create  plugins/lgdis/db/migrate/005_create_issues_addtion_data.rb



■SOAP
	rubyでsoapサーバを作る - hippos-lab::net
	    WSDLの作成
	    wsdl2rubyでスケルトンを生成
	    中身を実装

	SOAPでは次のような事柄が規定されています。
	● エンベロープ構成要素
	├ メッセージ構成
	└ 処理仕様
	● エンコーディング規則
	└ データのシリアライズメカニズム
	● RPC表現規則
	└ 要求と応答の規則


	#server
	 wsdl2ruby.rb --wsdl a.wsdl --type server --force
	
	#client
	 wsdl2ruby.rb --wsdl a.wsdl --type client --force


	実行
	ターミナル1
	 $ ruby -I. CalcServer.rb

	ターミナル2
	 $ ruby -I. CalcServerClient.rb



	・Rubyで実行

	1.root権限で以下のコマンドを実行（soap4r-ruby1.9ライブラリのインストール）
	gem install soap4r-ruby1.9

	・Railsで実行

	2.Gemfileに以下を追加
	gem "soap4r-ruby1.9"

	3.下記コマンドを実行
	bundle install

	参考URL
	http://route477.net/w/?RubySOAPt（Route 477 - RubyでSOAP）




	コモンズノードシステム上の SOAP 発信設定 は、
	http://schemas.xmlsoap.org/soap/http 
		publish(msg:any)
		返値
			getCode():int
			getResult():any




	公共情報コモンズ　マスタ管理システムの認証IDとパスワードを
	開発目的用につかいたいので､テスト用のIDとパスワードで十分です､
	https://www.publiccommons.ne.jp/SAMLService/SSO?returnURL=http%3A%2F%2FOS-PBS01%2FAssertionConsumer%2FSAML%2FArtifact&target=JJnDgAFi1PwDYjOs
		nttcom0@ishinomaki-city
		masasato@ishinomaki-city	

		

	
■SOAPの問題点
	getCode
	X509
	



RESQUE
	 service redis restart
	rake resque:work                          # Start a Resque worker
	rake resque:workers                       # Start multiple Resque workers.	
	rake resque:work QUEUE='*'
	rails s


mail
	BCC=ON

	#A社からは外部不特定通信先へのSSH通信(:443)とSMTP通信(:25)はみとめられていない｡したがってSMTP機能をつかったﾒｰﾙ配信機能はローカルホスト環境で行った｡

#ポート開放8
	#停止
	/etc/init.d/iptables stop
	#無効
	chkconfig iptables off
	#状況確認
	/etc/init.d/iptables status
	vi /etc/sysconfig/^Ctables
	vi /etc/postfix/master.cf
    

    #postfix

        #インストール
        yum install postfix


     #設定のながれ
        vi /etc/postfix/main.cf
        hostname
        mkdir /root/Maildir; mkdir /home/apl/Maildir
        chmod 700  /root/Maildir; chmod 700  /home/apl/Maildir
        chown root:root  /root/Maildir
        chown apl:apl  /home/apl/Maildir
        /etc/rc.d/init.d/postfix restart

     #動作確認
	#ポート開放確認
        telnet localhost 25
	 quit

	#サーバーローカルshellレベルでの直接送信
        echo test|sendmail root


	#Mailbox確認(Mailbox型式は暫定的にMailDir型式)
        date;ls -alt /[$USERHOME]/Maildir/new
	cat /root/Maildir/new/*
        	例)	date;ls -alt /root/Maildir/new
					date;ls -alt /root/Maildir/new; ls -alt  /home/apl/Maildir/new/
					cat /home/apl/Maildir/new/13617*

	#Redmine admin>adminユーザー情報変更
	http://192.168.18.130:3000/users/1
		メールアドレス	root@localhost.localdomain　に設定
		password再設定
		time-zone	GMT+9 Tokyo 再設定

	#Redmine admin>設定>管理>メール通知画面　右下最下部のテストメール送信リンクでの確認
	http://192.168.18.130:3000/settings/edit?tab=notifications
		デフォルトの送信者名redmine@example.netを適宜変更して保存してから送信リンクをクリックしてテストする｡保存しないでクリックするとメールヘッダーの送信者名は変わらない｡
i #
  #Rails環境設定
#設定編集 vi /opt/fix/LGDIS/config/environments/development.rb

	#規定値:config.action_mailer.raise_delivery_errors = false　を以下のごとく変更;
	config.action_mailer.perform_deliveries = true
	config.action_mailer.raise_delivery_errors = true
	Rails.application.config.action_mailer.perform_deliveries = true
	Rails.application.config.action_mailer.raise_delivery_errors = true

  #Uglifier無効化
    # Compress JavaScripts and CSS
    #some_body switched from true to false below
    config.assets.compress = false
    #some_body transplanted from development.rb
    # 必要に応じてproduction.rbにも以下を記述 Expands the lines which load the assets
    config.assets.debug = true




#IRB/ConsoleモードでRailsを起動し､以下のテストコマンド発行
<SMTP-Plain>
Lgdis::ExtOut::Mailer.setup( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "root@localhost.localdomain").deliver
Lgdis::ExtOut::SMTP_JichiShokuin.send_message({"mailing_list_name" =>"root@localhost.localdomain", "title" => "title漢字", "message" =>"sss漢字-------------"}, false)
Lgdis::ExtOut::Mailer.setup( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "apl@localhost.localdomain").deliver
Lgdis::ExtOut::Mailer.setup_auth( "apl@localhost.localdomain","SMTP-AUTH引数0", "########################################").deliver

/usr/local/lib/ruby/gems/1.9.1/gems/mail-2.4.4/lib/mail/message.rb
   229                                  debugger
   230          #debugcode  ActionMailer::Base.smtp_settings  ActionMailer::Base.raise_delivery_errors   ActionMailer::Base.perform_deliveries
=> 231          delivery_handler.deliver_mail(self) { do_delivery }

 "utf-8", "some_body@di-system.co.jp", "some_body@di-system.co.jp", "AlphaNumerics")


<SMTP-AUTH>
★Rootパスワードは社外秘
Lgdis::ExtOut::Mailer.setup_auth( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "root@localhost.localdomain", "root", "1qazxsw2").deliver
Lgdis::ExtOut::Mailer.setup_auth( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "root@localhost.localdomain", "apl", "AlphaNumerics").deliver
★MTAサーバー(postfixなど)にSMTP-AUTHの設定がされていない状況で､AUTHのコマンドを叩くと当然失敗する｡
これを複数回くりかえすと､不正接続とみなされて､正しいSMTP-PLAINでのコマンドも失敗する｡
→設定に工夫をくわえると解消される可能性あり｡

 Lgdis::ExtOut::SMTP_JichiShokuin.send_message({"mailing_list_name" =>"some_body@di-system.co.jp", "title" => "title漢字", "message" =>"sss漢字-------------"}, false)
[224, 233] in /usr/local/lib/ruby/gems/1.9.1/gems/mail-2.4.4/lib/mail/message.rb
   224      #  mail = Mail.read('file.eml')
   225      #  mail.deliver
   226      def deliver
   227        inform_interceptors
   228        if delivery_handler
=> 229          delivery_handler.deliver_mail(self) { do_delivery }
(rdb:1) delivery_handler.deliver_mail(self) { do_delivery }
SMTP-Plain postfix bug
Net::SMTPFatalError Exception: 554 5.7.1 <some_body@di-system.co.jp>: Relay access denied
Gmail bug
Encoding::CompatibilityError Exception: incompatible encoding regexp match (US-ASCII regexp with ISO-2022-JP string)
mail.body = mail.body.raw_source.encode('ISO-2022-JP', :invalid => :replace, :undef => :replace).encode('UTF-8')
mail.body = mail.body.raw_source.encode('iso-2022-jp', :invalid => :replace, :undef => :replace).encode('utf-8') #変換エラー対策




	#potfixログ確認		
	tail /var/log/maillog


	
#SMTP-AUTH設定

	#curys-sasl
	cyrus-saslは非常に多機能で、
	一般的な テキスト 認証の他に暗号化認証も扱うことができますし、 
	構築中のLinuxサーバー の ユーザーアカウント 名とパスワードをそのまま認証に使うことも、
	別の データベース を使って認証を行うこともできるようになっています。 


	#install
		cyrus-sasl-xxxxxxx
		cyrus-sasl-plain


	vi /usr/lib/sasl2/smtpd.conf 
		pwcheck_method: saslauthd


	service saslauthd start
		saslauthdを起動中:                                         [  OK  ]

	vim /etc/postfix/main.cf  
		myorigin = $myhostname
		 "SMTP Auth"の利用を許可する
		smtpd_sasl_auth_enable = yes

		"anonymous"接続を拒否する。
		smtpd_sasl_security_options = noanonymous

		"OutlookExpress対応
		broken_sasl_auth_clients = yes

		smtpd_sasl_local_domain = $mydomain
		smtpd_recipient_restrictions =
		    permit_mynetworks,
		    permit_sasl_authenticated,
		    reject_unauth_destination,
		    permit_auth_destination,
		    reject	

		    permit_mynetworksは、サーバー内のネットワーク、つまり内部からの利用を許可するものです。
		    permit_sasl_authenticated は、sasl認証できたものだけ受け入れる。
		    reject_unauth_destination で、認証できなかったものは、拒否する。
		    permit_auth_destination で、認証できたものは、受け入れる。
		    reject で、その他は、拒否する。

	    etc/init.d/postfix restart

	#curys-sasl password config
		/useradd some_body -s /sbin/nologin
		/usr/sbin/saslpasswd -c some_body
		/usr/sbin/sasldblistusers
		
		chgrp postfix /etc/sasldb
		chmod 640 /etc/sasldb

	#Mailer-config
		→「アカウント設定」→「サーバー」→「このサーバーは認証が必要」または「送信サーバーは認証が必要」にチェックを入れる。 
		or
		→「送信(SMTP)サーバの設定」から「セキュリティと認証」の「ユーザ名とパスワードを使用する」にチェックを入れる
		
	    etc/init.d/postfix restart
	    または
	　　 service postfix restart
		#/etc/init.d/saslauthdも起動していれば成功　
		
	#参考:確認コマンド
		postfix　-n
		postfix check
		

SAMBA
	vi /etc/samba/smb.conf
	最終行に以下の記述を追加
	[opt]
	path = /home/apl
	read only = No	

	#再起動する
	/etc/rc.d/init.d/smb restart

	#スタート＞ファイル名を指定して実行＞(VMのIP)でつながります
	#ネットワークドライブを割り当てると便利



================== ====================================
vim -S ~/session-130203 +VE +MRU
==================================================================


# Rubyコーディングスタイル
#
# then 省略
# .blank? .present?をつかう｡　.nil? .empty?はつかわない｡
# ※find_by_xxxという書き方はNG（元々あるメソッドを上書きしてし まうため）
#   find(:all, :conditions => ["name LIKE ?%", "A"], :order => "name ASC")
# ビジネスロジックはモデルに記入
# モデルは共通モデルクラスを継承
#  require_dependency 'model_helper'
#   class Foo < CustomModel extend ModelHelper
#
#文法チェックと警告
# ruby -wc <ファイル名>
	ruby -wTW2 <ファイル名>
#pwdのRDoc生成は　 rdoc -c utf8
#Rails全体の rake doc:app
#
# Stackはスタックを実装するクラスである。
class Stack
  
#RDoc コメントの付け方

■rdocの生成
rdoc は、手元でドキュメントを生成してみて、ちゃんと出力されることを確認する。
rdoc は、以下のコマンドで生成できる。
$ rdoc -c utf8
ドキュメントはカレントディレクトリの下の doc ディレクトリにHTML形式で生成される。また、オプションに -d をつけると、クラス図もつく（あまりわかりやすい図ではないが）
rails の場合は、以下のようにして生成する。
$ rake doc:app
カレントディレクトリの下の doc/app に生成される。
原則として、実装したクラス、モジュール、メソッド、定数には RDoc 形式のコメントを付ける。

  # スタック・アンダーフロー
  class UnderflowError < RuntimeError;  end

  # スタック・オーバーフロー
  class OverflowError < RuntimeError;  end

  # デフォルトのスタック容量
  DEFAULT_CAPACITY = 10
  
  # スタックの大きさ
  attr_reader :size
  # スタックの容量
  attr_reader :capacity

  # スタックへオブジェクトをプッシュする。
  # ==== Args
  # _obj_ :: プッシュするオブジェクト
  # ==== Raise
  # OverflowError :: スタック内のオブジェクトが容量を超える場合に発生。
  def push obj
    # TODO Stack#push の実装
  end

  # スタックからオブジェクトをポップする。
  # ==== Return
  # ポップされたオブジェクト。
  # ==== Raise
  # UnderflowError :: スタックが空である場合に発生。
  def pop
    # TODO Stack#pop の実装
  end
end


?	クラスコメント(ファイル先頭部分)のルール
o	require、namespace定義は、クラスコメントより上に記述する。
(クラスコメントより下に記述すると、ファイルのコメント部分に表示されるようになるため)
o	必ずクラス名を含める。
(この部分のRDocの出力にクラスのドキュメントへのリンクが自動で含まれないため)

?	メソッドのコメントルール
o	引数は　# ==== Args以下に # _"変数名"_ :: "変数の説明"形式で記述する。
o	戻り値が有る場合は # === Return以下に必ず記述する。
o	特筆すべき例外は # ==== Raise以下に # "例外クラス名" :: "例外の説明"形式で必ず記述する。


~



================================================================================	
git
	linux GUI

	commit=pg uploading
	clone = pg downloading with history

	push = history uploading
		default repositry name = 'origin'
	pull = histoy downloading
		default repositry name = 'origin'
		エラーには
			git commit -a 	<--'automatic'
		か　
			git reset --hard　
		で対処

	merge(ウィthnon-fast-forwarding option)
	統合ブランチ（本流）と
	トピックブランチ（支流）
		default repositry name = 'head'
		checkout [of some branch]= work tree place of head
			stash	=	まだコミットしていない変更点が他のブランチのヘッドに移ることをふせぐ変更点隔離措置


		
		head~n = -n generation
		head^n = -n parantes
		
	mergeとrebaseは共に履歴を統合しますが、特徴が異なります。
		merge
		変更内容の履歴はそのまま残るが、履歴が複雑になる。 
		rebase
		履歴は単純になるが、元のコミットから変更内容が変更される。
		そのため、元のコミットを動かない状態にしてしまうことがある。 
		mergeとrebaseは、チームの運用方針に応じて使い分けます。
		例えば、履歴を一本化するように運用をするのであれば

		トピックブランチに統合ブランチの最新のコードを取り込む場合はrebaseを使う 
		統合ブランチにトピックブランチを取り込む場合は、まずrebaseしてからmerge 
		

		Gitでのブランチの運用モデルとして、A successful Git branching modelを紹介します。
		日本語訳:
		http://keijinsonyaban.blogspot.jp/2010/10/successful-git-branching-model.html

	#configurations.yml やroutes.rbなど開発専用ファイルを設定

	rails s --debugger
		


#Rspec
	vi /opt/fix/LGDIS/config/database.yml
		test:
			adapter: postgresql
			database: LGDIS_test
			host: 127.0.0.1
			username: dev
			password: devdev
			encoding: utf8
	vi ~/.rspecrc
		--debug
 
 export RAILS_ENV=.
	RAILS_ENV=test rake db:migrate:reset
	RAILS_ENV=test rake redmine:plugins:migrate
	RAILS_ENV=test rake redmine:load_default_data
	RAILS_ENV=test rake db:seed
	RAILS_ENV=test rspec /opt/fix/LGDIS/plugins/lgdis/spec/controllers/shelters_controller_spec.rb
	
★リダイレクト実行時にdebuggerはオフにすること





	rspec /opt/fix/LGDIS/plugins/lgdis/spec/controllers/evacuation_advisories_controller_spec.rb|less
bsbs

vi /opt/fix/LGDIS/spec/factories/evacuation_advisory_factory.rb

	describe/contect   ..... do
		it 'message' do
			*** should_XXXX
			***  == +++
	
	


apache+LDAP認証
Google map api
Rhodes


----
Linux GIT GUI


#認証とかの情報設定
ActionMailer::Base.smtp_settings = 
{ :address => 'smtp.hoge.co.jp',
	:port => 25,
        :domain => 'hoge.co.jp',
        :user_name => 'sukottotaigaaa',
        :password => 'hogemogepyapypay',
        :authentication => :login
}


#rail3 routing
RedmineApp::Application.routes.url_helpers.
i RedmineApp::Application.routes.url_for(
rb(main):079:0>  Redmine::Plugin.registered_plugins[:lgdis].directory
=> "/opt/fix/LGDIS/plugins/lgdis"
irb(main):080:0> Redmine::Plugin.registered_plugins[:lgdis].public_directory
=> "/opt/fix/LGDIS/public/plugin_assets/lgdis"
irb(main):081:0>  Redmine::Plugin.registered_plugins[:lgdis].url
=> nil
irb(main):082:0>  Redmine::Plugin.registered_plugins[:lgdis].methods.sort
=> [:!, :!=, :!~, :<=>, :==, :===, :=~, :__id__, :__is_a__, :__metaclass__, :__send__, :_method, :`, :activity_provider, :acts_like?, :add_menu_item, :as_json, :assets_directory, :author, :author_url, :binding_n, :blank?, :breakpoint, :capture, :class, :class_eval, :clone, :configurable?, :dclone, :debugger, :define_singleton_method, :delete_menu_item, :description, :directory, :directory=, :display, :dup, :duplicable?, :enable_warnings, :enum_for, :eql?, :equal?, :expects, :extend, :freeze, :frozen?, :gem, :hash, :html_safe?, :id, :in?, :initialize_clone, :initialize_dup, :inspect, :instance_eval, :instance_exec, :instance_of?, :instance_values, :instance_variable_defined?, :instance_variable_get, :instance_variable_names, :instance_variable_set, :instance_variables, :is_a?, :kind_of?, :latest_migration, :load, :load_dependency, :menu, :method, :method_exists?, :methods, :migrate, :migration_directory, :migrations, :mirror_assets, :mocha, :mocha_inspect, :name, :nil?, :object_id, :permission, :presence, :present?, :pretty_inspect, :pretty_print, :pretty_print_cycle, :pretty_print_inspect, :pretty_print_instance_variables, :private_methods, :project_module, :protected_methods, :psych_to_yaml, :public_directory, :public_directory=, :public_method, :public_methods, :public_send, :quietly, :require, :require_association, :require_dependency, :require_or_load, :requires_redmine, :requires_redmine_plugin, :reset_mocha, :respond_to?, :respond_to_missing?, :send, :settings, :should, :should_not, :silence, :silence_stderr, :silence_stream, :silence_warnings, :singleton_class, :singleton_methods, :stubba_method, :stubba_object, :stubs, :suppress, :suppress_warnings, :taint, :tainted?, :tap, :to_enum, :to_json, :to_matcher, :to_param, :to_query, :to_s, :to_yaml, :to_yaml_properties, :trust, :try, :unloadable, :unstub, :untaint, :untrust, :untrusted?, :url, :version, :wiki_format_provider, :with_options, :with_warnings]


#irb technique
 helper.render :template => "common/feed", :formats => [:atom], :layout => false,  :content_type => 'application/atom+xml'
helper.request
ActiveRecord::Base.connection.select_values('SELECT * FROM evacuation_advisories')
 ActiveRecord::Base.connection.select_value("select nextval('evacuation_code_seq')")	#<---sequence name
privateメソッドはIRBからは定義行しか見えない｡


#Rails環境変数
Rails.application.config 
@generators=#<Rails::Configuration::Generators:0x9b3e83c 
@aliases={}, 
@options={:rails=>{:orm=>:active_record, :test_framework=>:test_unit, :integration_tool=>:test_unit, :performance_tool=>:test_unit}, :active_record=>{:migration=>true, :timestamps=>true}, :test_unit=>{:fixture=>true, :fixture_replacement=>nil}}, 
@fallbacks={}, 
@templates=[], 
@colorize_logging=true, 
@hidden_namespaces=[]>, 
@encoding="utf-8", 
@allow_concurrency=false, 
@consider_all_requests_local=false, 
@filter_parameters=[:password], 
@helpers_paths=["/opt/fix/LGDIS/app/helpers"], 
@dependency_loading=true, 
@serve_static_assets=true, 
@static_cache_control=nil, 
@force_ssl=false, 
@ssl_options={}, 
@session_store=:cookie_store, 
@session_options={:key=>"_redmine_session", :secret=>"bdd227ec5f0dbfa5f5e774c15050beb83b60c5b0bdef2c18bdf51163a3d7", :coder=>#<Rack::Session::Cookie::Base64::Marshal:0xc2c9154>, :cookie_only=>true}, 
@time_zone="Tokyo", 
@log_level=:debug, 
@middleware=#<ActionDispatch::MiddlewareStack:0xc34220c 
@middlewares=[ActionDispatch::Static, Rack::Lock, #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0xa3f2d20>, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport, OpenIdAuthentication]>, 
@cache_store=[:file_store, "/opt/fix/LGDIS/tmp/cache/"], 
@railties_order=[:all], 
@relative_url_root=nil, 
@reload_classes_only_on_change=true, 
@file_watcher=ActiveSupport::FileUpdateChecker, 
@exceptions_app=nil, 
@assets={:enabled=>false, :paths=>["/usr/local/lib/ruby/gems/1.9.1/gems/jquery-rails-2.2.0/vendor/assets/javascripts"], :precompile=>[#<Proc:0xacddbec
@/usr/local/lib/ruby/gems/1.9.1/gems/railties-3.2.11/lib/rails/application/configuration.rb:48>, /(?:\/|\\|\A)application\.(css|js)$/], :prefix=>"/assets", :version=>"1.0", :debug=>false, :compile=>true, :digest=>false, :manifest=>nil, :cache_store=>[:file_store, "/opt/fix/LGDIS/tmp/cache/assets/"], :js_compressor=>nil, :css_compressor=>nil, :initialize_on_precompile=>true, :logger=>nil}, 
@paths={"app"=>["app"], "app/assets"=>["app/assets"], "app/controllers"=>["app/controllers"], "app/helpers"=>["app/helpers"], "app/models"=>["app/models"], "app/mailers"=>["app/mailers"], "app/views"=>["app/views"], "lib"=>["lib"], "lib/assets"=>["lib/assets"], "lib/tasks"=>["lib/tasks"], "config"=>["config"], "config/environments"=>["config/environments"], "config/initializers"=>["config/initializers"], "config/locales"=>["config/locales"], "config/routes"=>["config/routes.rb"], "db"=>["db"], "db/migrate"=>["db/migrate"], "db/seeds"=>["db/seeds.rb"], "vendor"=>["vendor"], "vendor/assets"=>["vendor/assets"], "vendor/plugins"=>["vendor/plugins"], "config/database"=>["config/database.yml"], "config/environment"=>["config/environment.rb"], "lib/templates"=>["lib/templates"], "log"=>["log/development.log"], "public"=>["public"], "public/javascripts"=>["public/javascripts"], "public/stylesheets"=>["public/stylesheets"], "tmp"=>["tmp"]}, 
@autoload_paths=["/opt/fix/LGDIS/lib"], 
@eager_load_paths=["/opt/fix/LGDIS/app/controllers", "/opt/fix/LGDIS/app/helpers", "/opt/fix/LGDIS/app/models"], 
@autoload_once_paths=[], 
@cache_classes=false, 
@whiny_nils=true, 
@secret_token="804c13d30e4b4d9bdbeb819e2aea4a6d9c



#Redmine環境変数
 Mailer.test_email(User.all[4]).deliver
ActionMailer::Base.smtp_settings

.config
#<Rails::Application::Configuration:0xb0c4e7c 
@root=#<Pathname:/opt/fix/LGDIS>, 
@generators=#<Rails::Configuration::Generators:0x9b3e83c 
@aliases={}, 
@options={:rails=>{:orm=>:active_record, :test_framework=>:test_unit, :integration_tool=>:test_unit, :performance_tool=>:test_unit}, :active_record=>{:migration=>true, :timestamps=>true}, :test_unit=>{:fixture=>true, :fixture_replacement=>nil}}, 
@fallbacks={},  ""
@templates=[], 
@colorize_logging=true, 
@hidden_namespaces=[]>, 
@encoding="utf-8", 
@allow_concurrency=false, 
@consider_all_requests_local=false, 
@filter_parameters=[:password], 
@helpers_paths=["/opt/fix/LGDIS/app/helpers"], 
@dependency_loading=true, 
@serve_static_assets=true, 
@static_cache_control=nil, 
@force_ssl=false, 
@ssl_options={}, 
@session_store=:cookie_store, 
@session_options={:key=>"_redmine_session", :secret=>"bdd227ec5f0dbfa5f5e774c15050beb83b60c5b0bdef2c18bdf51163a3d7", :coder=>#<Rack::Session::Cookie::Base64::Marshal:0xc2c9154>, :cookie_only=>true}, 
@time_zone="Tokyo", 
@log_level=:debug, 
@middleware=#<ActionDispatch::MiddlewareStack:0xc34220c 
@middlewares=[ActionDispatch::Static, Rack::Lock, #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0xa3f2d20>, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport, OpenIdAuthentication]>, 
@cache_store=[:file_store, "/opt/fix/LGDIS/tmp/cache/"], 
@railties_order=[:all], 
@relative_url_root=nil, 
@reload_classes_only_on_change=true, 
@file_watcher=ActiveSupport::FileUpdateChecker, 
@exceptions_app=nil, 
@assets={:enabled=>false, :paths=>["/usr/local/lib/ruby/gems/1.9.1/gems/jquery-rails-2.2.0/vendor/assets/javascripts"], :precompile=>[#<Proc:0xacddbec
@/usr/local/lib/ruby/gems/1.9.1/gems/railties-3.2.11/lib/rails/application/configuration.rb:48>, /(?:\/|\\|\A)application\.(css|js)$/], :prefix=>"/assets", :version=>"1.0", :debug=>false, :compile=>true, :digest=>false, :manifest=>nil, :cache_store=>[:file_store, "/opt/fix/LGDIS/tmp/cache/assets/"], :js_compressor=>nil, :css_compressor=>nil, :initialize_on_precompile=>true, :logger=>nil}, 
@paths={"app"=>["app"], "app/assets"=>["app/assets"], "app/controllers"=>["app/controllers"], "app/helpers"=>["app/helpers"], "app/models"=>["app/models"], "app/mailers"=>["app/mailers"], "app/views"=>["app/views"], "lib"=>["lib"], "lib/assets"=>["lib/assets"], "lib/tasks"=>["lib/tasks"], "config"=>["config"], "config/environments"=>["config/environments"], "config/initializers"=>["config/initializers"], "config/locales"=>["config/locales"], "config/routes"=>["config/routes.rb"], "db"=>["db"], "db/migrate"=>["db/migrate"], "db/seeds"=>["db/seeds.rb"], "vendor"=>["vendor"], "vendor/assets"=>["vendor/assets"], "vendor/plugins"=>["vendor/plugins"], "config/database"=>["config/database.yml"], "config/environment"=>["config/environment.rb"], "lib/templates"=>["lib/templates"], "log"=>["log/development.log"], "public"=>["public"], "public/javascripts"=>["public/javascripts"], "public/stylesheets"=>["public/stylesheets"], "tmp"=>["tmp"]}, 
@autoload_paths=["/opt/fix/LGDIS/lib"], 
@eager_load_paths=["/opt/fix/LGDIS/app/controllers", "/opt/fix/LGDIS/app/helpers", "/opt/fix/LGDIS/app/models"], 
@autoload_once_paths=[], 
@cache_classes=false, 
@whiny_nils=true, 
@secret_token="804c13d30e4b4d9bdbeb819e2aea4a6d9cdd12c0e209bedf08828cbcd32ee5f14d0ba5f9987f2ebc8c6d32fd58685d5991b6475828487fd923a03f74b6d4a013">



----------------------------------------





/opt/LGDIS/app/controllers/projects_controller.rb
 47   # Lists visible projects
 48   def index
 49     respond_to do |format|
 50       format.html {
 51         scope = Project
 52         unless params[:closed]
 53           scope = scope.active
 54         end
 55         @projects = scope.visible.order('lft').all
 56       }
 57       format.api  {
 58         @offset, @limit = api_offset_and_limit
 59         @project_count = Project.visible.count
 60         @projects = Project.visible.all(:offset => @offset, :limit => @limit, :order => 'lft')
 61       }
 62       format.atom {
 63         projects = Project.visible.find(:all, :order => 'created_on DESC',
 64                                               :limit => Setting.feeds_limit.to_i)
 65         render_feed(projects, :title => "#{Setting.app_title}: #{l(:label_project_latest)}")
 66       }
 67     end
 68   end


application_controller.rb|98 col 33| elsif params[:format] == 'atom' && params[:key] && request.get? && accept_rss_auth?
 98       elsif params[:format] == 'atom' && params[:key] && request.get? && accept_rss_auth?
 99         # RSS key authentication does not start a session
100         user = User.find_by_rss_key(params[:key])



 4 application_controller.rb|425 col 54| render :template => "common/feed", :formats => [:atom], :layout => false,
420   def render_feed(items, options={})
421     @items = items || []
422     @items.sort! {|x,y| y.event_datetime <=> x.event_datetime }
423     @items = @items.slice(0, Setting.feeds_limit.to_i)
424     @title = options[:title] || Setting.app_title
425     render :template => "common/feed", :formats => [:atom], :layout => false,
426            :content_type => 'application/atom+xml'
427   end


 10 issues_controller.rb|122 col 14| format.atom { render :template => 'journals/index', :layout => false, :content_type => 'application/atom+xml' }
102   def show
103     @journals = @issue.journals.includes(:user, :details).reorder("#{Journal.table_name}.id ASC").all
104     @journals.each_with_index {|j,i| j.indice = i+1}
105     @journals.reject!(&:private_notes?) unless User.current.allowed_to?(:view_private_notes, @issue.project)
106     @journals.reverse! if User.current.wants_comments_in_reverse_order?
107
108     @changesets = @issue.changesets.visible.all
109     @changesets.reverse! if User.current.wants_comments_in_reverse_order?
110
111     @relations = @issue.relations.select {|r| r.other_issue(@issue) && r.other_issue(@issue).visible? }
112     @allowed_statuses = @issue.new_statuses_allowed_to(User.current)
113     @edit_allowed = User.current.allowed_to?(:edit_issues, @project)
114     @priorities = IssuePriority.active
115     @time_entry = TimeEntry.new(:issue => @issue, :project => @issue.project)
116     respond_to do |format|
122       format.atom { render :template => 'journals/index', :layout => false, :content_type => 'application/atom+xml' }
127     end
128   end

rb(main):076:1> puts IssuesController.respond_to{|f| f.atom(ApplicationController.render_feed(Issue.first, :title => "test")  }
irb(main):077:2> puts IssuesController.respond_to{|f| f.atom(ApplicationController#render_feed(Issue.first, :title => "test")  }





require "cgi"
require "template"
 
class Feeder
    def self.get(tmpl_path, options = {})
        cgi = CGI.new
        mime_type = options[:mime_type] || "application/xml"
        encoding = options[:encoding] || "utf-8"
        language = options[:language] || "ja"
 
        v = Template.get(tmpl_path, {"type" => mime_type, "charset" => encoding})
        v.encoding = encoding
        v.language = language
        v.site_url = "http://" + cgi.server_name
        v.feed_url = v.site_url + cgi.script_name if v.methods.include?("feed_url")
        return v
    end
end


irb(main):152:0> issue.methods.sort.grep(/(author|er_name|title)/i)
=> [:_active_authorizer, :_active_authorizer=, :_active_authorizer?, :author, :author=, :author_id, :author_id=, :author_id?, :author_id_before_type_cast, :author_id_change, 
:author_id_changed?, :author_id_was, :author_id_will_change!, :autosave_associated_records_for_author, :build_author, :create_author!, :event_author, :event_title, 
:mass_assignment_authorizer, :reset_author_id!]



<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平時・未割当: 活動</title>
  <link rel="self" href="http://192.168.18.130:3000/projects/lgdis000/activity.atom?key=6724553250c556a08a5ff4a76724d8b5ed1c3a45"/>
  <link rel="alternate" href="http://192.168.18.130:3000/projects/lgdis000/activity"/>
  <id>http://192.168.18.130:3000/</id>
  <updated>2013-01-24T07:59:01Z</updated>
  <author>
    <name>Redmine</name>
  </author>
  <generator uri="http://www.redmine.org/">
Redmine  </generator>
  <entry>
    <title>避難勧告・指示情報（公共情報コモンズ配信用） #14 (新規): ISSUE 01</title>
    <link rel="alternate" href="http://192.168.18.130:3000/issues/14"/>
    <id>http://192.168.18.130:3000/issues/14</id>
    <updated>2013-01-24T07:59:01Z</updated>
    <author>
      <name>Admin Redmine</name>
      <email>root@localhost.localdomain</email>
    </author>
    <content type="html">

&lt;p&gt;ISSUE 01msg&lt;/p&gt;    </content>
  </entry>
</feed>




redmine_pg_dev=# \d shelters
                                                 テーブル "public.shelters"
                  列                   |             型              |                        修飾語
---------------------------------------+-----------------------------+-------------------------------------------------------
 id                                    | integer                     | not null default nextval('shelters_id_seq'::regclass)
 project_id                            | integer                     | not null
 disaster_code                         | character varying(20)       | not null
 name                                  | character varying(30)       | not null
 name_kana                             | character varying(60)       |
 address                               | character varying(200)      | not null
 phone                                 | character varying(20)       |
 fax                                   | character varying(20)       |
 e_mail                                | character varying(255)      |
 person_responsible                    | character varying(100)      |
 shelter_type                          | character varying(255)      | not null
 shelter_type_detail                   | character varying(255)      |
 shelter_sort                          | character varying(255)      | not null
 opened_at                             | timestamp without time zone |
 closed_at                             | timestamp without time zone |
 capacity                              | integer                     |
 status                                | character varying(255)      |
 head_count                            | integer                     |
 head_count_voluntary                  | integer                     |
 households                            | integer                     |
 households_voluntary                  | integer                     |
 checked_at                            | timestamp without time zone |
 shelter_code                          | character varying(14)       | not null
 manager_code                          | character varying(10)       |
 manager_name                          | character varying(100)      |
 manager_another_name                  | character varying(100)      |
 reported_at                           | timestamp without time zone |
 building_damage_info                  | character varying(4000)     |
 electric_infra_damage_info            | character varying(4000)            | character varying(4000)     |
 other_damage_info                     | character varying(4000)     |
 usable_flag                           | character varying(1)        |
 openable_flag                         | character varying(1)        |
 injury_count                          | integer                     |
 upper_care_level_three_count          | integer                     |
 elderly_alone_count                   | integer                     |
 elderly_couple_count                  | integer                     |
 bedridden_elderly_count               | integer                     |
 elderly_dementia_count                | integer                     |
 rehabilitation_certificate_count      | integer                     |
 physical_disability_certificate_count | integer                     |
 note                                  | character varying(4000)     |
 deleted_at                            | timestamp without time zone |
 created_at                            | timestamp without time zone | not null
 updated_at                            | timestamp without time zone | not null
インデックス:
    "shelters_pkey" PRIMARY KEY, btree (id)

root@localhost:/opt/LGDIS/plugins/lgdis# find . -name "*shelter*" -print sort
./app/controllers/shelters_controller.rb
./app/helpers/shelters_helper.rb
./app/models/shelter.rb
./app/views/shelters
./assets/stylesheets/shelters.css
./db/migrate/001_shelters.rb


	rails g redmine_plugin_model lgdis  evacuation_advisory id:integer:yes project_id:integer
	rails g redmine_plugin_controller lgdis  evacuation_advisories index 

		/app/controllers/evacuation_advisories_controller.rb
		/app/helpers/evacuation_advisories_helper.rb
		/app/models/evacuation_advisory.rb
		/app/views/evacuation_advisories/index.html.erb
		/db/migrate/007_create_evacuation_advisories.rb
		/test/functional/evacuation_advisories_controller_test.rb
		/test/unit/evacuation_advisory_test.rb

	 grep -nirE "remark" * --include=*.rb
grep -nirE "total_pages" /data/on_gree/bm_gree/* --include=**  --exclude=*.sw* --exclude=*~ --exclude=*spec* --exclude=*log  --exclude=*svn*

	前後5行を出力する例
grep -nirE "total_pages" /data/on_gree/bm_gree/* --include=**  --exclude=*.sw* --exclude=*~ --exclude=*spec* --exclude=*log  --exclude=*svn* -C5

##############
 rails g redmine_plugin_controller lgdis issue_geographies
 rails g redmine_plugin_model lgdis issue_geography
find . -name "*geog*" -print |sort


#LINUX運用コマンド　(開発系)
	#step数ステップ数 メソッド数
# find . -name "*rb" -o -name "*.yml" | xargs wc -l
grep -nirE "def \w" .  --include=**  --exclude=*.sw* --exclude=*~ --exclude=*.log > ../../GrepDef.txt

	rake -T |grep stat
	rake stats

		root@localhost:/opt/fix/LGDIS# rake stats

		*** Mocha deprecation warning: Change `require 'mocha'` to `require 'mocha/setup'`.

		+----------------------+-------+-------+---------+---------+-----+-------+
		| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
		+----------------------+-------+-------+---------+---------+-----+-------+
		| Controllers          |  6397 |  4716 |      49 |     392 |   8 |    10 |
		| Helpers              |  3965 |  2665 |       2 |     234 | 117 |     9 |
		| Models               | 11569 |  8033 |      86 |     871 |  10 |     7 |
		| Libraries            | 32843 | 23889 |     155 |    1378 |   8 |    15 |
		| Integration tests    |  7711 |  5727 |      82 |     168 |   2 |    32 |
		| Functional tests     | 16661 | 13404 |      81 |    1221 |  15 |     8 |
		| Unit tests           | 22610 | 17290 |     119 |    1547 |  13 |     9 |
		+----------------------+-------+-------+---------+---------+-----+-------+
		| Total                | 101756 | 75724 |     574 |    5811 |  10 |    11 |
		+----------------------+-------+-------+---------+---------+-----+-------+
			Code LOC: 39303     Test LOC: 36421     Code to Test Ratio: 1:0.9

 16918 合計


	find . -name "*rb" | xargs wc -l
	find . -name "*rb" -o -name "*.yml" | xargs wc -l
	#手動バックアップ
	 tar cvf lgdis-imamondai4.tar lgdis/ ; mv lgdis-imamondai*.tar /opt/fix ; date; ls -alt /opt/fix/*tar ;


root@localhost:/opt/LGDIS# rake -T |grep redmine
rake redmine:attachments:prune            # Removes uploaded files left unattached after one day.
rake redmine:email:read                   # Read an email from standard input.
rake redmine:email:receive_imap           # Read emails from an IMAP server.
rake redmine:email:receive_pop3           # Read emails from an POP3 server.
rake redmine:email:test[login]            # Send a test email to the user with the provided login name
rake redmine:fetch_changesets             # Fetch changesets from the repositories
rake redmine:load_default_data            # Load Redmine default configuration data.
rake redmine:migrate_from_mantis          # Mantis migration script
rake redmine:migrate_from_trac            # Trac migration script
rake redmine:permissions                  # List all permissions and the actions registered with them
rake redmine:plugins                      # Migrates and copies plugins assets.
rake redmine:plugins:assets               # Copies plugins assets into the public directory.
rake redmine:plugins:migrate              # Migrates installed plugins.
rake redmine:plugins:test                 # Runs the plugins tests.
rake redmine:plugins:test:functionals     # Run tests for {:functionals=>"db:test:prepare"}
rake redmine:plugins:test:integration     # Run tests for {:integration=>"db:test:prepare"}
rake redmine:plugins:test:units           # Run tests for {:units=>"db:test:prepare"}
rake redmine:send_reminders               # Send reminders about issues due in the next days.
rake redmine:tokens:prune                 # Removes expired tokens.
rake redmine:watchers:prune               # Removes watchers from what they can no longer view.


root@localhost:/opt/LGDIS# rake routes|grep evacuation
GET	/evacuation_advisories(.:format)	evacuation_advisories#index
POST	/evacuation_advisories(.:format)	evacuation_advisories#create
GET	/evacuation_advisories/new(.:format)	evacuation_advisories#new
GET	/evacuation_advisories/:id/edit(.:format)	evacuation_advisories#edit
GET	/evacuation_advisories/:id(.:format)	evacuation_advisories#show
PUT	/evacuation_advisories/:id(.:format)	evacuation_advisories#update
DELETE	/evacuation_advisories/:id(.:format)	evacuation_advisories#destroy


root@localhost:/opt/LGDIS# rake routes|grep evacuation
         project_evacuation_advisories GET      /projects/:project_id/evacuation_advisories(.:format)                             evacuation_advisories#index
                                       POST     /projects/:project_id/evacuation_advisories(.:format)                             evacuation_advisories#create
       new_project_evacuation_advisory GET      /projects/:project_id/evacuation_advisories/new(.:format)                         evacuation_advisories#new
      edit_project_evacuation_advisory GET      /projects/:project_id/evacuation_advisories/:id/edit(.:format)                    evacuation_advisories#edit
           project_evacuation_advisory GET      /projects/:project_id/evacuation_advisories/:id(.:format)                         evacuation_advisories#show
                                       PUT      /projects/:project_id/evacuation_advisories/:id(.:format)                         evacuation_advisories#update
                                       DELETE   /projects/:project_id/evacuation_advisories/:id(.:format)                         evacuation_advisories#destroy


root@localhost:/opt/LGDIS# Connecting to database specified by database.yml
OpenIdAuthentication.store is nil. Using in-memory store.


root@localhost:/opt/LGDIS/plugins/lgdis# grep -nirE "note" * --include=*vacuat*.rb
:14:#                   :other_damage_info,:usable_flag,:openable_flag,:note,
app/models/evacuation_advisory.rb:132:#   validates :note,
app/models/evacuation_advisory.rb:290:      node_evacuation_advisory.add_element("備考").add_text("#{evacuation_advisory.note}")

app/views/evacuation_advisories/_form.html.erb:226:  <%= field_for :note do |key, label| %>
app/views/evacuation_advisories/_search_conditions.html.erb:122:  <%= field_for :note do |key, label| %>


※上の画像で分かると思うけど、自分はitemテーブル作って色々と試してみてる。

class Item < ActiveRecord::Base
  def name
    super.force_encoding('UTF-8')
  end
  def note
    super.force_encoding('UTF-8')
  end
end



#some_body dev:  @evacuation_advisory_const が避難所モデルのままなので､invertなどはつかえない｡%>

irb(main):112:0> Constant::hash_for_table(EvacuationAdvisory.table_name)
  Constant Load (212.0ms)  SELECT "constants".* FROM "constants" WHERE (kind1='TD' AND kind2='evacuation_advisories') ORDER BY kind3 ASC, _order ASC
=> {"openable_flag"=>{"1"=>"可", "0"=>"不可"}, "sort_criteria"=>{"1"=>"未開設", "2"=>"開設", "3"=>"閉鎖", "4"=>"不明", "5"=>"常設"}, "status"=>{"1"=>"空き", "2"=>"混雑", "3"=>"定員一杯", "4"=>"不明"}, "type"=>{"1"=>"避難所", "2"=>"臨時避難所", "3"=>"広域避難所：開設措置なし", "4"=>"一次避難所：開設措置なし"}, "usable_flag"=>{"1"=>"可", "0"=>"不可"}}



そのようなファイルやディレクトリはありません - /opt/fix/LGDIS/plugins/lgdis/config/settings.yml
/opt/fix/LGDIS/plugins/lgdis/init.rb:16:in `<top (required)>'
/opt/fix/LGDIS/lib/redmine/plugin.rb:130:in `block in load'
/opt/fix/LGDIS/lib/redmine/plugin.rb:121:in `each'
/opt/fix/LGDIS/lib/redmine/plugin.rb:121:in `load'
/opt/fix/LGDIS/config/initializers/30-redmine.rb:12:in `<top (required)>'
/opt/fix/LGDIS/config/environment.rb:14:in `<top (required)>'
Tasks: TOP => redmine:plugins:migrate => environment
(See full trace by running task with --trace)
o
 select * from issues_addtion_data ;
select * from geographies;

app/controllers/shelters_controller.rb:13:    @shelter_const = Constant::hash_for_table(Shelter.table_name)
app/models/shelter.rb:32:  CONST = Constant::hash_for_table(self.table_name).freeze

redmine_pg_dev=# delete  from schema_migrations where version = '9^Cgdis';
redmine_pg_dev=# select * from issue_geographies;
 id | issue_id | datum | location | point | line | polygon | remarks
----+----------+-------+----------+-------+------+---------+---------
(0 行)

redmine_pg_dev=# select * from issues_addtion_data ;
 id | issue_id | geodetic_datum |   latitude    |  longitude   |                 address                  |       remarks
----+----------+----------------+---------------+--------------+------------------------------------------+---------------------
  1 |       14 | 日本測地系     |   38.82815400 | 141.60417200 | 宮城県気仙沼市波路上岩井崎１             | test for issue#14
  3 |       14 | 日本測地系     | -179.00000000 | -89.00000000 | 南極近辺ロンドンの真裏                   | test for issue#14-3
  2 |       14 | 日本測地系     | -141.17184600 | -38.39582800 | 宮城県気仙沼市波路上岩井崎１の地球の裏側 | test for issue#15
(3 行)





配信管理は、queueに配置したところで、処理結果を取得できなくなります。（非同期処理のため）
外部配信は、外部配信処理自身が成功したかどうかを自らログに書くことは可能。
外部配信処理自身が成功したかどうかの判定の中で、
SOAPのような手順の中で成功可否を判断できるものは、外部配信先に届いたかどうかを判定できますが、
SMTPは判定できません。
RSSはファイルを生成できたことの可否を判定するまでです。


表 3.40.4.6 パラメータ一覧（②石巻市メールサーバ：入力/異常）
No 論理名称 物理名称 I/O 備考
1 処理完了ステータス I
※ 石巻市メールサーバへの★配信依頼★のSMTP 処理が異常終了したところまでの検知となる。
※ 石巻市メールサーバの配信が正常終了したかどうかは本システムでは検知しない。


表 3.40.5.6 パラメータ一覧（②SMTP-AUTH：入力/異常）
No 論理名称 物理名称 I/O 備考
1 処理完了ステータス I
※ 外部配信先への★配信依頼★のSMTP-AUTH 処理が異常終了したところまでの検知となる。
※ 外部配信先への配信が正常終了したかどうかは本システムでは検知しない。




表 3.40.6.6 パラメータ一覧（②Twitter：入力/異常）
No 論理名称 物理名称 I/O 備考
1 異常戻り値 I
※ Twitter 連携処理★（API 呼び出し）が異常終了★したところまでの検知となる。
※ 外部配信処理が異常終了した場合のエラー通知は、★★★メール配信★★★により行う。


表 3.40.7.5 パラメータ一覧（②Facebook：入力/異常）
No 論理名称 物理名称 I/O 備考
2 異常戻り値 I
※ Facebook ★連携処理（API 呼び出し）が異常終了★したところまでの検知となる。
※ 外部配信処理が異常終了した場合のエラー通知は、★★★メール配信★★★により行う。
Facebook に対するパラメータ一覧（上記I/O関連図②）を、表4.3.6.7.5.2.に示します。
表4.3.6.7.5.2.ファイル一覧（②Facebook）
No	論理名称	物理名称	I/O	備考
1	本文	message	O	
2	処理完了ステータス		I	


ATOM災害情報ポータルページ/デジタルサイネージに対するファイル一覧（上記I/O関連図②）を、表4.3.6.3.4.2に示します。
表4.3.6.3.4.2ファイル一覧（②設定ファイル）
No	論理名称	物理名称	I/O	備考
1	配信内容ATOM情報		I	2	処理完了ステータス		I	


-----------------


表 3.40.3.6 パラメータ一覧（②公共情報コモンズ：入力/異常）
No 論理名称 物理名称 I/O 備考
1 処理完了ステータス I
※ 非同期処理のため、配信管理機能ではエラー検知を行わない。
※ 外部配信処理が異常終了した場合のエラー通知は、
★外部配信機能/公共情報コモンズ SOAP I/Fからメール配信★により行う。

-postit----------------------
ﾒｰﾙｻｰﾊﾞｰ@ubuntu
三菱重工(株)
xin7-pro-productkey:	3K9P7-R7GCK-D9MYH-QFMX4-WT8P7
.blank? 	.nil? 	.empty?	.present?	self.****	RDoc 記法
X.509 Cartificate Token ,SSL(:443) 


/usr/local/lib/ruby/gems/1.9.1/gems/soap4r-ruby1.9-2.0.5/sample/showcase/wsdl/PayPalSvc/
gem install soap4r-ruby1.9
---------------------------------------------------------


#       log/LGDIS/
#       plugins/lgdis/config/settings.yml
#       plugins/lgdis/db/migrate/008_create_evacuations.rb
#       plugins/lgdis/lib/lgdis/ext_out/datum_conv.rb
#       plugins/lgdis/lib/lgdis/ext_out/georss1_0.tmpl

 mount Resque::Server, at: "/resque"

  2 MethodError (undefined method `xml_control_status' for #<Issue:0xb6ad5e10>):
  3 plugins/lgdis/app/models/shelter.rb:301:in `create_applic_issue'
  4 plugins/lgdis/app/controllers/shelters_controller.rb:95:in `block in ticket'
  5 plugins/lgdis/app/controllers/shelters_controller.rb:93:in `ticket'
  6 plugins/lgdis/app/controllers/shelters_controller.rb:45:in `index'




:6:  if issue.xml_control_status
/opt/LGDIS/plugins/lgdis/app/views/issues/_view_issues_show_description_bottom.html.erb:7:    rows.left l(:field_xml_control_status), h(issue.xml_control_status), :class => 'xml_control_status'


/opt/LGDIS/plugins/lgdis/lib/lgdis/issue_patch.rb:14:        validates :xml_control_status, :length => {:maximum => 12}
/opt/LGDIS/plugins/lgdis/lib/lgdis/issue_patch.rb:29:        safe_attributes 'xml_control_status',
/opt/LGDIS/plugins/lgdis/lib/lgdis/issue_patch.rb:31:          'xml_control_status',







localhost:/opt/fix/LGDIS# grep -nirE "disaster_code *=" /opt/LGDIS/plugins/* --include=*  --exclude=*.sw* --exclude=*~
/opt/LGDIS/plugins/lgdis/app/controllers/shelters_controller.rb:142:    @shelter.disaster_code = @project.identifier
/opt/LGDIS/plugins/lgdis/app/controllers/evacuation_advisories_controller.rb:146:    @evacuation_advisory.disaster_code = @project.identifier
o



1]+  停止                  rails s --debugger
root@localhost:/opt/fix/LGDIS# grep -nirE "import_initial_data" /opt/fix/LGDIS/plugins/* --include=*  --exclude=*.sw* --exclude=*~
/opt/fix/LGDIS/plugins/lgdis/app/models/evacuation_advisory.rb:423:  def self.import_initial_data(project)
/opt/fix/LGDIS/plugins/lgdis/app/models/shelter.rb:428:  def self.import_initial_data(project)

/opt/fix/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:16:        after_create :import_initial_data
/opt/fix/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:83:      def import_initial_data
/opt/fix/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:84:        Shelter.import_initial_data(self) #避難所

root@localhost:/opt/fix/LGDIS# grep -nirE "import_initial_data" /opt/LGDIS/plugins/* --include=*  --exclude=*.sw* --exclude=*~
/opt/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:16:        after_create :import_initial_data
/opt/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:83:      def import_initial_data
/opt/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:84:        Shelter.import_initial_data(self) #避難所
	
チケット一覧　Issueの表示


plugins/lgdis/app/views/issues/_view_issues_show_description_bottom.html.erb
	ActionView::Template::Error (undefined method `check_permissions' for #<#<Class:0xcf1b2b8>:0xd07db74>):
	ActionView::Template::Error (undefined method `print_xml_field' for #<#<Class:0xcf1b2b8>:0xb722033c>):

	
Rdoc
Rspec
GIT pull -->renraku ->commit
返値

--------------------------------------------------------------------------------------------------------
Memchachd
	#install

		wget -q -O - http://www.atomicorp.com/installers/atomic |sh
		yum install memcached
		
		vi /etc/sysconfig/memcached
			PORT=”11211″
		config.cache_classes     = false
		#optional 	config.cache_store = :dalli_store

		service memcached start
	#test
		 rails c --debugger
		Rails.cache.write("foo", "フー", :expires_in => 10)
		foo")
		Rails.cache.write("key", [1,2,3], expires_in: 1.hour)  # １時間で消える。
		# もちろんオブジェクトもキャッシュ可能
		Rails.cache.write('hash', {'hoge' => 'piyo', 'foo' => 'buz'})
		Rails.cache.read('hash') # => {'hoge' => 'piyo', 'foo' => 'buz'}

		Rails.cache.clear # すべてのキャッシュをクリア

	#CSV-locading

		#Rails.root/lib/batches に以下のファイルを配置
		　area.csv
		　address.csv
		　shelter.csv
		　memcache_store.rb

		#バッチを実行
		 rails runner Batches::MemcacheStore.execute
		
		#値の取得テスト
			Rails.cache.read("area")["6"]["name"]

		# ==== options
		 実行環境の指定 :: -e production
		以下の形式でstoreする

			file => {
				code => { 
					項目1 => value,
					項目2 => value,
					項目3 => value,
					...
				}
			}

		住所のオートコンプリート用に以下の値もstoreする
		　state  : 都道府県
		　city   : 市区町村
		　street : 町丁目

		 state => {
			 code => name,
			 code => name,
			 code => name,
			 ...
		 }
	rails runner Batches::MemcacheStore.execute

#Rdoc
	# 処理内容
	# ==== Args

	# _objectname_ :: description
	# ==== Return
	# _objectname_ :: description
	# ==== Raise

	# 処理内容
	# 
	# ==== Args
	# __ :: 
	# ==== Return
	# __ ::
	# ==== Raise

	■rdocの生成
	rdoc は、手元でドキュメントを生成してみて、ちゃんと出力されることを確認する。
	rdoc は、以下のコマンドで生成できる。
	$ rdoc -c utf8
	ドキュメントはカレントディレクトリの下の doc ディレクトリにHTML形式で生成される。また、オプションに -d をつけると、クラス図もつく（あまりわかりやすい図ではないが）
	rails の場合は、以下のようにして生成する。
	$ rake doc:app


#HAML
  -debugger
  irbでの検証は以下括弧内にHAML式を代入
    Haml::Engine.new('  ').render

  Haml Comments: -#
  DRIW
  - --> run ruby code
  = insert ruby code
  `code`

  : --> filter
  & --><input>
  | 


堤さん
Java標準のJKSキーストアをserverconfig.xmlのkeystore要素でフルパスしてやる
SharkWire指南


class User < ActiveRecord::Base
  # Userインスタンスに hoge1, hoge2 という名前で保持期間１時間のキャッシュを使用する場合
  cache_attr_accesor :hoge1, :hoge2, :span => 1.hour
end
#こんな感じで使用できます。放っておけば:spanで指定した時間経過後にキャッシュはクリアされます。
u = User.find(300)
u.hoge1 = 'value1'
u.hoge2 = 'value2'

# 実際には下記と等価になります
Cache.read('User_hoge1', 300)
Cache.write('User_hoge1', 300, 'value1', 1.hour)
#また、モデルのインスタンスだけでなくクラスの属性としても使用することができます。
class User < ActiveRecord::Base
 class << self
   cache_attr_accessor :hoge1
  end
end
User.hoge1 = 'value1'  #デフォルトでは２週間保持されます







################rake db: http://namakesugi.blog42.fc2.com/blog-entry-157.html

20130601182530_change_contents_rollout_store_type_to_string.rb
X
  注意：ファイル名とクラス名が完全一致しないと失敗します。
  class ChangeContentsRolloutStoreTypeToString < ActiveRecord::Migration
    def change
      change_column :contents, :rollout_store_type, :text
    end
  end


rake db:migrate:down VERSION=[バージョン番号]
  rake db:migrate:down VERSION=20130601182535

  特定のmigrationをrevertするmigration
    require_relative '20130414_migratino_file_name_without_extention_rb'

    class RevertProductsChangePrimaryKey < ActiveRecord::Migration
      def change
        revert ChangeProductsPrimaryKey
      end
    end



  Joinテーブルの作成をするmigrationファイルの作成
    書式: `CreateJoinTableXXXYYY XXX YYY` XXX, YYYには結合するモデル名を指定する。
    以下の場合はproductとcategoryのN:Nを結合するテーブルcategories_productsが生成される。
    rails g migration create_join_table_product_category product category

  フィールドの変更
    def change
      reversible do |dir|
        change_table :products do |t|
          dir.up { t.change :foo, :integer }
          dir.down { t.change :foo, :string, limit: 32 }
        end
      end
    end

  rails g migration RemoveFooFromProducts foo:string
    複数のフィールドの追加/削除のmigrationファイルの作成
    rails g migration add_foo_and_bar_to_products foo:integer bar:integer




#troubleshooting
  irm/mv Gemfile.lock
  rm db/schema.rb
  rake db:reset

#Device

Devise.secret_key was not set. Please add the following to your Devise initializer:

  config.secret_key = '7d221d00af9414240910d5dfa712d48d45dc6ca2b47e328ffa75787207ecaa9f5f827da630d3d9961b4a5b7f92d900e33f7f916ddee943fd8fdb9d59964aef9d'

　　　

plugins/lgdis/db/migrate/008_create_evacuation_advisories.rb
+    add_index(:evacuation_advisories, :area, :unique => true, :where => 'deleted_at is NULL')
  	56 	+    add_index(:evacuation_advisories, :identifier, :unique => true, :where => 'deleted_at is NULL')


	
#1-liner
	#grep結果ファイル中文字列をかきかえ
	grep -lnirE "issueorlift" .  --include=**  --exclude=*.sw* --exclude=*~ --exclude=*.log --exclude=*spec* |xargs  ruby -p -e  '$_.gsub!(/issueorlift/, "issueorlift")'  -i
		rake db:seed

  #ps結果をgrepしてkill
   kill -9 `ps -ef |grep -nirE "(rub|rail|vim)"| ruby -ane 'p $F[1].to_i'`
  


	irb(main):020:0> puts Issue.first.methods.grep(/addition/i)

	Issue.first.issues_additional_data[0].remarks
		
	insert into issues_addtion_data values(2, 15, '日本測地系', -141.17184600, -38.39582800, '宮城県気仙沼市波路	上岩井崎１の地球の裏側', 'test for issue#15')
	insert into issues_addtion_data values(1, 14, '日本測地系',, '１',             'test for issue#14');
	insert into issues_addtion_data values(3, 14, '日本測地系', -179,          -89,          '南極近辺ロンドンの真裏',                   'test for issue#14-3');
	SELECT "issues_addtion_data".* FROM "issues_addtion_data";
	 update  issues_addtion_data set issue_id = 14 where id=2;

	insert into issue_geographies values(2, 15, '日本測地系','宮城県気仙沼市の地球の裏側', '-38.39582800-141.17184600',  'test for issue#15')
	insert into issue_geographies values(1, 14, '日本測地系','宮城県気仙沼市波路上岩井崎１',             '+38.82815400+141.60417200',  'test for issue#14');
 insert into issue_geographies values(3, 14, '日本測地系','南極近辺',                   '(-179,-89)', NULL,NULL, 'test for issue#14-3');

 insert into issue_geographies values(4, 14, '日本測地系','南極近辺point', '(-179,-89)', NULL,NULL, 'test for issue#14-3','2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00');
 insert into issue_geographies values(6, 14, '日本測地系','南極近辺line# ',NULL,'((-179,-89),(+141, +38))',NULL, 'test for issue#14-3','2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00');
 insert into issue_geographies values(5, 14, '日本測地系','南極近辺polygon',NULL,NULL,'((-179,-89),(+141, +38),(+142,+38),(-179,-89))', 'test for issue#14-3', '2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00');

新
INSERT INTO evacuation_advisories (advisory_type, alert, alerting_area, alias, area, area_kana, category, cause, changed_at, created_at, deleted_at, district, emergency_hq_needed_city, emergency_hq_needed_prefecture, evacuate_from, evacuate_to, evacuation_order, evacuation_steps_by_authorities, full_name, head_count, headline, households, identifier, issueorlift, issued_at, lifted_at, message, remarks, siren_area, sort_criteria, staff_no, updated_at) VALUES ('2', '警報内容03', '範囲 03', '別名称 03', '地区名称03', 'かないち','09', '原因03',NULL, '2010-11-30T14:59:00+09:00', NULL, '2','市町村 03', '都道府県 03', '要避難地域 03', '避難先03', '指示内容 03', '講ずべき措置03', '発令権限者03', 2700, 'ヘッドライン 03', 1000, '04202E00000000000029', '1', '2010-11-30T14:59:00+09:00', NULL, '情報文 03','備考 03', 'サイレン03', '2', '99999', '2010-11-30T14:59:00+09:00') ;

旧
INSERT INTO evacuation_advisories (advisory_type, alert, alerting_area, alias, area, area_kana, category, cause, changed_at, created_at, deleted_at, disaster_code, district, emergency_hq_needed_city, emergency_hq_needed_prefecture, evacuate_from, evacuate_to, evacuation_order, evacuation_steps_by_authorities, full_name, head_count, headline, households, identifier, issueorlift, issued_at, lifted_at, message, project_id, remarks, siren_area, sort_criteria, staff_no, updated_at) VALUES ('2', '警報内容03', '範囲 03', '別名称 03', '地区名称03', 'かないち','09', '原因03',NULL, '2010-11-30T14:59:00+09:00', NULL, 'lgdrm','2','市町村 03', '都道府県 03', '要避難地域 03', '避難先03', '指示内容 03', '講ずべき措置03', '発令権限者03', 2700, 'ヘッドライン 03', 1000, '04202E00000000000029', '1', '2010-11-30T14:59:00+09:00', NULL, '情報文 03', 3, '備考 03', 'サイレン03', '2', '99999', '2010-11-30T14:59:00+09:00') ;

 insert into edition_managements values (1,5,1,105,1,1, 'a2b33758-31a3-4a41-800e-4e9cc82147b1' , '2010-11-30T14:59:00+09:00', '2010-11-30T14:59:00+09:00');

	alter table issues alter COLUMN xml_head_title TYPE varchar(100);
	alter table issues add  mail_subject varchar(15)
	alter table issues add closed_at timestamp without time zone;
	alter table issues add  mail_subject TYPE varchar(15);
	alter table issues add summary varchar(4000);
	alter table issues add type_update varchar(255);
	alter table issues add published_at timestamp without time zone;
	alter table issues add opened_at timestamp without time zone;
	alter table issues add closed_at timestamp without time zone;
	alter table issues add delivered_area varchar(255);
	alter table evacuation_advisories alter COLUMN project_id DROP NOT NULL;
	alter table evacuation_advisories alter COLUMN disaster_code  DROP NOT NULL;
	alter table evacuation_advisories add issueorlift varchar(100);
  





----------------------------------------------------------------

INSERT into evacuation_advisories (
project_id,
disaster_code, sort_criteria, issueorlift, area,
issued_at, changed_at, lifted_at,
households, head_count,
identifier, category, cause, advisory_type,
staff_no, full_name, alias,
headline, message,
emergency_hq_needed_prefecture, emergency_hq_needed_city,
alert, alerting_area, siren_area,
evacuation_order, evacuate_from, evacuate_to, evacuation_steps_by_authorities,
remarks, deleted_at,created_at,updated_at
)values (
5,
'lgdrm-APPLIC参照','避難指示','発令', 'area-100-石巻市某地区',
'2010-11-30T14:59:00+09:00',NULL ,NULL ,
3, 7,
'県2市3管理番号5','WN','cause-4000-CAPでは｢category/event｣に相当。減災情報共有スキーマでは避難勧告発令情報の「発令要因」に相当-type-2-APPLIC準拠','TS',
'staff_no01', 'full_name-100-氏名間全角スペース1文字', 'alias-100-氏名間全角スペース1文字',
'headline-100-', 'message-4000-',
'emergency_hq_needed_prefecture-100-宮城県', 'emergency_hq_needed_city-100-石巻市',
'alert-4000-警報文', 'alerting_area-4000-全国もしくは特定地域名', 'siren_area-4000-全国もしくは特定地域名､或いはサイレン不使用',
'evacuation_order-4000-避難措置の指示内容', 'evacuate_from-4000-要避難地域', 'evacuate_to-4000-避難先地域', 'evacuation_steps_by_authorities-4000-緊急通>報発令_攻撃の予防鎮圧_安全経路場所',
'remarks-4000-備考', NULL, '2010-11-30T14:59:00+09:00', '2010-11-30T14:59:00+09:00'
)
;

----------------------------------------------------------------


指示等なし、避難準備、避難勧告、避難指示、警戒区域


#diff
	C:\VMstatic\0000000-215\trunk\document\技術検討\AtomFeed
		・TOPプロジェクトにて、Feed用のカスタムクエリを作成し、購読させる
	i	・カスタムクエリの範疇にて、抽出条件のカスタマイズが可能



#redmine-plugin
	rails g redmine_plugin_model lgdis issues_addtion_datum id:integer:yes issue_id:integer

      create  plugins/lgdis/app/models/issues_addtion_datum.rb
      create  plugins/lgdis/test/unit/issues_addtion_datum_test.rb
      create  plugins/lgdis/db/migrate/005_create_issues_addtion_data.rb



■SOAP
	rubyでsoapサーバを作る - hippos-lab::net
	    WSDLの作成
	    wsdl2rubyでスケルトンを生成
	    中身を実装

	SOAPでは次のような事柄が規定されています。
	● エンベロープ構成要素
	├ メッセージ構成
	└ 処理仕様
	● エンコーディング規則
	└ データのシリアライズメカニズム
	● RPC表現規則
	└ 要求と応答の規則


	#server
	 wsdl2ruby.rb --wsdl a.wsdl --type server --force
	
	#client
	 wsdl2ruby.rb --wsdl a.wsdl --type client --force


	実行
	ターミナル1
	 $ ruby -I. CalcServer.rb

	ターミナル2
	 $ ruby -I. CalcServerClient.rb



	・Rubyで実行

	1.root権限で以下のコマンドを実行（soap4r-ruby1.9ライブラリのインストール）
	gem install soap4r-ruby1.9

	・Railsで実行

	2.Gemfileに以下を追加
	gem "soap4r-ruby1.9"

	3.下記コマンドを実行
	bundle install

	参考URL
	http://route477.net/w/?RubySOAPt（Route 477 - RubyでSOAP）




	コモンズノードシステム上の SOAP 発信設定 は、
	http://schemas.xmlsoap.org/soap/http 
		publish(msg:any)
		返値
			getCode():int
			getResult():any




	公共情報コモンズ　マスタ管理システムの認証IDとパスワードを
	開発目的用につかいたいので､テスト用のIDとパスワードで十分です､
	https://www.publiccommons.ne.jp/SAMLService/SSO?returnURL=http%3A%2F%2FOS-PBS01%2FAssertionConsumer%2FSAML%2FArtifact&target=JJnDgAFi1PwDYjOs
		nttcom0@ishinomaki-city
		masasato@ishinomaki-city	

		

	
■SOAPの問題点
	getCode
	X509
	



RESQUE
	 service redis restart
	rake resque:work                          # Start a Resque worker
	rake resque:workers                       # Start multiple Resque workers.	
	rake resque:work QUEUE='*'
	rails s


mail
	BCC=ON

	#A社からは外部不特定通信先へのSSH通信(:443)とSMTP通信(:25)はみとめられていない｡したがってSMTP機能をつかったﾒｰﾙ配信機能はローカルホスト環境で行った｡

#ポート開放8
	#停止
	/etc/init.d/iptables stop
	#無効
	chkconfig iptables off
	#状況確認
	/etc/init.d/iptables status
	vi /etc/sysconfig/^Ctables
	vi /etc/postfix/master.cf
    

    #postfix

        #インストール
        yum install postfix


     #設定のながれ
        vi /etc/postfix/main.cf
        hostname
        mkdir /root/Maildir; mkdir /home/apl/Maildir
        chmod 700  /root/Maildir; chmod 700  /home/apl/Maildir
        chown root:root  /root/Maildir
        chown apl:apl  /home/apl/Maildir
        /etc/rc.d/init.d/postfix restart

     #動作確認
	#ポート開放確認
        telnet localhost 25
	 quit

	#サーバーローカルshellレベルでの直接送信
        echo test|sendmail root


	#Mailbox確認(Mailbox型式は暫定的にMailDir型式)
        date;ls -alt /[$USERHOME]/Maildir/new
	cat /root/Maildir/new/*
        	例)	date;ls -alt /root/Maildir/new
					date;ls -alt /root/Maildir/new; ls -alt  /home/apl/Maildir/new/
					cat /home/apl/Maildir/new/13617*

	#Redmine admin>adminユーザー情報変更
	http://192.168.18.130:3000/users/1
		メールアドレス	root@localhost.localdomain　に設定
		password再設定
		time-zone	GMT+9 Tokyo 再設定

	#Redmine admin>設定>管理>メール通知画面　右下最下部のテストメール送信リンクでの確認
	http://192.168.18.130:3000/settings/edit?tab=notifications
		デフォルトの送信者名redmine@example.netを適宜変更して保存してから送信リンクをクリックしてテストする｡保存しないでクリックするとメールヘッダーの送信者名は変わらない｡
i #
  #Rails環境設定
#設定編集 vi /opt/fix/LGDIS/config/environments/development.rb

	#規定値:config.action_mailer.raise_delivery_errors = false　を以下のごとく変更;
	config.action_mailer.perform_deliveries = true
	config.action_mailer.raise_delivery_errors = true
	Rails.application.config.action_mailer.perform_deliveries = true
	Rails.application.config.action_mailer.raise_delivery_errors = true

#IRB/ConsoleモードでRailsを起動し､以下のテストコマンド発行
<SMTP-Plain>
Lgdis::ExtOut::Mailer.setup( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "root@localhost.localdomain").deliver
Lgdis::ExtOut::SMTP_JichiShokuin.send_message({"mailing_list_name" =>"root@localhost.localdomain", "title" => "title漢字", "message" =>"sss漢字-------------"}, false)
Lgdis::ExtOut::Mailer.setup( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "apl@localhost.localdomain").deliver
Lgdis::ExtOut::Mailer.setup_auth( "apl@localhost.localdomain","SMTP-AUTH引数0", "########################################").deliver

/usr/local/lib/ruby/gems/1.9.1/gems/mail-2.4.4/lib/mail/message.rb
   229                                  debugger
   230          #debugcode  ActionMailer::Base.smtp_settings  ActionMailer::Base.raise_delivery_errors   ActionMailer::Base.perform_deliveries
=> 231          delivery_handler.deliver_mail(self) { do_delivery }

 "utf-8", "some_body@di-system.co.jp", "some_body@di-system.co.jp", "AlphaNumerics")


<SMTP-AUTH>
★Rootパスワードは社外秘
Lgdis::ExtOut::Mailer.setup_auth( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "root@localhost.localdomain", "root", "1qazxsw2").deliver
Lgdis::ExtOut::Mailer.setup_auth( "root@localhost.localdomain","SMTP-AUTH引数0", "SMTP-AUTH引数1", "utf-8", "root@localhost.localdomain", "apl", "AlphaNumerics").deliver
★MTAサーバー(postfixなど)にSMTP-AUTHの設定がされていない状況で､AUTHのコマンドを叩くと当然失敗する｡
これを複数回くりかえすと､不正接続とみなされて､正しいSMTP-PLAINでのコマンドも失敗する｡
→設定に工夫をくわえると解消される可能性あり｡

 Lgdis::ExtOut::SMTP_JichiShokuin.send_message({"mailing_list_name" =>"some_body@di-system.co.jp", "title" => "title漢字", "message" =>"sss漢字-------------"}, false)
[224, 233] in /usr/local/lib/ruby/gems/1.9.1/gems/mail-2.4.4/lib/mail/message.rb
   224      #  mail = Mail.read('file.eml')
   225      #  mail.deliver
   226      def deliver
   227        inform_interceptors
   228        if delivery_handler
=> 229          delivery_handler.deliver_mail(self) { do_delivery }
(rdb:1) delivery_handler.deliver_mail(self) { do_delivery }
SMTP-Plain postfix bug
Net::SMTPFatalError Exception: 554 5.7.1 <some_body@di-system.co.jp>: Relay access denied
Gmail bug
Encoding::CompatibilityError Exception: incompatible encoding regexp match (US-ASCII regexp with ISO-2022-JP string)
mail.body = mail.body.raw_source.encode('ISO-2022-JP', :invalid => :replace, :undef => :replace).encode('UTF-8')
mail.body = mail.body.raw_source.encode('iso-2022-jp', :invalid => :replace, :undef => :replace).encode('utf-8') #変換エラー対策




	#potfixログ確認		
	tail /var/log/maillog


	
#SMTP-AUTH設定

	#curys-sasl
	cyrus-saslは非常に多機能で、
	一般的な テキスト 認証の他に暗号化認証も扱うことができますし、 
	構築中のLinuxサーバー の ユーザーアカウント 名とパスワードをそのまま認証に使うことも、
	別の データベース を使って認証を行うこともできるようになっています。 


	#install
		cyrus-sasl-xxxxxxx
		cyrus-sasl-plain


	vi /usr/lib/sasl2/smtpd.conf 
		pwcheck_method: saslauthd


	service saslauthd start
		saslauthdを起動中:                                         [  OK  ]

	vim /etc/postfix/main.cf  
		myorigin = $myhostname
		 "SMTP Auth"の利用を許可する
		smtpd_sasl_auth_enable = yes

		"anonymous"接続を拒否する。
		smtpd_sasl_security_options = noanonymous

		"OutlookExpress対応
		broken_sasl_auth_clients = yes

		smtpd_sasl_local_domain = $mydomain
		smtpd_recipient_restrictions =
		    permit_mynetworks,
		    permit_sasl_authenticated,
		    reject_unauth_destination,
		    permit_auth_destination,
		    reject	

		    permit_mynetworksは、サーバー内のネットワーク、つまり内部からの利用を許可するものです。
		    permit_sasl_authenticated は、sasl認証できたものだけ受け入れる。
		    reject_unauth_destination で、認証できなかったものは、拒否する。
		    permit_auth_destination で、認証できたものは、受け入れる。
		    reject で、その他は、拒否する。

	    etc/init.d/postfix restart

	#curys-sasl password config
		/useradd some_body -s /sbin/nologin
		/usr/sbin/saslpasswd -c some_body
		/usr/sbin/sasldblistusers
		
		chgrp postfix /etc/sasldb
		chmod 640 /etc/sasldb

	#Mailer-config
		→「アカウント設定」→「サーバー」→「このサーバーは認証が必要」または「送信サーバーは認証が必要」にチェックを入れる。 
		or
		→「送信(SMTP)サーバの設定」から「セキュリティと認証」の「ユーザ名とパスワードを使用する」にチェックを入れる
		
	    etc/init.d/postfix restart
	    または
	　　 service postfix restart
		#/etc/init.d/saslauthdも起動していれば成功　
		
	#参考:確認コマンド
		postfix　-n
		postfix check
		

SAMBA
	vi /etc/samba/smb.conf
	最終行に以下の記述を追加
	[opt]
	path = /home/apl
	read only = No	

	#再起動する
	/etc/rc.d/init.d/smb restart

	#スタート＞ファイル名を指定して実行＞(VMのIP)でつながります
	#ネットワークドライブを割り当てると便利



================== ====================================
vim -S ~/session-130203 +VE +MRU
==================================================================


# Rubyコーディングスタイル
#
# then 省略
# .blank? .present?をつかう｡　.nil? .empty?はつかわない｡
# ※find_by_xxxという書き方はNG（元々あるメソッドを上書きしてし まうため）
#   find(:all, :conditions => ["name LIKE ?%", "A"], :order => "name ASC")
# ビジネスロジックはモデルに記入
# モデルは共通モデルクラスを継承
#  require_dependency 'model_helper'
#   class Foo < CustomModel extend ModelHelper
#
#文法チェックと警告
# ruby -wc <ファイル名>
	ruby -wTW2 <ファイル名>
#pwdのRDoc生成は　 rdoc -c utf8
#Rails全体の rake doc:app
#
# Stackはスタックを実装するクラスである。
class Stack
  
#RDoc コメントの付け方

■rdocの生成
rdoc は、手元でドキュメントを生成してみて、ちゃんと出力されることを確認する。
rdoc は、以下のコマンドで生成できる。
$ rdoc -c utf8
ドキュメントはカレントディレクトリの下の doc ディレクトリにHTML形式で生成される。また、オプションに -d をつけると、クラス図もつく（あまりわかりやすい図ではないが）
rails の場合は、以下のようにして生成する。
$ rake doc:app
カレントディレクトリの下の doc/app に生成される。
原則として、実装したクラス、モジュール、メソッド、定数には RDoc 形式のコメントを付ける。

  # スタック・アンダーフロー
  class UnderflowError < RuntimeError;  end

  # スタック・オーバーフロー
  class OverflowError < RuntimeError;  end

  # デフォルトのスタック容量
  DEFAULT_CAPACITY = 10
  
  # スタックの大きさ
  attr_reader :size
  # スタックの容量
  attr_reader :capacity

  # スタックへオブジェクトをプッシュする。
  # ==== Args
  # _obj_ :: プッシュするオブジェクト
  # ==== Raise
  # OverflowError :: スタック内のオブジェクトが容量を超える場合に発生。
  def push obj
    # TODO Stack#push の実装
  end

  # スタックからオブジェクトをポップする。
  # ==== Return
  # ポップされたオブジェクト。
  # ==== Raise
  # UnderflowError :: スタックが空である場合に発生。
  def pop
    # TODO Stack#pop の実装
  end
end


?	クラスコメント(ファイル先頭部分)のルール
o	require、namespace定義は、クラスコメントより上に記述する。
(クラスコメントより下に記述すると、ファイルのコメント部分に表示されるようになるため)
o	必ずクラス名を含める。
(この部分のRDocの出力にクラスのドキュメントへのリンクが自動で含まれないため)

?	メソッドのコメントルール
o	引数は　# ==== Args以下に # _"変数名"_ :: "変数の説明"形式で記述する。
o	戻り値が有る場合は # === Return以下に必ず記述する。
o	特筆すべき例外は # ==== Raise以下に # "例外クラス名" :: "例外の説明"形式で必ず記述する。


~



================================================================================	
git
	linux GUI

	commit=pg uploading
	clone = pg downloading with history

	push = history uploading
		default repositry name = 'origin'
	pull = histoy downloading
		default repositry name = 'origin'
		エラーには
			git commit -a 	<--'automatic'
		か　
			git reset --hard　
		で対処

	merge(ウィthnon-fast-forwarding option)
	統合ブランチ（本流）と
	トピックブランチ（支流）
		default repositry name = 'head'
		checkout [of some branch]= work tree place of head
			stash	=	まだコミットしていない変更点が他のブランチのヘッドに移ることをふせぐ変更点隔離措置


		
		head~n = -n generation
		head^n = -n parantes
		
	mergeとrebaseは共に履歴を統合しますが、特徴が異なります。
		merge
		変更内容の履歴はそのまま残るが、履歴が複雑になる。 
		rebase
		履歴は単純になるが、元のコミットから変更内容が変更される。
		そのため、元のコミットを動かない状態にしてしまうことがある。 
		mergeとrebaseは、チームの運用方針に応じて使い分けます。
		例えば、履歴を一本化するように運用をするのであれば

		トピックブランチに統合ブランチの最新のコードを取り込む場合はrebaseを使う 
		統合ブランチにトピックブランチを取り込む場合は、まずrebaseしてからmerge 
		

		Gitでのブランチの運用モデルとして、A successful Git branching modelを紹介します。
		日本語訳:
		http://keijinsonyaban.blogspot.jp/2010/10/successful-git-branching-model.html

	#configurations.yml やroutes.rbなど開発専用ファイルを設定

	rails s --debugger
		


#Rspec
	vi /opt/fix/LGDIS/config/database.yml
		test:
			adapter: postgresql
			database: LGDIS_test
			host: 127.0.0.1
			username: dev
			password: devdev
			encoding: utf8
	vi ~/.rspecrc
		--debug
 
 export RAILS_ENV=.
	RAILS_ENV=test rake db:migrate:reset
	RAILS_ENV=test rake redmine:plugins:migrate
	RAILS_ENV=test rake redmine:load_default_data
	RAILS_ENV=test rake db:seed
	RAILS_ENV=test rspec /opt/fix/LGDIS/plugins/lgdis/spec/controllers/shelters_controller_spec.rb
	
★リダイレクト実行時にdebuggerはオフにすること





	rspec /opt/fix/LGDIS/plugins/lgdis/spec/controllers/evacuation_advisories_controller_spec.rb|less
bsbs

vi /opt/fix/LGDIS/spec/factories/evacuation_advisory_factory.rb

	describe/contect   ..... do
		it 'message' do
			*** should_XXXX
			***  == +++
	
	


apache+LDAP認証
Google map api
Rhodes


----
Linux GIT GUI


#認証とかの情報設定
ActionMailer::Base.smtp_settings = 
{ :address => 'smtp.hoge.co.jp',
	:port => 25,
        :domain => 'hoge.co.jp',
        :user_name => 'sukottotaigaaa',
        :password => 'hogemogepyapypay',
        :authentication => :login
}


#rail3 routing
RedmineApp::Application.routes.url_helpers.
i RedmineApp::Application.routes.url_for(
rb(main):079:0>  Redmine::Plugin.registered_plugins[:lgdis].directory
=> "/opt/fix/LGDIS/plugins/lgdis"
irb(main):080:0> Redmine::Plugin.registered_plugins[:lgdis].public_directory
=> "/opt/fix/LGDIS/public/plugin_assets/lgdis"
irb(main):081:0>  Redmine::Plugin.registered_plugins[:lgdis].url
=> nil
irb(main):082:0>  Redmine::Plugin.registered_plugins[:lgdis].methods.sort
=> [:!, :!=, :!~, :<=>, :==, :===, :=~, :__id__, :__is_a__, :__metaclass__, :__send__, :_method, :`, :activity_provider, :acts_like?, :add_menu_item, :as_json, :assets_directory, :author, :author_url, :binding_n, :blank?, :breakpoint, :capture, :class, :class_eval, :clone, :configurable?, :dclone, :debugger, :define_singleton_method, :delete_menu_item, :description, :directory, :directory=, :display, :dup, :duplicable?, :enable_warnings, :enum_for, :eql?, :equal?, :expects, :extend, :freeze, :frozen?, :gem, :hash, :html_safe?, :id, :in?, :initialize_clone, :initialize_dup, :inspect, :instance_eval, :instance_exec, :instance_of?, :instance_values, :instance_variable_defined?, :instance_variable_get, :instance_variable_names, :instance_variable_set, :instance_variables, :is_a?, :kind_of?, :latest_migration, :load, :load_dependency, :menu, :method, :method_exists?, :methods, :migrate, :migration_directory, :migrations, :mirror_assets, :mocha, :mocha_inspect, :name, :nil?, :object_id, :permission, :presence, :present?, :pretty_inspect, :pretty_print, :pretty_print_cycle, :pretty_print_inspect, :pretty_print_instance_variables, :private_methods, :project_module, :protected_methods, :psych_to_yaml, :public_directory, :public_directory=, :public_method, :public_methods, :public_send, :quietly, :require, :require_association, :require_dependency, :require_or_load, :requires_redmine, :requires_redmine_plugin, :reset_mocha, :respond_to?, :respond_to_missing?, :send, :settings, :should, :should_not, :silence, :silence_stderr, :silence_stream, :silence_warnings, :singleton_class, :singleton_methods, :stubba_method, :stubba_object, :stubs, :suppress, :suppress_warnings, :taint, :tainted?, :tap, :to_enum, :to_json, :to_matcher, :to_param, :to_query, :to_s, :to_yaml, :to_yaml_properties, :trust, :try, :unloadable, :unstub, :untaint, :untrust, :untrusted?, :url, :version, :wiki_format_provider, :with_options, :with_warnings]


#irb technique
 helper.render :template => "common/feed", :formats => [:atom], :layout => false,  :content_type => 'application/atom+xml'
helper.request
ActiveRecord::Base.connection.select_values('SELECT * FROM evacuation_advisories')
 ActiveRecord::Base.connection.select_value("select nextval('evacuation_code_seq')")	#<---sequence name
privateメソッドはIRBからは定義行しか見えない｡


#Rails環境変数
Rails.application.config 
@generators=#<Rails::Configuration::Generators:0x9b3e83c 
@aliases={}, 
@options={:rails=>{:orm=>:active_record, :test_framework=>:test_unit, :integration_tool=>:test_unit, :performance_tool=>:test_unit}, :active_record=>{:migration=>true, :timestamps=>true}, :test_unit=>{:fixture=>true, :fixture_replacement=>nil}}, 
@fallbacks={}, 
@templates=[], 
@colorize_logging=true, 
@hidden_namespaces=[]>, 
@encoding="utf-8", 
@allow_concurrency=false, 
@consider_all_requests_local=false, 
@filter_parameters=[:password], 
@helpers_paths=["/opt/fix/LGDIS/app/helpers"], 
@dependency_loading=true, 
@serve_static_assets=true, 
@static_cache_control=nil, 
@force_ssl=false, 
@ssl_options={}, 
@session_store=:cookie_store, 
@session_options={:key=>"_redmine_session", :secret=>"bdd227ec5f0dbfa5f5e774c15050beb83b60c5b0bdef2c18bdf51163a3d7", :coder=>#<Rack::Session::Cookie::Base64::Marshal:0xc2c9154>, :cookie_only=>true}, 
@time_zone="Tokyo", 
@log_level=:debug, 
@middleware=#<ActionDispatch::MiddlewareStack:0xc34220c 
@middlewares=[ActionDispatch::Static, Rack::Lock, #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0xa3f2d20>, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport, OpenIdAuthentication]>, 
@cache_store=[:file_store, "/opt/fix/LGDIS/tmp/cache/"], 
@railties_order=[:all], 
@relative_url_root=nil, 
@reload_classes_only_on_change=true, 
@file_watcher=ActiveSupport::FileUpdateChecker, 
@exceptions_app=nil, 
@assets={:enabled=>false, :paths=>["/usr/local/lib/ruby/gems/1.9.1/gems/jquery-rails-2.2.0/vendor/assets/javascripts"], :precompile=>[#<Proc:0xacddbec
@/usr/local/lib/ruby/gems/1.9.1/gems/railties-3.2.11/lib/rails/application/configuration.rb:48>, /(?:\/|\\|\A)application\.(css|js)$/], :prefix=>"/assets", :version=>"1.0", :debug=>false, :compile=>true, :digest=>false, :manifest=>nil, :cache_store=>[:file_store, "/opt/fix/LGDIS/tmp/cache/assets/"], :js_compressor=>nil, :css_compressor=>nil, :initialize_on_precompile=>true, :logger=>nil}, 
@paths={"app"=>["app"], "app/assets"=>["app/assets"], "app/controllers"=>["app/controllers"], "app/helpers"=>["app/helpers"], "app/models"=>["app/models"], "app/mailers"=>["app/mailers"], "app/views"=>["app/views"], "lib"=>["lib"], "lib/assets"=>["lib/assets"], "lib/tasks"=>["lib/tasks"], "config"=>["config"], "config/environments"=>["config/environments"], "config/initializers"=>["config/initializers"], "config/locales"=>["config/locales"], "config/routes"=>["config/routes.rb"], "db"=>["db"], "db/migrate"=>["db/migrate"], "db/seeds"=>["db/seeds.rb"], "vendor"=>["vendor"], "vendor/assets"=>["vendor/assets"], "vendor/plugins"=>["vendor/plugins"], "config/database"=>["config/database.yml"], "config/environment"=>["config/environment.rb"], "lib/templates"=>["lib/templates"], "log"=>["log/development.log"], "public"=>["public"], "public/javascripts"=>["public/javascripts"], "public/stylesheets"=>["public/stylesheets"], "tmp"=>["tmp"]}, 
@autoload_paths=["/opt/fix/LGDIS/lib"], 
@eager_load_paths=["/opt/fix/LGDIS/app/controllers", "/opt/fix/LGDIS/app/helpers", "/opt/fix/LGDIS/app/models"], 
@autoload_once_paths=[], 
@cache_classes=false, 
@whiny_nils=true, 
@secret_token="804c13d30e4b4d9bdbeb819e2aea4a6d9c



#Redmine環境変数
 Mailer.test_email(User.all[4]).deliver
ActionMailer::Base.smtp_settings

.config
#<Rails::Application::Configuration:0xb0c4e7c 
@root=#<Pathname:/opt/fix/LGDIS>, 
@generators=#<Rails::Configuration::Generators:0x9b3e83c 
@aliases={}, 
@options={:rails=>{:orm=>:active_record, :test_framework=>:test_unit, :integration_tool=>:test_unit, :performance_tool=>:test_unit}, :active_record=>{:migration=>true, :timestamps=>true}, :test_unit=>{:fixture=>true, :fixture_replacement=>nil}}, 
@fallbacks={},  ""
@templates=[], 
@colorize_logging=true, 
@hidden_namespaces=[]>, 
@encoding="utf-8", 
@allow_concurrency=false, 
@consider_all_requests_local=false, 
@filter_parameters=[:password], 
@helpers_paths=["/opt/fix/LGDIS/app/helpers"], 
@dependency_loading=true, 
@serve_static_assets=true, 
@static_cache_control=nil, 
@force_ssl=false, 
@ssl_options={}, 
@session_store=:cookie_store, 
@session_options={:key=>"_redmine_session", :secret=>"bdd227ec5f0dbfa5f5e774c15050beb83b60c5b0bdef2c18bdf51163a3d7", :coder=>#<Rack::Session::Cookie::Base64::Marshal:0xc2c9154>, :cookie_only=>true}, 
@time_zone="Tokyo", 
@log_level=:debug, 
@middleware=#<ActionDispatch::MiddlewareStack:0xc34220c 
@middlewares=[ActionDispatch::Static, Rack::Lock, #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0xa3f2d20>, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport, OpenIdAuthentication]>, 
@cache_store=[:file_store, "/opt/fix/LGDIS/tmp/cache/"], 
@railties_order=[:all], 
@relative_url_root=nil, 
@reload_classes_only_on_change=true, 
@file_watcher=ActiveSupport::FileUpdateChecker, 
@exceptions_app=nil, 
@assets={:enabled=>false, :paths=>["/usr/local/lib/ruby/gems/1.9.1/gems/jquery-rails-2.2.0/vendor/assets/javascripts"], :precompile=>[#<Proc:0xacddbec
@/usr/local/lib/ruby/gems/1.9.1/gems/railties-3.2.11/lib/rails/application/configuration.rb:48>, /(?:\/|\\|\A)application\.(css|js)$/], :prefix=>"/assets", :version=>"1.0", :debug=>false, :compile=>true, :digest=>false, :manifest=>nil, :cache_store=>[:file_store, "/opt/fix/LGDIS/tmp/cache/assets/"], :js_compressor=>nil, :css_compressor=>nil, :initialize_on_precompile=>true, :logger=>nil}, 
@paths={"app"=>["app"], "app/assets"=>["app/assets"], "app/controllers"=>["app/controllers"], "app/helpers"=>["app/helpers"], "app/models"=>["app/models"], "app/mailers"=>["app/mailers"], "app/views"=>["app/views"], "lib"=>["lib"], "lib/assets"=>["lib/assets"], "lib/tasks"=>["lib/tasks"], "config"=>["config"], "config/environments"=>["config/environments"], "config/initializers"=>["config/initializers"], "config/locales"=>["config/locales"], "config/routes"=>["config/routes.rb"], "db"=>["db"], "db/migrate"=>["db/migrate"], "db/seeds"=>["db/seeds.rb"], "vendor"=>["vendor"], "vendor/assets"=>["vendor/assets"], "vendor/plugins"=>["vendor/plugins"], "config/database"=>["config/database.yml"], "config/environment"=>["config/environment.rb"], "lib/templates"=>["lib/templates"], "log"=>["log/development.log"], "public"=>["public"], "public/javascripts"=>["public/javascripts"], "public/stylesheets"=>["public/stylesheets"], "tmp"=>["tmp"]}, 
@autoload_paths=["/opt/fix/LGDIS/lib"], 
@eager_load_paths=["/opt/fix/LGDIS/app/controllers", "/opt/fix/LGDIS/app/helpers", "/opt/fix/LGDIS/app/models"], 
@autoload_once_paths=[], 
@cache_classes=false, 
@whiny_nils=true, 
@secret_token="804c13d30e4b4d9bdbeb819e2aea4a6d9cdd12c0e209bedf08828cbcd32ee5f14d0ba5f9987f2ebc8c6d32fd58685d5991b6475828487fd923a03f74b6d4a013">



----------------------------------------





/opt/LGDIS/app/controllers/projects_controller.rb
 47   # Lists visible projects
 48   def index
 49     respond_to do |format|
 50       format.html {
 51         scope = Project
 52         unless params[:closed]
 53           scope = scope.active
 54         end
 55         @projects = scope.visible.order('lft').all
 56       }
 57       format.api  {
 58         @offset, @limit = api_offset_and_limit
 59         @project_count = Project.visible.count
 60         @projects = Project.visible.all(:offset => @offset, :limit => @limit, :order => 'lft')
 61       }
 62       format.atom {
 63         projects = Project.visible.find(:all, :order => 'created_on DESC',
 64                                               :limit => Setting.feeds_limit.to_i)
 65         render_feed(projects, :title => "#{Setting.app_title}: #{l(:label_project_latest)}")
 66       }
 67     end
 68   end


application_controller.rb|98 col 33| elsif params[:format] == 'atom' && params[:key] && request.get? && accept_rss_auth?
 98       elsif params[:format] == 'atom' && params[:key] && request.get? && accept_rss_auth?
 99         # RSS key authentication does not start a session
100         user = User.find_by_rss_key(params[:key])



 4 application_controller.rb|425 col 54| render :template => "common/feed", :formats => [:atom], :layout => false,
420   def render_feed(items, options={})
421     @items = items || []
422     @items.sort! {|x,y| y.event_datetime <=> x.event_datetime }
423     @items = @items.slice(0, Setting.feeds_limit.to_i)
424     @title = options[:title] || Setting.app_title
425     render :template => "common/feed", :formats => [:atom], :layout => false,
426            :content_type => 'application/atom+xml'
427   end


 10 issues_controller.rb|122 col 14| format.atom { render :template => 'journals/index', :layout => false, :content_type => 'application/atom+xml' }
102   def show
103     @journals = @issue.journals.includes(:user, :details).reorder("#{Journal.table_name}.id ASC").all
104     @journals.each_with_index {|j,i| j.indice = i+1}
105     @journals.reject!(&:private_notes?) unless User.current.allowed_to?(:view_private_notes, @issue.project)
106     @journals.reverse! if User.current.wants_comments_in_reverse_order?
107
108     @changesets = @issue.changesets.visible.all
109     @changesets.reverse! if User.current.wants_comments_in_reverse_order?
110
111     @relations = @issue.relations.select {|r| r.other_issue(@issue) && r.other_issue(@issue).visible? }
112     @allowed_statuses = @issue.new_statuses_allowed_to(User.current)
113     @edit_allowed = User.current.allowed_to?(:edit_issues, @project)
114     @priorities = IssuePriority.active
115     @time_entry = TimeEntry.new(:issue => @issue, :project => @issue.project)
116     respond_to do |format|
122       format.atom { render :template => 'journals/index', :layout => false, :content_type => 'application/atom+xml' }
127     end
128   end

rb(main):076:1> puts IssuesController.respond_to{|f| f.atom(ApplicationController.render_feed(Issue.first, :title => "test")  }
irb(main):077:2> puts IssuesController.respond_to{|f| f.atom(ApplicationController#render_feed(Issue.first, :title => "test")  }





require "cgi"
require "template"
 
class Feeder
    def self.get(tmpl_path, options = {})
        cgi = CGI.new
        mime_type = options[:mime_type] || "application/xml"
        encoding = options[:encoding] || "utf-8"
        language = options[:language] || "ja"
 
        v = Template.get(tmpl_path, {"type" => mime_type, "charset" => encoding})
        v.encoding = encoding
        v.language = language
        v.site_url = "http://" + cgi.server_name
        v.feed_url = v.site_url + cgi.script_name if v.methods.include?("feed_url")
        return v
    end
end


irb(main):152:0> issue.methods.sort.grep(/(author|er_name|title)/i)
=> [:_active_authorizer, :_active_authorizer=, :_active_authorizer?, :author, :author=, :author_id, :author_id=, :author_id?, :author_id_before_type_cast, :author_id_change, 
:author_id_changed?, :author_id_was, :author_id_will_change!, :autosave_associated_records_for_author, :build_author, :create_author!, :event_author, :event_title, 
:mass_assignment_authorizer, :reset_author_id!]



<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平時・未割当: 活動</title>
  <link rel="self" href="http://192.168.18.130:3000/projects/lgdis000/activity.atom?key=6724553250c556a08a5ff4a76724d8b5ed1c3a45"/>
  <link rel="alternate" href="http://192.168.18.130:3000/projects/lgdis000/activity"/>
  <id>http://192.168.18.130:3000/</id>
  <updated>2013-01-24T07:59:01Z</updated>
  <author>
    <name>Redmine</name>
  </author>
  <generator uri="http://www.redmine.org/">
Redmine  </generator>
  <entry>
    <title>避難勧告・指示情報（公共情報コモンズ配信用） #14 (新規): ISSUE 01</title>
    <link rel="alternate" href="http://192.168.18.130:3000/issues/14"/>
    <id>http://192.168.18.130:3000/issues/14</id>
    <updated>2013-01-24T07:59:01Z</updated>
    <author>
      <name>Admin Redmine</name>
      <email>root@localhost.localdomain</email>
    </author>
    <content type="html">

&lt;p&gt;ISSUE 01msg&lt;/p&gt;    </content>
  </entry>
</feed>




redmine_pg_dev=# \d shelters
                                                 テーブル "public.shelters"
                  列                   |             型              |                        修飾語
---------------------------------------+-----------------------------+-------------------------------------------------------
 id                                    | integer                     | not null default nextval('shelters_id_seq'::regclass)
 project_id                            | integer                     | not null
 disaster_code                         | character varying(20)       | not null
 name                                  | character varying(30)       | not null
 name_kana                             | character varying(60)       |
 address                               | character varying(200)      | not null
 phone                                 | character varying(20)       |
 fax                                   | character varying(20)       |
 e_mail                                | character varying(255)      |
 person_responsible                    | character varying(100)      |
 shelter_type                          | character varying(255)      | not null
 shelter_type_detail                   | character varying(255)      |
 shelter_sort                          | character varying(255)      | not null
 opened_at                             | timestamp without time zone |
 closed_at                             | timestamp without time zone |
 capacity                              | integer                     |
 status                                | character varying(255)      |
 head_count                            | integer                     |
 head_count_voluntary                  | integer                     |
 households                            | integer                     |
 households_voluntary                  | integer                     |
 checked_at                            | timestamp without time zone |
 shelter_code                          | character varying(14)       | not null
 manager_code                          | character varying(10)       |
 manager_name                          | character varying(100)      |
 manager_another_name                  | character varying(100)      |
 reported_at                           | timestamp without time zone |
 building_damage_info                  | character varying(4000)     |
 electric_infra_damage_info            | character varying(4000)            | character varying(4000)     |
 other_damage_info                     | character varying(4000)     |
 usable_flag                           | character varying(1)        |
 openable_flag                         | character varying(1)        |
 injury_count                          | integer                     |
 upper_care_level_three_count          | integer                     |
 elderly_alone_count                   | integer                     |
 elderly_couple_count                  | integer                     |
 bedridden_elderly_count               | integer                     |
 elderly_dementia_count                | integer                     |
 rehabilitation_certificate_count      | integer                     |
 physical_disability_certificate_count | integer                     |
 note                                  | character varying(4000)     |
 deleted_at                            | timestamp without time zone |
 created_at                            | timestamp without time zone | not null
 updated_at                            | timestamp without time zone | not null
インデックス:
    "shelters_pkey" PRIMARY KEY, btree (id)

root@localhost:/opt/LGDIS/plugins/lgdis# find . -name "*shelter*" -print sort
./app/controllers/shelters_controller.rb
./app/helpers/shelters_helper.rb
./app/models/shelter.rb
./app/views/shelters
./assets/stylesheets/shelters.css
./db/migrate/001_shelters.rb


	rails g redmine_plugin_model lgdis  evacuation_advisory id:integer:yes project_id:integer
	rails g redmine_plugin_controller lgdis  evacuation_advisories index 

		/app/controllers/evacuation_advisories_controller.rb
		/app/helpers/evacuation_advisories_helper.rb
		/app/models/evacuation_advisory.rb
		/app/views/evacuation_advisories/index.html.erb
		/db/migrate/007_create_evacuation_advisories.rb
		/test/functional/evacuation_advisories_controller_test.rb
		/test/unit/evacuation_advisory_test.rb

	 grep -nirE "remark" * --include=*.rb
grep -nirE "total_pages" /data/on_gree/bm_gree/* --include=**  --exclude=*.sw* --exclude=*~ --exclude=*spec* --exclude=*log  --exclude=*svn*

	前後5行を出力する例
grep -nirE "total_pages" /data/on_gree/bm_gree/* --include=**  --exclude=*.sw* --exclude=*~ --exclude=*spec* --exclude=*log  --exclude=*svn* -C5

##############
 rails g redmine_plugin_controller lgdis issue_geographies
 rails g redmine_plugin_model lgdis issue_geography
find . -name "*geog*" -print |sort


#LINUX運用コマンド　(開発系)
	#step数ステップ数 メソッド数
# find . -name "*rb" -o -name "*.yml" | xargs wc -l
grep -nirE "def \w" .  --include=**  --exclude=*.sw* --exclude=*~ --exclude=*.log > ../../GrepDef.txt

	rake -T |grep stat
	rake stats

		root@localhost:/opt/fix/LGDIS# rake stats

		*** Mocha deprecation warning: Change `require 'mocha'` to `require 'mocha/setup'`.

		+----------------------+-------+-------+---------+---------+-----+-------+
		| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
		+----------------------+-------+-------+---------+---------+-----+-------+
		| Controllers          |  6397 |  4716 |      49 |     392 |   8 |    10 |
		| Helpers              |  3965 |  2665 |       2 |     234 | 117 |     9 |
		| Models               | 11569 |  8033 |      86 |     871 |  10 |     7 |
		| Libraries            | 32843 | 23889 |     155 |    1378 |   8 |    15 |
		| Integration tests    |  7711 |  5727 |      82 |     168 |   2 |    32 |
		| Functional tests     | 16661 | 13404 |      81 |    1221 |  15 |     8 |
		| Unit tests           | 22610 | 17290 |     119 |    1547 |  13 |     9 |
		+----------------------+-------+-------+---------+---------+-----+-------+
		| Total                | 101756 | 75724 |     574 |    5811 |  10 |    11 |
		+----------------------+-------+-------+---------+---------+-----+-------+
			Code LOC: 39303     Test LOC: 36421     Code to Test Ratio: 1:0.9

 16918 合計


	find . -name "*rb" | xargs wc -l
	find . -name "*rb" -o -name "*.yml" | xargs wc -l
	#手動バックアップ
	 tar cvf lgdis-imamondai4.tar lgdis/ ; mv lgdis-imamondai*.tar /opt/fix ; date; ls -alt /opt/fix/*tar ;


root@localhost:/opt/LGDIS# rake -T |grep redmine
rake redmine:attachments:prune            # Removes uploaded files left unattached after one day.
rake redmine:email:read                   # Read an email from standard input.
rake redmine:email:receive_imap           # Read emails from an IMAP server.
rake redmine:email:receive_pop3           # Read emails from an POP3 server.
rake redmine:email:test[login]            # Send a test email to the user with the provided login name
rake redmine:fetch_changesets             # Fetch changesets from the repositories
rake redmine:load_default_data            # Load Redmine default configuration data.
rake redmine:migrate_from_mantis          # Mantis migration script
rake redmine:migrate_from_trac            # Trac migration script
rake redmine:permissions                  # List all permissions and the actions registered with them
rake redmine:plugins                      # Migrates and copies plugins assets.
rake redmine:plugins:assets               # Copies plugins assets into the public directory.
rake redmine:plugins:migrate              # Migrates installed plugins.
rake redmine:plugins:test                 # Runs the plugins tests.
rake redmine:plugins:test:functionals     # Run tests for {:functionals=>"db:test:prepare"}
rake redmine:plugins:test:integration     # Run tests for {:integration=>"db:test:prepare"}
rake redmine:plugins:test:units           # Run tests for {:units=>"db:test:prepare"}
rake redmine:send_reminders               # Send reminders about issues due in the next days.
rake redmine:tokens:prune                 # Removes expired tokens.
rake redmine:watchers:prune               # Removes watchers from what they can no longer view.


root@localhost:/opt/LGDIS# rake routes|grep evacuation
GET	/evacuation_advisories(.:format)	evacuation_advisories#index
POST	/evacuation_advisories(.:format)	evacuation_advisories#create
GET	/evacuation_advisories/new(.:format)	evacuation_advisories#new
GET	/evacuation_advisories/:id/edit(.:format)	evacuation_advisories#edit
GET	/evacuation_advisories/:id(.:format)	evacuation_advisories#show
PUT	/evacuation_advisories/:id(.:format)	evacuation_advisories#update
DELETE	/evacuation_advisories/:id(.:format)	evacuation_advisories#destroy


root@localhost:/opt/LGDIS# rake routes|grep evacuation
         project_evacuation_advisories GET      /projects/:project_id/evacuation_advisories(.:format)                             evacuation_advisories#index
                                       POST     /projects/:project_id/evacuation_advisories(.:format)                             evacuation_advisories#create
       new_project_evacuation_advisory GET      /projects/:project_id/evacuation_advisories/new(.:format)                         evacuation_advisories#new
      edit_project_evacuation_advisory GET      /projects/:project_id/evacuation_advisories/:id/edit(.:format)                    evacuation_advisories#edit
           project_evacuation_advisory GET      /projects/:project_id/evacuation_advisories/:id(.:format)                         evacuation_advisories#show
                                       PUT      /projects/:project_id/evacuation_advisories/:id(.:format)                         evacuation_advisories#update
                                       DELETE   /projects/:project_id/evacuation_advisories/:id(.:format)                         evacuation_advisories#destroy


root@localhost:/opt/LGDIS# Connecting to database specified by database.yml
OpenIdAuthentication.store is nil. Using in-memory store.


root@localhost:/opt/LGDIS/plugins/lgdis# grep -nirE "note" * --include=*vacuat*.rb
:14:#                   :other_damage_info,:usable_flag,:openable_flag,:note,
app/models/evacuation_advisory.rb:132:#   validates :note,
app/models/evacuation_advisory.rb:290:      node_evacuation_advisory.add_element("備考").add_text("#{evacuation_advisory.note}")

app/views/evacuation_advisories/_form.html.erb:226:  <%= field_for :note do |key, label| %>
app/views/evacuation_advisories/_search_conditions.html.erb:122:  <%= field_for :note do |key, label| %>


※上の画像で分かると思うけど、自分はitemテーブル作って色々と試してみてる。

class Item < ActiveRecord::Base
  def name
    super.force_encoding('UTF-8')
  end
  def note
    super.force_encoding('UTF-8')
  end
end



#some_body dev:  @evacuation_advisory_const が避難所モデルのままなので､invertなどはつかえない｡%>

irb(main):112:0> Constant::hash_for_table(EvacuationAdvisory.table_name)
  Constant Load (212.0ms)  SELECT "constants".* FROM "constants" WHERE (kind1='TD' AND kind2='evacuation_advisories') ORDER BY kind3 ASC, _order ASC
=> {"openable_flag"=>{"1"=>"可", "0"=>"不可"}, "sort_criteria"=>{"1"=>"未開設", "2"=>"開設", "3"=>"閉鎖", "4"=>"不明", "5"=>"常設"}, "status"=>{"1"=>"空き", "2"=>"混雑", "3"=>"定員一杯", "4"=>"不明"}, "type"=>{"1"=>"避難所", "2"=>"臨時避難所", "3"=>"広域避難所：開設措置なし", "4"=>"一次避難所：開設措置なし"}, "usable_flag"=>{"1"=>"可", "0"=>"不可"}}



そのようなファイルやディレクトリはありません - /opt/fix/LGDIS/plugins/lgdis/config/settings.yml
/opt/fix/LGDIS/plugins/lgdis/init.rb:16:in `<top (required)>'
/opt/fix/LGDIS/lib/redmine/plugin.rb:130:in `block in load'
/opt/fix/LGDIS/lib/redmine/plugin.rb:121:in `each'
/opt/fix/LGDIS/lib/redmine/plugin.rb:121:in `load'
/opt/fix/LGDIS/config/initializers/30-redmine.rb:12:in `<top (required)>'
/opt/fix/LGDIS/config/environment.rb:14:in `<top (required)>'
Tasks: TOP => redmine:plugins:migrate => environment
(See full trace by running task with --trace)
o
 select * from issues_addtion_data ;
select * from geographies;

app/controllers/shelters_controller.rb:13:    @shelter_const = Constant::hash_for_table(Shelter.table_name)
app/models/shelter.rb:32:  CONST = Constant::hash_for_table(self.table_name).freeze

redmine_pg_dev=# delete  from schema_migrations where version = '9^Cgdis';
redmine_pg_dev=# select * from issue_geographies;
 id | issue_id | datum | location | point | line | polygon | remarks
----+----------+-------+----------+-------+------+---------+---------
(0 行)

redmine_pg_dev=# select * from issues_addtion_data ;
 id | issue_id | geodetic_datum |   latitude    |  longitude   |                 address                  |       remarks
----+----------+----------------+---------------+--------------+------------------------------------------+---------------------
  1 |       14 | 日本測地系     |   38.82815400 | 141.60417200 | 宮城県気仙沼市波路上岩井崎１             | test for issue#14
  3 |       14 | 日本測地系     | -179.00000000 | -89.00000000 | 南極近辺ロンドンの真裏                   | test for issue#14-3
  2 |       14 | 日本測地系     | -141.17184600 | -38.39582800 | 宮城県気仙沼市波路上岩井崎１の地球の裏側 | test for issue#15
(3 行)





配信管理は、queueに配置したところで、処理結果を取得できなくなります。（非同期処理のため）
外部配信は、外部配信処理自身が成功したかどうかを自らログに書くことは可能。
外部配信処理自身が成功したかどうかの判定の中で、
SOAPのような手順の中で成功可否を判断できるものは、外部配信先に届いたかどうかを判定できますが、
SMTPは判定できません。
RSSはファイルを生成できたことの可否を判定するまでです。


表 3.40.4.6 パラメータ一覧（②石巻市メールサーバ：入力/異常）
No 論理名称 物理名称 I/O 備考
1 処理完了ステータス I
※ 石巻市メールサーバへの★配信依頼★のSMTP 処理が異常終了したところまでの検知となる。
※ 石巻市メールサーバの配信が正常終了したかどうかは本システムでは検知しない。


表 3.40.5.6 パラメータ一覧（②SMTP-AUTH：入力/異常）
No 論理名称 物理名称 I/O 備考
1 処理完了ステータス I
※ 外部配信先への★配信依頼★のSMTP-AUTH 処理が異常終了したところまでの検知となる。
※ 外部配信先への配信が正常終了したかどうかは本システムでは検知しない。




表 3.40.6.6 パラメータ一覧（②Twitter：入力/異常）
No 論理名称 物理名称 I/O 備考
1 異常戻り値 I
※ Twitter 連携処理★（API 呼び出し）が異常終了★したところまでの検知となる。
※ 外部配信処理が異常終了した場合のエラー通知は、★★★メール配信★★★により行う。


表 3.40.7.5 パラメータ一覧（②Facebook：入力/異常）
No 論理名称 物理名称 I/O 備考
2 異常戻り値 I
※ Facebook ★連携処理（API 呼び出し）が異常終了★したところまでの検知となる。
※ 外部配信処理が異常終了した場合のエラー通知は、★★★メール配信★★★により行う。
Facebook に対するパラメータ一覧（上記I/O関連図②）を、表4.3.6.7.5.2.に示します。
表4.3.6.7.5.2.ファイル一覧（②Facebook）
No	論理名称	物理名称	I/O	備考
1	本文	message	O	
2	処理完了ステータス		I	


ATOM災害情報ポータルページ/デジタルサイネージに対するファイル一覧（上記I/O関連図②）を、表4.3.6.3.4.2に示します。
表4.3.6.3.4.2ファイル一覧（②設定ファイル）
No	論理名称	物理名称	I/O	備考
1	配信内容ATOM情報		I	2	処理完了ステータス		I	


-----------------


表 3.40.3.6 パラメータ一覧（②公共情報コモンズ：入力/異常）
No 論理名称 物理名称 I/O 備考
1 処理完了ステータス I
※ 非同期処理のため、配信管理機能ではエラー検知を行わない。
※ 外部配信処理が異常終了した場合のエラー通知は、
★外部配信機能/公共情報コモンズ SOAP I/Fからメール配信★により行う。

-postit----------------------
ﾒｰﾙｻｰﾊﾞｰ@ubuntu
三菱重工(株)
xin7-pro-productkey:	3K9P7-R7GCK-D9MYH-QFMX4-WT8P7
.blank? 	.nil? 	.empty?	.present?	self.****	RDoc 記法
X.509 Cartificate Token ,SSL(:443) 


/usr/local/lib/ruby/gems/1.9.1/gems/soap4r-ruby1.9-2.0.5/sample/showcase/wsdl/PayPalSvc/
gem install soap4r-ruby1.9
---------------------------------------------------------


#       log/LGDIS/
#       plugins/lgdis/config/settings.yml
#       plugins/lgdis/db/migrate/008_create_evacuations.rb
#       plugins/lgdis/lib/lgdis/ext_out/datum_conv.rb
#       plugins/lgdis/lib/lgdis/ext_out/georss1_0.tmpl

 mount Resque::Server, at: "/resque"

  2 MethodError (undefined method `xml_control_status' for #<Issue:0xb6ad5e10>):
  3 plugins/lgdis/app/models/shelter.rb:301:in `create_applic_issue'
  4 plugins/lgdis/app/controllers/shelters_controller.rb:95:in `block in ticket'
  5 plugins/lgdis/app/controllers/shelters_controller.rb:93:in `ticket'
  6 plugins/lgdis/app/controllers/shelters_controller.rb:45:in `index'




:6:  if issue.xml_control_status
/opt/LGDIS/plugins/lgdis/app/views/issues/_view_issues_show_description_bottom.html.erb:7:    rows.left l(:field_xml_control_status), h(issue.xml_control_status), :class => 'xml_control_status'


/opt/LGDIS/plugins/lgdis/lib/lgdis/issue_patch.rb:14:        validates :xml_control_status, :length => {:maximum => 12}
/opt/LGDIS/plugins/lgdis/lib/lgdis/issue_patch.rb:29:        safe_attributes 'xml_control_status',
/opt/LGDIS/plugins/lgdis/lib/lgdis/issue_patch.rb:31:          'xml_control_status',







localhost:/opt/fix/LGDIS# grep -nirE "disaster_code *=" /opt/LGDIS/plugins/* --include=*  --exclude=*.sw* --exclude=*~
/opt/LGDIS/plugins/lgdis/app/controllers/shelters_controller.rb:142:    @shelter.disaster_code = @project.identifier
/opt/LGDIS/plugins/lgdis/app/controllers/evacuation_advisories_controller.rb:146:    @evacuation_advisory.disaster_code = @project.identifier
o



1]+  停止                  rails s --debugger
root@localhost:/opt/fix/LGDIS# grep -nirE "import_initial_data" /opt/fix/LGDIS/plugins/* --include=*  --exclude=*.sw* --exclude=*~
/opt/fix/LGDIS/plugins/lgdis/app/models/evacuation_advisory.rb:423:  def self.import_initial_data(project)
/opt/fix/LGDIS/plugins/lgdis/app/models/shelter.rb:428:  def self.import_initial_data(project)

/opt/fix/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:16:        after_create :import_initial_data
/opt/fix/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:83:      def import_initial_data
/opt/fix/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:84:        Shelter.import_initial_data(self) #避難所

root@localhost:/opt/fix/LGDIS# grep -nirE "import_initial_data" /opt/LGDIS/plugins/* --include=*  --exclude=*.sw* --exclude=*~
/opt/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:16:        after_create :import_initial_data
/opt/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:83:      def import_initial_data
/opt/LGDIS/plugins/lgdis/lib/lgdis/project_patch.rb:84:        Shelter.import_initial_data(self) #避難所
	
チケット一覧　Issueの表示


plugins/lgdis/app/views/issues/_view_issues_show_description_bottom.html.erb
	ActionView::Template::Error (undefined method `check_permissions' for #<#<Class:0xcf1b2b8>:0xd07db74>):
	ActionView::Template::Error (undefined method `print_xml_field' for #<#<Class:0xcf1b2b8>:0xb722033c>):

	
Rdoc
Rspec
GIT pull -->renraku ->commit
返値

--------------------------------------------------------------------------------------------------------
Memchachd
	#install

		wget -q -O - http://www.atomicorp.com/installers/atomic |sh
		yum install memcached
		
		vi /etc/sysconfig/memcached
			PORT=”11211″
		config.cache_classes     = false
		#optional 	config.cache_store = :dalli_store

		service memcached start
	#test
		 rails c --debugger
		Rails.cache.write("foo", "フー", :expires_in => 10)
		foo")
		Rails.cache.write("key", [1,2,3], expires_in: 1.hour)  # １時間で消える。
		# もちろんオブジェクトもキャッシュ可能
		Rails.cache.write('hash', {'hoge' => 'piyo', 'foo' => 'buz'})
		Rails.cache.read('hash') # => {'hoge' => 'piyo', 'foo' => 'buz'}

		Rails.cache.clear # すべてのキャッシュをクリア

	#CSV-locading

		#Rails.root/lib/batches に以下のファイルを配置
		　area.csv
		　address.csv
		　shelter.csv
		　memcache_store.rb

		#バッチを実行
		 rails runner Batches::MemcacheStore.execute
		
		#値の取得テスト
			Rails.cache.read("area")["6"]["name"]

		# ==== options
		 実行環境の指定 :: -e production
		以下の形式でstoreする

			file => {
				code => { 
					項目1 => value,
					項目2 => value,
					項目3 => value,
					...
				}
			}

		住所のオートコンプリート用に以下の値もstoreする
		　state  : 都道府県
		　city   : 市区町村
		　street : 町丁目

		 state => {
			 code => name,
			 code => name,
			 code => name,
			 ...
		 }
	rails runner Batches::MemcacheStore.execute

#Rdoc
	# 処理内容
	# ==== Args

	# _objectname_ :: description
	# ==== Return
	# _objectname_ :: description
	# ==== Raise

	# 処理内容
	# 
	# ==== Args
	# __ :: 
	# ==== Return
	# __ ::
	# ==== Raise

	■rdocの生成
	rdoc は、手元でドキュメントを生成してみて、ちゃんと出力されることを確認する。
	rdoc は、以下のコマンドで生成できる。
	$ rdoc -c utf8
	ドキュメントはカレントディレクトリの下の doc ディレクトリにHTML形式で生成される。また、オプションに -d をつけると、クラス図もつく（あまりわかりやすい図ではないが）
	rails の場合は、以下のようにして生成する。
	$ rake doc:app


#HAML
  -debugger
  irbでの検証は以下括弧内にHAML式を代入
    Haml::Engine.new('  ').render

  Haml Comments: -#
  DRIW
  - --> run ruby code
  = insert ruby code
  `code`

  : --> filter
  & --><input>
  | 


堤さん
Java標準のJKSキーストアをserverconfig.xmlのkeystore要素でフルパスしてやる
SharkWire指南


class User < ActiveRecord::Base
  # Userインスタンスに hoge1, hoge2 という名前で保持期間１時間のキャッシュを使用する場合
  cache_attr_accesor :hoge1, :hoge2, :span => 1.hour
end
#こんな感じで使用できます。放っておけば:spanで指定した時間経過後にキャッシュはクリアされます。
u = User.find(300)
u.hoge1 = 'value1'
u.hoge2 = 'value2'

# 実際には下記と等価になります
Cache.read('User_hoge1', 300)
Cache.write('User_hoge1', 300, 'value1', 1.hour)
#また、モデルのインスタンスだけでなくクラスの属性としても使用することができます。
class User < ActiveRecord::Base
 class << self
   cache_attr_accessor :hoge1
  end
end
User.hoge1 = 'value1'  #デフォルトでは２週間保持されます







################rake db: http://namakesugi.blog42.fc2.com/blog-entry-157.html

20130601182530_change_contents_rollout_store_type_to_string.rb
X
  注意：ファイル名とクラス名が完全一致しないと失敗します。
  class ChangeContentsRolloutStoreTypeToString < ActiveRecord::Migration
    def change
      change_column :contents, :rollout_store_type, :text
    end
  end


rake db:migrate:down VERSION=[バージョン番号]
  rake db:migrate:down VERSION=20130601182535

  特定のmigrationをrevertするmigration
    require_relative '20130414_migratino_file_name_without_extention_rb'

    class RevertProductsChangePrimaryKey < ActiveRecord::Migration
      def change
        revert ChangeProductsPrimaryKey
      end
    end



  Joinテーブルの作成をするmigrationファイルの作成
    書式: `CreateJoinTableXXXYYY XXX YYY` XXX, YYYには結合するモデル名を指定する。
    以下の場合はproductとcategoryのN:Nを結合するテーブルcategories_productsが生成される。
    rails g migration create_join_table_product_category product category

  フィールドの変更
    def change
      reversible do |dir|
        change_table :products do |t|
          dir.up { t.change :foo, :integer }
          dir.down { t.change :foo, :string, limit: 32 }
        end
      end
    end

  rails g migration RemoveFooFromProducts foo:string
    複数のフィールドの追加/削除のmigrationファイルの作成
    rails g migration add_foo_and_bar_to_products foo:integer bar:integer




#陰私
  jaime.le.cafe
  much.more.user.friendly
　lefthan0


*postgresql 9.3, Java SpringToolSuite 4,x, spring-batch-framework

報告
#Java言語でのi18n国際化手順

#spring-tool-framework
  ★spring-tool-suite-3.3.0.RELEASE-e4.3-win32-installer 550MB required : はﾛｰｶﾙｲﾝｽﾄｰﾙしないとJDK認識ｴﾗｰ
  " error coping file "...と表示されるときはworkspaceつくりなおす

  #plugin
    dashbord--> ページ左下の2タブ目 Extentions→SEarch subclipse --> check , next, install
    or
    Help-> Install New Software
      url : http://subclipse.tigris.org/update_1.6.x

   utf-8 editing = ecklipse property editor
    http://propedit.sourceforge.jp/eclipse/updates/



  #既存PJのマウントは file-import-general-"Existing Project into WorkSpace"
    File->new->others-> SVNからcheckout-> 新規repoi
        ->http://192.168.216.127/svn/tmdb 

 MVCうごかないときは右クリックでmaven-upgrade

 #I/O
  workspace間の設定ファイルI/O：Eclipseの設定をクリックして、エクスポート先と名前を選択する


#jUnit(eclipseやnetbeans IntelliIDEには初めから組み込み済み )
 project right-click--> new--> other--> java-> junit-> test case
 junit test生成後 以下の如くする

	public void test() {
		//fail("Not yet implemented");
		assertEquals(1,1);
	}

 テストクラス右クリック→run as jUnit testをえらぶ

 log設定は
   /tmdb/target/m2e-wtp/web-resources/log4j.properties
   /tmdb/target/m2e-wtp/web-resources/log4j.xml

  DB設定は
  /tmdb/src/main/resources/META-INF/spring/database.properties
  dbschemaは
    pgadmin->プラグイン->psql consoleで
      \l

  controllerは
    /tmdb/src/main/java/jp/co/nttcom/business/tmdb/web

  VIEWは
  /APPROOT/src/main/webapp/WEB-INF/views
  Localeは
  /APPROOT/src/main/webapp/WEB-INF/i18n


  /tmdb/src/main/webapp/WEB-INF/layouts/*jsp
  に
  <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%>
  と記述すると；
  /tmdb/src/main/webapp/WEB-INF/views/ 直下の*jspについては言語別ロケールファ
イル(i18n/*.properties)のメッセージを認識できるようになる；

  /tmdb/src/main/webapp/WEB-INF/views/ 配下サブフォルダーの下の*jspについて
は、各*.jspファイルごとに同様の記述をしないといけない。

各i18n/*.properties内部の記述はRailsのlocale/*ymlのインデント階層で表現はでき
ない。
  xxx.yyy.zzzの如くピリオドで階層構造を表現した単一階層的表記しかできない。

※グローバル変数的にタグライブラリーとその名前の宣言をするやり方は、いろいろし
らべましたが、Javaの初心者には調査がつきませんでした。
  <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%>

#eclipseでのライブラリー追加方法
　target -> libにはりつけ→PJ property→ JavaBuild path -> library -> Add jars
  tool->Run->Run configurations -> config -> EnvironmentにDOS変数追加
    MAIN (java)
    Arguments (JVM+プログラム)  

# LINUXとWindows環境の同期について
  #winとgithub/some_body/vimの同期
    git add .
    git pull origin master_win
    git commit
    git push origin master_win
    #some_body jBC

  #winとlinuxの同期
    fireftp たちあげ
    ADSOL-VMに接続
    windowsからlinuxに差分ファイル手作業同期


#RoR請負面談時要望
  作業密度を提示しない みなしは原則不可｡→請負&月固定みなし､日割りと業務委託は不可｡
  #打ち合わせの場でも紙印刷はやめて､はじめからデジタル互換性の高いデジタル資料を事前にメール送信してもらう
#PJの優先順位を事前ヒアリング:生産性､速度
    xls2003で提供
    レコード定義書の列のならび改版提供｡


ecoinux
	sudo link /usr/bin/perl /usr/local/bin/perl 
	sudo apt-get gcc make vim gnome-terminal 
	#vim config
		# ~/.vimrc
			set number
			set tabstop=2
			# set nocompatible
			syntax on
			...etc
	#transpantation of Windows file
		/user/bin/perl --
		or
		chang to \n= LF

	#FereFox3 -prifile config & transplantation
	#uninstall gnome pre-installed apps
		-rwxr-xr-x 1 root root 151396 2008-05-24 05:07 /usr/bin/xfce4-terminal
		xterm

	#customize ,desktop, Iterface, (mousepad,Thuanr) 

	#ctrlpanel-->add system-source 
		deb http://cz.archive.ubuntu.com/ubuntu dapper-backports main universe
		deb http://packages.mediaubuntu.org/gutsy free non-free
	ctrlpanel-->add "gthumb clamAV"
	ctrlpanel-->権限add?
	sudo apt-get install adobereader-jpn realplayer sysv-rc-conf ntfs-config  
	sudo apt-get install streamtuner streamripper

	sudo sysv-rc-conf
		stop : anacron, apmd, atd, bloetooth, cupsys, hotkey-setup, rsync
		#case non-Gforce, also stop nvidia-kernel
	start-menu---> adobereader install

	日本語環境問題
		Javaアプリへのキー入力の問題 はどうやらUbuntu特有のものらしい。UIMに変更すればもちっと安定するらしいので変更してみる。
			sudo apt-get install uim uim-anthy uim-qt
			sudo update-alternatives --config xinput-ja_JP で、/etc/X11/xinit/xinput.d/uim-systrayを選択。 （ここで一旦ログアウト…/etc/X11/xinit/xinput.d/uim-toolbarだとJavaアプリに日本語入力できなかった）
			そのままでは日本語入力できなかったので、システムトレイに追加されたUIMの設定ボタンをクリックし、グループ（全体設定）の『使用可能にする入力方式』『標準の入力方式』をAnthyにすれば,日本語入力できるようになる。はず。
Apache2.0----------------------------------------------
	$ ./configure --prefix=[path:default=/usr/local/apache2]
	$ sudo make
	$ sudo make install
	$ PREFIX/bin/apachectl start
	#compiling instll webmin
		sh setup.sh
		sudo /usr/local/apache2/bin/apachectl start
		sudo /usr/local/apache2/bin/httpd start
		/usr/local/apache2/htdocs/takami/

	premature end of script headers
		--> /usr/bin/perl --
		--> change \n into LF
	attempt to invoke directory as script: /.../htdocs/hogehoge/cgi-bin/

	Apache2.0では、 SetHandler server-parsedの命令文を入れると、DirectoryIndex命令が効かなくなるよ
	うです。Turbo Desktop 10に、Apacheの2.0をソースコードからコンパイルすると、ブ
	ラウザは同じように「ファイル未検出（404）」のエラーを返します。Apacheが起動す
	る時に、「SetHandler server-parsed文があると、DirectoryIndex命令は無効になりま
	すよ」といったメッセージを出してくれれば、話は分かるのですが・・・。

	-----------------------------------------------------------------
	■変更後
	<Directory "/home/aaa/cgi-bin/">
	　　AddHandler perl-script .cgi
	　　PerlResponseHandler ModPerl::Registry
	　　PerlOptions +ParseHeaders
	　　Options ExecCGI +MultiViews
	</Directory>

	■設定3で追記した通常のCGIで動作させるDirecitoryディレクティブは削除
	------------------------------------------------
		 mod_userdir
			 CustmeLog /log/acess/log SetEnvIf


			 --------------------------------
			 http://wiki.apache.org/httpd/Errors/DirectoryAsScript

			 For example, replace this:

			 ScriptAlias /cgi-bin /var/www/cgi-bin

			 with this:

			 Alias /cgi-bin /var/www/cgi-bin
			 <Directory /var/www/cgi-bin>
			  AddHandler cgi-script cgi pl
			   Options ExecCGI
			   </Directory>



			   ---------
			   f all your CGI scripts end in .py, you can fix the problem by replacing
			   SetHandler cgi-script
			   with
			   AddHandler cgi-script py 
			   -----------------------------

			   /var/www
			   ├ / (/var/www/html)
			   │　└ index.html　
			   └ cgi-bin/
			   　　└ test/
			   　　　　└ index.cgi

			   /home/username/public_html
			   ├ / (/home/username/public_html/html)
			   │　└ index.html
			   └ cgi-bin/
			   　　└ test/
			   　　　　└ index.cgi

			   ScriptAliasMatch /~(..*)/cgi-bin/(.*) /home/$1/public_html/cgi-bin/$2


			   を設定し、

			   http://192.168.*.*/cgi-bin/test/index.cgi
			   http://192.168.*.*/~username/cbi-bin/test/index.cgi


			   と、ファイルネームまで指定して CGI を動作させることまでは出来ました。

			   が、次のようにディレクトリの URL でアクセスして index.cgi を動作させることが出来ません。

			   http://192.168.*.*/cgi-bin/test/
			   http://192.168.*.*/~username/cbi-bin/test/
			   ・この際、（考えにくいことですが）ScirptAlias 内では希望の動作は出来ないものと仮定して、
			   　ScriptAlias はコメントアウト、ScriptAliasMatch は削除。
			   ・Alias, AliasMatch 両ディレクティブを追加して CGI 用ディレクトリを新たに設定。
			   ・<Directory "/var/www/html"> Options +ExecCGI </Directory>
			   ・<Directory ~ "^/home/.*/public_html/cgi-bin(ユーザ CGI ディレクトリの正規表現)"> Options +ExecCGI </Directory>

			   DirectoryIndex index.cgi

			   #ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
			   Alias /cgi-bin/ "/var/www/cgi-bin/"
			   AliasMatch /~(..*)/cgi-bin/(.*) /home/$1/public_html/cgi-bin/$2

			   <Directory "/var/www/html">
				   Options +ExecCGI
				   </Directory>

				   <Directory ~ "^/home/.*/public_html/cgi-bin">
					   Options +ExecCGI
					   </Directory>

					   AddHandler cgi-script .cgi



					   結果、これで希望の動作をさせることが出来ました。

					   ただ、この状態はセキュリティ的に何か問題は無いのでしょうか。
					   結局、このような解決策を採るドキュメントは検索にヒットしませんでしたし、
					   このままだと、CGI 用ディレクトリに収めた .html や画像など、何でも表示してしまいます。
					   大丈夫でしょうか？
					   返信 014 miz [UA] 	2007-03-15 18:30
					   ＞このままだと、CGI 用ディレクトリに収めた .html や画像など、何でも表示してしまいます。
					   ＞大丈夫でしょうか？

					   ご心配の通り、大丈夫ではありません。
					   大事なパスワード用ファイルや個人情報ファイルなどもファイル名さえ知られてしまえば、だだ漏れです。

					   FilesMatchセクションを使って、cgi用(拡張子.cgi,.pl)以外は全部拒否の設定をしてみては？
					   実際のコードは、私には検証出来る環境がないので、下記サイトをじっくり読んで設定を試みて下さい。
					   http://httpd.apache.org/docs/2.0/sections.html
					   --------------------------------------
						.htaccessが使用可能であればindex.cgiをドキュメントディレクトリ直下におき.htaccessを下記のように編集して
						Options +ExecCGI
						http://hogehoge/でアクセスしてみてください。


								
								-----------------------------
								UNIXやCygWinのシェルをつかえるひとがWindowsをつかいつづける浪費の比較

								LINUX					
								大半のファイル操作コマンドにRecursive1探索オプションとワイルドカード（正規表現）オプションがある
								Windows
								なにかしようとすると再起探索処理する専用ソフト
								ワイルドカード（正規表現）オプションについても有無を調査しないとだめ

								-----------------------------
								WindowsをつかったひとがLINUXをつかう浪費

								LINUX
								zipコマンドがWindows改行コードのファイルを圧縮できない
								しかtなくgzipをつかう
								Windows
								どの圧縮ソフトもそうではない。

								LINUX
								シェルexplorerのundoができない
								Windows
								できる


								LINUX
								実行中のプログラムをroot権限でchmodするとdirectory破損する
								Windows
								警告が事前に出る



	#password CGI
		unzip password
		chmod -R 777 /usr/local/apache2/cgi-bin/*
		DrectoryIndexaa??a??i??aindex.cgi index.html index.html.var
		index　ーー＞　index.cgi index.html index.html.var

		#ftp://some_body.vs.land.to/
		http://some_body.vs.land.to/view.cgi?href=0&id=takami&pass=vlml8877

	#module-check
		sudo  /usr/local/apache2/bin/httpd -l
#WiFi@triplet-gate
	(WiFiよりダイアルが優先するのを止める)：
		#コントロールパネルのダイアルアップで既定接続のチェックをはずす。IE接続プロパティーでダイヤルしない設定にする。
	#OS-Windows-zero-configi(Wifi-ctrl-panel) & Wired-autoconfigi(IEEE802.1auth)が起動していて利用可能なネットワークがWindowsで検出、コントロールパネルのアダプタプロパティーにタブ表示されることが基本。これ以外は不正常。
		範囲内で接続するにチェック、FLETSならばIEEE802.1認証にチェック	
	*BWsvcなど3rdPratyのサービスは制御をよこどりするので止める。
	*ツールでの接続障害時には、まずOSレベルで疎通確立する。
		WindowsタスクトレイのアイコンはSSID&WEP-keyでの疎通レベルまでしか表示しない。認証は別物。

#EC-suite-dependencies:
	ec-rider0.8.2/ec_front/ Rails requires RubyGems >= 1.3.2 (you have 1.3.1). Please `gem update --system` and try again.
	elecoma-2.0.3/ /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:32:in `gem_original_require': no such file to load -- gettext (MissingSourceFile)	from /RoR/EC/elecoma-2.0.3/config/environment.rb:9
	substruct_rel_1-3-1/ config.gem: Unpacked gem subexec-0.0.4 in vendor/gems has no specification file. Run 'rake gems:refresh_specs' to fix this. RubyGem version error: rack(1.0.1 not ~> 1.1.0) (Gem::LoadError)
#ubuntu on VMware troubleshooting
	#VMware converterのメリット
		WS.SVとはちがい、複数の変換タスクを、WS/SVの作業をとめることなく実行できる。
			これに比べ、WS/SVのインポート変換機能は 一個の変換作業でWS/SV全体を止めてしまう。
		WS/SVとはちがい、snapshot削除や完全クローン作成,resizeを事前に準備しなくとも、直近状態だけを変換してくれる。
	#version確認方法	cat /etc/lsb-release
		DISTRIB_ID=Ubuntu
		DISTRIB_RELEASE=8.10
		DISTRIB_CODENAME=intrepid
		DISTRIB_DESCRIPTION="Ubuntu 8.10"
	#partitiona&swap拡張
		VMware-WS/SV　>6.xで snapshot全部削除後、または完全クローンに対して　"HDDの拡張"(=vmware-cdiskmanager.exe)で拡張
			-VMware WS/SVの"import"メニューも動作不審
			-Vmware Converterは動作不審
		GpartedのCD起動。/dev/*d*/ マウントパスは自動作成される
	#拡張ずみswapのmount
		/etc/fstab 内のuuidを/dev/disk/by-uuid で認識されたものにかきかえ
		hybernate-error---> /etc/initramfs-tools/conf.d もかきかえ
		sudo dpkg-reconfigure  initramfs-tools
		sudo swapon -a; sudo swapon -s;
	Tshoot1: case :loobackアドレス以外のNIC(lo only, no eth0..ethn) 
		ipaddress missing ,DNS failure and boot message "SIOCSIFADDR no such device "
			sudo mv /etc/udev/rules.d/70-persistent-net.rules /etc/udev/rules.d/70-persistent-net.rules.bak 
			init 6 / shutodown -now
	#TShoot2: vmware usb arbitration driver windows 7 do not run why fix
		AMD-CPU, Huawei, Sony-ErriscsonのUSBドライバーなどはVMWRWS-7.x(筆者の場合は7.1)でもエラー続出。
		MS標準のUSBドライバーにroll-backか削除でもどす。
		These issues occur when unknown USB drivers are installed on a Windows machine hosting the VMware Workstation software.
		To resolve these issues, roll back to the original Microsoft USB drivers on the host:
		   1. Right-click (My) Computer and select Manage.
		   2. In the left pane of the Computer Management window, select Device Manager.
		   3. Expand Universal Serial Bus Controllers.
		   4. Right-click USB Root Hub and select Properties.
		   5. In the Driver tab, click Roll Back Driver.

		For computers with AMD processors:
		   1. Right-click (My) Computer and select Manage.
		   2. In the left pane of the Computer Management window, select Device Manager.
		   3. Expand Universal Serial Bus Controllers.
		   4. Locate the AMD USB Filter Driver.
		   5. Right-click it and select Uninstall.
		   6. Select Uninstall the driver software for the device.
		   7. Restart your computer.
		if the above method fails, you can also uninstall the AMD USB driver manually. To do so:
		   1. Open the Windows registry, and go to HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Class\{36FC9E60-C465-11CF-8056-444553540000}.
		   2. Remove the usbfilter value from the UpperFilter string.
		   3. Go to HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\.
		   4. Delete the usbfilter string (=string value ).
		   5. Delete this file: %system32%\drivers\usbfilter.sys.
		   6. Reboot your computer

		
#VBadd-in How-TO
	winMe.vm
	win2KproEng.vm
	winSVJP.vm
	USB-X
	VB6combo
#Ubuntu-config 頓挫項目
	#rdebug-config
		2rdb:1) show commands
		No readline suport

	vim 
		unix - 日本語charsetをステータスバーに表示
		:Rtags	 Calls ctags -R on the current application root and writes the result to tmp/tags.  
		Exuberant ctags must be installed.  Additional arguments can be passed to ctags with |g:rails_ctags_arguments|.
			#Exuberant ctags 
				sudo sh ./configure
				sudo make clean
				sudo make install
				sudo make
				cd ../
				rm ctags-5.7.tar 
				ctags -R --languages="-JavaScript"
		fastri qri reference: 
			let g:RCT_ri_cmd = 
		rcodetools.vimを~/.vim/pluginにコピー。インストーラーは不完全
			#RTC_completion失敗
			/usr/lib/ruby/gems/1.8/gems/rcodetools-0.8.4.0/lib/rcodetools/completion.rb:166:in `runtime_data_with_class': -:24: can't convert Fixnum into String (TypeError) (Rcodetools::ProcessParticularLine::NewCodeError)
		refe日本語環境
			 sudo vi /usr/lib/ruby/gems/1.8/gems/refe-0.8.0.3/lib/refe/searcher.rb のshift-jis?ブロックをコメントアウト

	#done
		vim
			helptag generation
			omni-completion
		OCR & scanner
		gems local installation 	=>	sudo gem[ersion number] install --local
		ebian local   installation	=>	sudo dpkg -i [packagename].deb
		ebian local uninstallation	=>	sudo dpkg -r [package-nickname]
		rails 1.2.x & 2.0.x
		WiFi troubleshooting ---FLET-spot & 3rd vendor daemon
		Yahoo auction automation
		shareware publishing
		Windows Mobile on smartphone
		VMware on UMPC
		mashup: greasemonkey & Yahoo pipes
		将来に期待のbad know-how, bad-hack。
			Foxitreader---- 起動は三秒、Adobe reader 9 の六倍ほど。しかし、linux版マニュアル自体がpdfでかかれていたり、ubuntuには*.bz2版ではなく、*.deb版をダウンロードしてdpkg- -iでローカルインストールする必要がある。さらに、550KBしかないPDFをよみこむとクラッシュ。そもそもubuntu公式レポジトリーに登録されておらず、ネットワークインストールできないアプリはさわるべからず、という悪例。
			mplayer ---rm file 

#narrow-obile-band compatible hosting
	wikispases=initial oadig 27sec, @wiki=20sec   

#bash commands
	kick job in background	=>	[command]&
##Linode	cd ~;rm vimhomeold.tar*;tar -cvf vimhomeold.tar .vim* *vim* .ve_* MyWiki/ .*rc  ;gzip vimhomeold.tar; cd -
	cd ~/RoRapps/; tar -cvf 2chnrg-latest.tar  2chnrg ;gzip 2chnrg-latest.tar; cd -
##Linode	cd ~/RoRapps/; tar -cvf 2chnrg-dev.tar 2chnrg/ ;gzip 2chnrg-dev.tar;cd -
##Linode	cd ~/RoRapps/; tar -cvf dev232plain.best.tar dev232plain/ ;gzip dev232plain.best.tar; cd -
##Linode	sftp xxx.xxx.xxx ;(su password & root password) --> mput *gz /root
##LInode	gem install chronic packet
			ruby script/plugin install http://svn.devjavu.com/backgroundrb/trunk
			rake backgroundrb:setup; rake db:migrate
##Linode	ruby script/server -p 80 -b 74.207.240.145 -e production
			ruby lib/scraper.rb 2nn

##Linode    Ubuntu Hardy に ImageMagick RMagick をインストールす
	くどいくらいやる。リポジトリの場所の改廃が早いため-->    
		% sudo aptitude update
		% sudo aptitude install imagemagick libmagick9-dev
	ヴァージョン合わせる。そしてローカルコンパイルに数十分かかる-->    
		% sudo gem1.8 install rmagick -v 1.15.13
	確認は，
		$ irb
		irb(main):001:0> require 'rubygems'
		=> true
		irb(main):002:0> require 'RMagick'
		=> true
##Linode   file_column plugin to rails app
		"webからfile_column.tar.gz をダウンロード、展開、file_colmnにフォルダー名かきかえ
		EDIT: /home/you/RoRapps/2chnrg/vendor/plugins/file-column/lib/file_column.rb
			#org       my_options = FileColumn::init_options(options, Inflector.underscore(self.name).to_s, attr.to_s)
			  my_options = FileColumn::init_options(options, self.name.to_s.underscore, attr.to_s)
	grep -RI "1.2" ./MAN*/*htm*>tmpgrep.txt

	#tar tvf xvf cvf zZ option is buggy.

==============================================================================
#wget
	wget -o wgetlog.txt -S -x -r --level=2 -k -p -A --accept=htm,html,shtml,jpg,jpeg,gif,png
		http://www.asahi-net.or.jp/~aa4t-nngk/ipttut/output/index.html
	wget -O - -q ftp://ftp.apnic.net/pub/stats/apnic/delegated-apnic-latest | grep ipv4 | grep JP | grep -v grep | perl -a -F'/\|/' -n -l -e 'BEGIN{ print "order deny,allow\ndeny from all\n" } $mask = 32; $square = 0; $value = $F[4]; while($value != 1){ $value /= 2; $square++ } print "allow from $F[3]/" . ($mask - $square)' > /path/to/.htaccess

#webmin-operaton
	tail /root/2chnrg/log/backgroundrb_11006.log -n 50; vmstat -S M ;ps -ef|grep back;ps -ef|grep script/server
	#HDD残量調査
	df -a
	#apacheの過剰アクセス調査
	sort /usr/local/apache2/logs/access_log |grep 484 |grep -P "+\.+\.+\.+ - "

#iptables-webmin-way
		 #apt-get install iptables fwbuilder ssh-server
		 sudo su
		 iptables -F
		 sh filter.sh
		 iptables -L
		 iptables-save > /etc/iptables.up.rules
		 iptables-restore < /etc/iptables.up.rules
		 #webmin set
	http://sei.qee.jp/docs/program/hta/makeDeny/index.html
	iptables  http://www.hakusan.tsg.ne.jp/tjkawa/lib/krfilter/index.jsp
	
	#show process tree
	ps efaux
	# sort /usr/local/apache2/logs/access_log |grep 484 |grep -P "\d+\.\d+\.\d+\.\d+ - " >CPUoverloadElement.txt
	#status code 484 アドレスが不完全 WORST secu-hole-clawlers' IP aaadresses:
	94.101.118.24
	200.247.215.250
	72.26.201.162
	201.77.202.151
	61.19.255.14
	88.203.203.149
	217.24.240.68
	112.78.193.229
	188.165.64.227
	157.27.10.105
	92.240.68.152
	85.17.88.9
	74.83.233.125
	109.230.221.171

	#status code 484 アドレスが不完全で旧リンクをクロール seldome-maintained-clawlers' IP aaadresses:
	119.63.193.60 119.63.193.61 
	119.63.193.113 119.63.193.114
	119.63.193.224

#SQLite3
	1|some_body||some_body@gmail.com||||ba854c204ba2b82c32ffc8bdb54e3fa8427bca80|1147b878f81136cd10845c8d79789e42969811ab||||ee029d36aec513eb2e4c0ef2eccc8bc50f886fc5|||f|2009-04-25 19:27:24|2009-07-24 07:08:56|2009-04-25 19:27:22|
	sqlite> select * from users;
	1|some_body||some_body@gmail.com||||ba854c204ba2b82c32ffc8bdb54e3fa8427bca80|1147b878f81136cd10845c8d79789e42969811ab||||ee029d36aec513eb2e4c0ef2eccc8bc50f886fc5|||f|2009-04-25 19:27:24|2009-07-24 07:08:56|2009-04-25 19:27:22|
	sqlite> select * from sections;
	1|Page|1||1|2|home|home|Home|||--- {}
	||-1||

	//　まずは、データベースを指定してsqliteを起動
	> sqlite3 database_name

	//　デフォルトでは、セパレータが｜になっているので,csv形式のカンマ区切りに変更
	//　これを忘れると次のimport処理ではまる。馬鹿らしい・・
	sqlite> .separator ,

	//　インポートのコマンドでcsvファイルとテーブルを指定する。別に.csvという拡張子でなくとも.txtでもかまわない。
	sqlite> .import csv_file_name table_name

	// 　エラーがでなかったらsqlコマンドでデータが入っているか確認
	sqlite> select * from table_name

	// 　もう一度取り込みなおしたいならdeleteでデータを消す
	sqlite> delete from table_name

	//おまけ・・・csvファイルを作成する
	csvファイルを作成するのにMACだとexcelが使えない（正確には買うのがもったいない、OpenOfficeはちょっと重たいし、日本語がだめ）
	なので、もっとも簡単なのがGoogle DocsでExportするのが便利。。
	ただし、カラム名はインポートするファイルからは削除しておかないとエラーになるので要注意。
	投稿者 ToolsCafe 時刻: 23:39


OCRこつ
	そもそも灰色網掛け背景に要点がかいてある本はえらぶな。
	OCRがもっとも認識不得意とする。
	白黒二色印刷、DTPレイアウトなしのワープロうちの本が一番よい。
	
	monocrome 600DPI, cuting page border & ページ中央の黒ずみ(黒棒一個は段組認識にOK)
	
	マニュアルでページ選択しつつ、傾き補正、ノイズ小除去、レイアウト認識、をやるのが結局早くしあがる。
		1領域を文字以外に自動判別する
		2領域認識連続失敗でハング
	という問題を回避するためでもある
	
	認識結果はメモリ上でtxtにコピー。ファイル直は失敗する。
	
	txteditorでのごみ除去パターン
			
		\n\n*	\n
		 +レ\n	\n
		･･*	""
		^ +	""
		･･+	""
		<.?.?十	""
		 *＼＼* *	""
		" +"	" "
		([\w\s\t])9(\w?)	\1g\2
		([\w\s\t])1(\w?)	\1l\2
		「	r
		[國圓圖]	■
		VV	W
		vv	w
		g	\n
	
	
	
	ExcelでHimem用に11	in	out		0 形式に整形
	
	
	3ｷｬﾘｱ対応USB充電+予備ｱﾀﾞﾌﾟﾀ白一式 美品
	
Mshaver改筆
	an MS-Outlook
	e-mail[s]	e-mail
	accuracy	reliable acuracy
	精度	正確性(確かさ)
	
	MailShaver is a MS-Outlook add-in software that recognizes OVERLAPPING OF E-MAIL CONTENTS, then automatically "squeezes(=condense)"/disposes your e-mail containing obsolete contents/context. this is difference from other tools that only sweeps duplicated copies of e-mail....
	MailShaver also has following automatic functionality:
	auto-cleaning of e-mail subject / auto-categorizing / auto-outdenting / timer-based cleaning / dumping or retrieving attachments
	/ Listing e-mail addresses  / Show&reach a full-path of MS-Outlook Namespace / Peeking into e-mail without opening mail /disabling "sent items" box 
	+ plus some more features...
	
	
	
	MailShaver also has following automatic functionality:
	MailShaver can automatically "squeeze(=condense)"and disposes obsolete e-mail,  cleans e-mail subjects,  categorizes/outdents mail, dumps/retrieves attachments
	,  generates mail addresses  in CSV, Shows full-path to a mail, peeking into e-mails,, disabling "sent items" box 
	+ plus some more features...
	
	
調査メモ
	共有フォルダ VMware　-3.5h
	無線LANアダプタかいかえとMACアドレス依存のHOT-SPOT接続トラブル　-3h
	
	vimrc
	vimmacro
	fletstool uninstall@wakou-eki
	
	　　Acer
	　　　├A-open
	　　　└BEN-Q
	
	ASUS
	ASUStek
	MSI
	Kingston
	Prinston technology
	GreenHouse = Korea
	
	■yahoo pipe
		hatena---> 大手小町、
	Daijob http://www.daijob.com/jobs/search?pg=0&kw=ruby&kf[]=1&kf[]=2&ns=0&xs=0&la=&lb=&hs=0&hx=0&el[]=5&as[]=1&as[]=2&as[]=3&li=0&submit.x=51&submit.y=13&submit=%E5%86%8D%E6%A4%9C%E7%B4%A2
	==================================＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	人民元箪笥預金=半年１００万円しかおろせない。
	
	
	
	野村?好配当日本株式オープン   
	 国内株式
	 6,573
	-37 (-0.56%) 
	 -34.31%
	 -13.17%
	 3
	 14,726
	 
	日興?株ちょファンド日本（高配当株・割安株・成長株）毎月分配型   
	 国内株式
	 5,368
	-5 (-0.09%) 
	 -35.11%
	 -18.31%
	 3
	 36,089
	 
	
	
	
	(5726|5727|5541|5781|6868|6998|6998|4047|5781|6138|5707|5855|4092|4107|4080|5855|7456|3036)
	Ti:チタン
	5726 住友チタニウム
	5727 東邦チタニウム
	
	Ni:ニッケル
	5541 大平洋金属
	
	Mo:モリブデン
	5781 東邦金属
	6868 東京カソード研究所
	6998 日本タングステン
	W:タングステン
	6998 日本タングステン
	4047 関東電化工業
	5781 東邦金属
	6138 ダイジェット工業
	In:インジウム
	5707 東邦亜鉛
	5855 アサヒプリテック
	Co:コバルト
	4092 日本化学工業
	4107 伊勢化学工業
	4080 田中化学研究所
	U:ウラン
	Pu:プルトニウム
	その他
	5855 アサヒプリテック [リサイクル企業]
	7456 松田産業 [リサイクル企業]
	3036　アルコニックス [ニッケル、チタン、タングステン、モリブデン]




#linux-rehabilitaion menu
	#3month-blank
		 vi---set nowrap, set nonumber, set list
		 w3m google.co.jp
		 login to webmin with ID= "some_body"
		 sudo ruby R2chnnInitfork.rb help
		 sudo ruby R2chnnInitfork.rb start localdebug home
#mySQL
	#Linode	sudo apt-get install mysql-server mysql-client libmysqlclient15-dev libmysql-ruby1.8 -y
		you@ecolnux:~/RoRapps/2chnrg/lib$ ps -ef |grep sql
		root      3300     1  0 17:29 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe
		mysql     3446  3300  0 17:29 ?        00:00:01 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --pid-file=/var/run/mysqld/mysqld.pid --skip-external-locking --port=3306 --socket=/var/run/mysqld/mysqld.sock
		root      3447  3300  0 17:29 ?        00:00:00 logger -p daemon.err -t mysqld_safe -i -t mysqld

	#Linode >	mysqladmin create r2chnn -u root -p 
	#Linode >	
		rake adva:install:core;rake adva:uninstall engines=blog
		rake db:migrate
	#cf.	rails -d mysql [pj-name]
	#edit config/database.yml
		development:
			adapter: sqlite3
			database: db/development.sqlite3
			pool: 5
			timeout: 5000
		dev:
			adapter: mysql
			database: r2chnn
			username: "root"
			password: "alison"
			timeout: 5000
			socket: /var/run/mysqld/mysqld.sock
			#encoding: utf8
	cp config/environment/development.rb config/environment/dev.rb
	>	mysql -u root -p
		 show databases;
		 use [DBname];
		 show tables;
		 describe [table-name];
		\h	help
		\q	quit
		status

	mysql> select * from users ;
		+----+------------+-----------+----------------------+----------+-------+-----------+------------------------------------------+------------------------------------------+------+-------+---------+-------------+-----------+------------------+-----------+---------------------+---------------------+---------------------+------------+
		| id | first_name | last_name | email                | homepage | about | signature | password_hash                            | password_salt                            | ip   | agent | referer | remember_me | token_key | token_expiration | anonymous | created_at          | updated_at          | verified_at         | deleted_at |
		| +----+------------+-----------+----------------------+----------+-------+-----------+------------------------------------------+------------------------------------------+------+-------+---------+-------------+-----------+------------------+-----------+---------------------+---------------------+---------------------+------------+
		| |  1 | some_body | NULL      | some_body@gmail.com | NULL     | NULL  | NULL      | d9e778c53529bcf488846230be0f6bf6f3a922d4 | 9ee11fa50003a673b6c783263a61770f37254b55 | NULL | NULL  | NULL    | NULL        | NULL      | NULL             |         0 | 2009-07-25 09:19:17 | 2009-07-25 09:19:17 | 2009-07-25 09:19:16 | NULL       | 
		| +----+------------+-----------+----------------------+----------+-------+-----------+------------------------------------------+------------------------------------------+------+-------+---------+-------------+-----------+------------------+-----------+---------------------+---------------------+---------------------+------------+
		| 1 row in set (0.00 sec)
		|

	 MySQL インポートとエクスポート（テキストデータ） Submitted by sasaki on 月曜, 2007-01-15 15:44
		 #erace all existing rows
			 mysql -u root -p
			 use r2chnn;
			 delete from kokuekis;
		 ■テキストTAB形式でのエクスポート                                                       
			  データベースmydbのempテーブルからタブ区切りのテキストデータでエクスポートする。        
				 $ sudo mysql -B --skip-column-names -D mydb -e 'select * from emp;' -u tanaka -p > out.txt   
				 $ sudo mysql -B --skip-column-names -D r2chnn -e 'select * from kokuekis;' -u root -p > test.txt   
			  --skip-column-namesを削除して実行すれば、カラム名も出力されるので便利。                
		 #vi replace mysq-export&import
			%s/】\t\t/】\t\t2009\//gc
			%s/】\t\t2009\/03/】\t\t2010\/03/gc
			%s/】\t\t2009\/02/】\t\t2010\/02/gc
			%s/】\t\t2009\/01/】\t\t2010\/01/gc
				#置換もれがあるのでvi上でチェック
		  #文字化け対策
		  ■テキストデータのインポート mysqlimport編                                             
			  データベースmydbのempテーブルにテキストデータをインポートする。                        
				  tar cvf tbl.tar *tbl.*; #<----sftp with binmode
				  SHOW VARIABLES LIKE 'character_set%';
						SHOW VARIABLES LIKE 'character_set%';
						+--------------------------+----------------------------+
						| Variable_name            | Value                      |
						| +--------------------------+----------------------------+
						| | character_set_client     | latin1                     | 
						| | character_set_connection | latin1                     | 
						| | character_set_database   | utf8                       | 
						| | character_set_filesystem | binary                     | 
						| | character_set_results    | latin1                     | 
						| | character_set_server     | latin1                     | 
						| | character_set_system     | utf8                       | 
						| | character_sets_dir       | /usr/share/mysql/charsets/ | 
						| +--------------------------+----------------------------+
						? 解決方法その3 root になれるなら MySQL のデフォルト文字コードを UTF-8 に変更する。 /etc/my.cnf か /etc/mysql/my.cnf を開き（ない場合は mysql が起動するときの設定ファイルを探す）、MySQLのデフォルト文字コードを UTF-8 に変更する。
						# vi /etc/my.cnf
						[mysqld]
						default-character-set = utf8
						[mysql]
						default-character-set = utf8
						[mysqldump]
						default-character-set = utf8
				  $ sudo mysqlimport --local mydb emp.txt -u root -p                                          
				  $ sudo mysqlimport --local r2chnn kokuekis.tbl.tsv -u root -p                                          
				 select * from kokuekis where sbm > 900;
			 mydb：　データベース名                                                                  
			 emp.sql：　テーブル名.sql（中身はテキストタブのデータ）
			 テキストエディタやExcel等で、TEXT-TAB形式で書き出した後、「テーブル名.txt」へ変更する 
			 --localを指定しないと、「Access denied」エラーが発生する。      





#capistrano
  494  gem install capistrano
  495  gem install capistrano-ext
  496  gem install capistrano_colors
  497  gem install capistrano_rsync_with_remote_cache

  チャットで共有「GREE trunk 3分後に更新」
  #no need to sudo/su -
  cap trunk deploy
  cap trunk unicorn:restart

■ActieRecord-troubleshooting
 QuestChapter.all.map{|record| [record.id, record.quest_sections.count]}
 QuestChapter.where(id: 39).first.quest_sections
 QuestChapter.all.map(&:id)

■マスター管理スクリプト
[19:13:00] 純一 大島: bundle exec rake dxd:db:master:update

■コーディング規約
 #@jっていう変数名はインスタンス変数として使う場合は、意味の取れる名前に変更

 svn status| grep -niE "*rb$"



[-tmp-]
[-ecolinux-config-steps-]
[-vim-]
	[-vimScript-]
	[-vimWindowTab-]
[-RubyMainOTL-]
	[-hpricot-]
[-RailsApache-]
	[-railsDBapi-]
	[-rails_activescafhold-]
	[-hpricot-]#test
sudo /usr/local/apache2/bin/httpd& start
#mod_rails-passenger RailsMaxPoolSize =2でもlinode360で不安: mongrel cluster N=3 で50K/dayこえたら検討
#-----------------------------------------------------------------------------
you@ecolnux:~/RoRapps/2chnrg$ vmstat -S M
	you@ecolnux:~/RoRapps/2chnrg$ passenger Node=1 below
	procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
	 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
	 3  0    196      8      1     27    0    0    27    19  144   98  9 14 75  2
	you@ecolnux:~/RoRapps/2chnrg$ mongrel_cluster Node=1 below
	procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
	 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
	 2  0    126     13      4     41    0    0    27    19  144   98  9 14 75  2
	you@ecolnux:~/RoRapps/2chnrg$ mongrel_cluster Node=2 below
	procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
	 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
	 4  0    126      6      3     32    0    0    27    19  144   99  9 14 75  2
	-------------------------------------------------------------------------------
##Mongrel
	mongrelはスレッド起動などが無いため、1ポート1プロセス。後述するmongrel_cluster+Apache mod_proxyと併用します。
	# mongrel & mongrel_clusterのインストール。
		sudo gem install mongrel mongrel_cluster --include-dependencies
		cd RAILS_ROOT
		mongrel_rails stop
	#Apache2 状況確認
		/usr/local/apache2/bin/httpd -l
	#Apache2 rebuild
		wget http://example.com/path/to/httpd-2.2.3.tar.bz2
		tar jxf httpd-2.2.3.tar.bz2
		cd httpd-2.2.3
		#sudo ./configure --enable-proxy --enable-proxy-balancer
		sudo ./configure --enable-proxy --enable-proxy-balancer --enable-so --enable-ssl --with-ssl=/usr/bin/openssl --enable-modules=most
		sudo make
		sudo make install
	#case of DSO installable module
		apache2 mod_rewriteを後から追加（インストール）
		PHPをインストール済みの場合、あとからapacheを再インストールは大変です。*DSOでインストールされているか？を確認。されていればOK。
		/usr/local/apache2/bin/httpd -lを実行
			Compiled-in modules:
			http_core.c
			mod_so.c 　これがあれば makeをしないで追加できる

		*mod_rewriteをインストール
		ソースをDLした場所（例）に/home//source/httpd-2.2./modules/mappers/mod_xxx.cがあるか確認
			find -name * ./ |grep xxx

		cd /home//source/httpd-2.2./xxx/XXX/
		$ /usr/local/apache2/bin/apxs -i -a -c ./mod_xxx.c

		apacheの再起動で有効

	#一度設定ファイル(config/mongrel_cluster.yml)を作るようです。
		#Linode: mongrel_rails cluster::configure -a 127.0.0.1 -e production -p 3000 -N 3 -n10
			Writing configuration file to config/mongrel_cluster.yml.
			you@ecolnux:~/RoRapps/2chnrg$ cat config/mongrel_cluster.yml
			--- 
			address: 127.0.0.1
			log_file: log/mongrel.log
			port: "3000"
			num_procs: "10"
			environment: production
			pid_file: tmp/pids/mongrel.pid
			servers: 3
		#mongrel_cluster startでは、単に複数ポートでmongrelが起動しているだけ
		mongrel_rails cluster::start -v --clean
			mongrel_rails cluster::stop
		#手動起動	-Bを付けるとデバッグモードです。これつけるとかなり遅い。-n10で10個のスレッド起動ができる。
		mongrel_rails start -a 127.0.0.1 -d production -p 3000 -B
		#ロードバランスさせる必要があります。それはapacheのmod_proxyで実現。
		conf/httpd-proxy.conf & httpd.conf


		you@ecolnux:/usr/local/apache2/conf$ mongrel_rails start -h
			Usage: mongrel_rails <command> [options]
				-e, --environment ENV            Rails environment to run as
				-d, --daemonize                  Run daemonized in the background
				-p, --port PORT                  Which port to bind to
				-a, --address ADDR               Address to bind to
				-l, --log FILE                   Where to write log messages
				-P, --pid FILE                   Where to write the PID
				-n, --num-processors INT         Number of processors active before clients denied
				-o, --timeout TIME               Time to wait (in seconds) before killing a stalled thread
				-t, --throttle TIME              Time to pause (in hundredths of a second) between accepting clients
				-m, --mime PATH                  A YAML file that lists additional MIME types
				-c, --chdir PATH                 Change to dir before starting (will be expanded)
				-r, --root PATH                  Set the document root (default 'public')
				-B, --debug                      Enable debugging mode
				-C, --config PATH                Use a config file
				-S, --script PATH                Load the given file as an extra config script
				-G, --generate PATH              Generate a config file for use with -C
					--user USER
												 User to run as
					--group GROUP
												 Group to run as
					--prefix PATH
												 URL prefix for Rails app
				-h, --help                       Show this message
					--version                    Show version

		you@ecolnux:/usr/local/apache2/conf$ mongrel_rails cluster::configure -h
			Usage: mongrel_rails <command> [options]
				-e, --environment ENV            Rails environment to run as
				-p, --port PORT                  Starting port to bind to
				-a, --address ADDR               Address to bind to
				-l, --log FILE                   Where to write log messages
				-P, --pid FILE                   Where to write the PID
				-c, --chdir PATH                 Change to dir before starting (will be expanded)
				-o, --timeout TIME               Time to wait (in seconds) before killing a stalled thread
				-t, --throttle TIME              Time to pause (in hundredths of a second) between accepting clients
				-m, --mime PATH                  A YAML file that lists additional MIME types
				-r, --root PATH                  Set the document root (default 'public')
				-n, --num-procs INT              Number of processor threads to use
				-B, --debug                      Enable debugging mode
				-S, --script PATH                Load the given file as an extra config script.
				-N, --num-servers INT            Number of Mongrel servers
				-C, --config PATH                Path to cluster configuration file
					--user USER
												 User to run as
					--group GROUP
												 Group to run as
					--prefix PREFIX
												 Rails prefix to use
				-h, --help                       Show this message
					--version                    Show version

	■トラブルシューティング

	Railsはデフォルトのままでルートにアクセスするとdispacherがpublic/index.htmlに読み替えてWelcome Abord画面を表示するんだけど、これが不要だったからpublic/index.htmlを削除していた。これが直接的な原因っぽい。
	空ファイルでも良いのでindex.htmlを置いておけばエラーは出なくなるはず、という事でやってみた結果、エラーは出なくなった。


	$ mongrel_rails ?prefix /yuki
	こうすることで、link_toなどのHelperが正しいURLを作成できる

	Publicがおかしいので

	$ cd public
	$ ln -s . yuki
	自身へリンク、これでPublic内のImagesなども見れた

	script/serverコマンドは以下のように起動するサーバを指定できる。

	# ruby script/server webrick

	サーバを指定しない場合は、以下の優先順位を元に起動するサーバを決定する。

	   1. Mongrel
		  2. Lighttpd
			 3. WEBrick

			 よってMongrelをインストール後もscript/serverスクリプトを使えるが、

			 Mongrel専用の起動スクリプトを使うとscript/serverスクリプトには無いオプションを使うことが出来る。

			 # mongrel_rails start --prefix /myapp

			 のようにprefixオプションを使うと、http://localhost:3000/myappがアプリケーションルートになる。

			 アプリケーションごとに異なるprefixをつければ、ドメインが一つしかない場合でも手軽に複数のRailsアプリケーションを公開することが出来る。

	ProxyRequests Off
	<Proxy *>
	  Order deny,allow
		Allow from all
	</Proxy>
	ProxyPass / http://localhost:3000/

	以下の内容についてはapacheのmod_proxy、mod_proxy_balancerが有効になっていることが前提です。またパスは環境によって異なると思いますので参考までに。

	備忘録兼ねてますので途中の冗長な作業も書いてますがあしからず、です。

	■apacheのリバースプロキシの設定

	/etc/httpd/conf.d/のproxy.confの内容を以下のように変更します（ファイルがなければ作成）。

		# cd /etc/httpd/conf.d/
		# vi proxy.conf 

		ProxyRequests Off
		<proxy *>
		Order deny,allow
		Allow from all
		</proxy>

		ProxyPass /myapp1 balancer://mycluster1 lbmethod=byrequests
		ProxyPassReverse /myapp1 balancer://mycluster1
		<proxy balancer://mycluster1>
		BalancerMember http://127.0.0.1:3000/myapp1 loadfactor=10
		BalancerMember http://127.0.0.1:3001/myapp1 loadfactor=10
		BalancerMember http://127.0.0.1:3002/myapp1 loadfactor=10
		</proxy>

		ProxyPass /myapp2 balancer://mycluster2 lbmethod=byrequests
		ProxyPassReverse /myapp2 balancer://mycluster2
		<proxy balancer://mycluster2>
		BalancerMember http://127.0.0.1:4000/myapp2 loadfactor=10
		BalancerMember http://127.0.0.1:4001/myapp2 loadfactor=10
		BalancerMember http://127.0.0.1:4002/myapp2 loadfactor=10
		</proxy>

		#ロードバランス管理画面の設定
		<location /balancer-manager>
		SetHandler balancer-manager
		Order Deny,Allow
		Deny from all
		Allow from *.*. #管理画面を使用するクライアントやネットワークを指定
		</location> 

	これでmyapp1とmyapp2という二つのRailsアプリをそれぞれクラスタリングした状態でたてられます。

	ポート80で入った要求を、/myapp1ならポート3000?3002に /myapp2ならポート4000?4002に振り分けてやる訳です。

	※上の設定の場合、ロードバランサーの管理画面のURLは http://hoge/balancer-manager となります。

	proxy.confを修正したら設定を反映するためにapacheを再起動します。

		# cd /etc/rc.d/init.d
		# ./httpd restart 

	■mongrelのクラスター起動

		# cd hoge/myapp1
		# mongrel_rails cluster::configure -e production -p 3000 -N 3 ?prefix /myapp1
		# mongrel_rails cluster::start

		# cd hoge/myapp2
		# mongrel_rails cluster::configure -e production -p 4000 -N 3 ?prefix /myapp2
		# mongrel_rails cluster::start 

	※停止の時は mongrel_rails cluster::stop

	?rabbitonigiri
	(posted in the Ruby on Rails category)
	このエントリをdel.icio.usに追加このエントリをはてなブックマークに追加

	Find this post interesting? Besides commenting below, you can follow responses with the RSS 2.0 feed or trackback from your own site.
	2 Responses to “【Rails】mongrel cluster＆apacheのリバースプロキシで複数のアプリ共存”

	   1. maru says:
		  2月 29, 2008, 3:33:08

		  あん。
		  ?prefix /myapp1
		  じゃん
		  -prefix /myapp1
		  じゃなくて。

		  バージョン違いのせいかなー？




-------------------------------------------------------------------------------
#netbeans
	sudo gem install ruby-debug-ide 
	+
	plugin "jVi" install
#eclipse+radrails
	manually ownload last year's eclipse release.
	+
	install plugin "Vwrapper" 
	*back-upはeclipse & ~/.eclipse/

-------------------------------------------------------------------------------
##Passenger(mod_rails) by Lai HongLi & Ninh Bui
	■使ってみて
		なぜかNewsサイトではスタイルシートが有効化されない。
		あと速度がめちゃくちゃ遅かった。
		設定の問題かもしれないのでもう少しいじってみる。
	■参考リンク
		公式サイト　http://www.modrails.com/install.html
		マニュアル　http://www.modrails.com/documentation/Users%20guide.html
		http://rails20.jp/2008/04/passenger/

	■Prep
		passengerはmod_rewriteとmod_aliasと衝突する。
		mod_rewriteを使いたい場合、RailsAllowModRewriteを使えばよい。ただし、先述の問題を回避するために、.htaccessを削除するかリライトルールを書き換える必要がある。


		mod_rails(passenger)で起動すると、143Mほど確保		Linode 360 =360MB
		cf.　mongrelで動かしてみると、44Mほどメモリ確保
	　･passengerはrootでは動かないので、かならずrailsのディレクトリ以下の所有ユーザーはroot以外(apacheなど)にしておく
	   error ":nonexistence がでる。
		Railsアプリケーションが動作するユーザーは$RAILS_ROOT/config/environment.rbのオーナーとなりますが、 environment.rbがrootの場合はnobodyユーザーで動作します。このとき、オーナーがrootである$RAILS_ROOT/log ディレクトリや$RAILS_ROOT/tmpディレクトリに書き込みができず、アプリケーションが動作しないことがあります。
		useradd you
		passwd you
		chown -R you:you /root/2chnrg
		mkdir /home/you
	　* apache MPW(multi-process-worker)

	■ざっと手順だけ
	   1. Railsアプリを適当な場所にUP
	   2. DocumentRoot以下に[RAILSROOT]/publicへのシンボリックリンクを作成
	   3. httpd.confに設定を追加
	   4. Apache再起動

	■passengerをインストールsudo su /rootで全行程
		sudo su
		#Apacheはソースから入れたので環境変数を定義しておく。
		export APXS2=/usr/local/apache2/bin/apxs;export PATH=/usr/local/apache2/bin/:$PATH
		sudo gem install fastthread passenger
		passenger-install-apache2-module
		passengerのインストールが完成したら、apacheに組み込む。
			* GNU C++ compiler... not found
			* Ruby development headers... found
			* OpenSSL support for Ruby... found
			* RubyGems... found
			* Rake... found at /usr/bin/rake
			* Apache 2... found at /usr/sbin/apache2
			* Apache 2 development headers... not found
			* Apache Portable Runtime (APR) development headers... not found
			* fastthread... found
		not found(赤字）がある場合は、それぞれインストールをする。
		今回のケースだと次のとおり
			% sudo apt-get install build-essential
			% sudo apt-get  install apache2-threaded-dev 
	  


		$ sudo apt-get install apache2-prefork-dev
	　色々ないけど、教えてやるよーという親切インストーラー教えてくれた結果が以下
			Installation instructions for required software
			* To install Apache 2 development headers:
			Please run yum install httpd-devel as root.
		   * To install Apache Portable Runtime (APR) development headers:
			Please run yum install apr-devel as root.
			* To install Apache Portable Runtime Utility (APU) development headers:
			Please download it from http://httpd.apache.org/
			(APR Utility is an integrated part of Apache.)

	　自分の場合、yum install httpd-develでapr-develもインストールされた。
	　インストール終了。その後もhttpd.confに追記する箇所や、バーチャル設定の書き方を教えてくれるのでメモ。

			The Apache 2 module was successfully installed.
		
			Please edit your Apache configuration file, and add these lines:
		
			LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.2.2/ext/apache2/mod_passenger.so
			PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-2.2.2
			PassengerRuby /usr/bin/ruby
		
			Deploying a Ruby on Rails application: an example
		
			Suppose you have a Ruby on Rails application in /somewhere. Add a virtual host
			to your Apache configuration file, and set its DocumentRoot to
			/somewhere/public, like this:

	■ append to httpd.conf
	   LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.2.4/ext/apache2/mod_passenger.so
	   PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-2.2.4
		PassengerRuby /usr/bin/ruby1.8

	■Virtualhost設定例：
			<VirtualHost *:80>
			ServerName www.yourhost.com
			DocumentRoot /somewhere/public # <-- be sure to point to 'public'!
			</VirtualHost>
	■Virtualhost設定例a2：http://hogerails/redmine
		<VirtualHost *:80>
		 ServerName hogerails
		 DocumentRoot /var/hoge/rails
		 RailsBaseURI /redmine
		 RailsBaseURI /hogesys
		</VirtualHost>
		この設定の場合、/var/hoge/rails/redmineとしてシンボリックリンクを作ればOKです

		# モジュールとサイトを有効にする
		$ sudo a2enmod rails
		% sudo a2ensite [virtual-host-name]
		Apacheの再起動
		% sudo /etc/init.d/apache2 restart
	■トラブルシューティング
	　･下記のようなエラーがhttpdのエラーログに出ていたら
		 *** Passenger ERROR (ext/common/ApplicationPoolServer.h:602):
		Cannot execute /usr/lib/ruby/gems/1.8/gems/passenger-2.2.2/ext/apache2/ApplicationPoolServerExecutable: 許可がありません (13)
		[Wed May 13 11:22:46 2009] [notice] SELinux policy enabled; httpd running as context root:system_r:httpd_t:s0
		[Wed May 13 11:22:46 2009] [notice] suEXEC mechanism enabled (wrapper: /usr/sbin/suexec)
	　以下のように対応
		#setenforce 0
		
	   *undefined method `cache_template_loading=' for ActionView::Base:Class
		config/environments/production.rbの以下の記述をコメントアウト
		# config.action_view.cache_template_loading = true

	   *CGI::Session::CookieStore::TamperedWithCookie ?
		ブラウザのクッキーをクリア

	   *no such file to load -- application
		config/environments以下の設定ファイル
		#config.cache_classes = true	#"require"でモジュールをロード
		config.cache_classes = false	#falseにすると"load"を使う everytime

	   *route missing	500
		# in config/environments/production.rb
		（略）
		config.action_controller.relative_url_root='/hogesys'

	## Passengerのチューニング
	いずれもhttpd.conf中で設定します。なお、これらはApache全体に対する設定であり、バーチャルホストごとの指定はできません。
		RailsMaxPoolSize Apacheサーバ上で生成するRailsのインスタンス数を設定します。
		デフォルト値は20ですが、メモリが少ない環境では減らすことを検討してください。アクセスが集中した際にメモリが不足して極端にレスポンスが悪化する恐れがあります。"Passenger Users Guide":http://www.modrails.com/documentation/Users%20guide.html では、メモリ256MBのVPS環境では2、2GBのメモリを搭載したサーバでは30が推奨されています。
		RailsPoolIdleTime Railsインスタンスへのリクエストがこの設定値以上の時間無かった場合に、インスタンスを終了させます。
		デフォルト値は120(秒)です。この値が小さすぎると、インスタンスの生成・終了が頻繁に行われることになりレスポンスが悪化します。逆に大きすぎると必要以上に長時間メモリを占有されてしまいます。Passenger Users Guideでは、ユーザーのwebサイト上の平均滞在時間の2倍を推奨しています。例えば1回のRedmine上での平均的な作業時間が5分の場合、推奨設定値は600(秒)です。
	Passenger 2.0.6以降でGlobal Queuingを有効にするには、Apacheの設定ファイルで以下の設定を行います。
		PassengerUseGlobalQueue on
	passenger-statusコマンド
	autoindex: Aliasを切ったディレクトリに対して PassengerEnabled off

i#passenger高速化
	RailsアプリをPassengerを使ってApacheでホストしてる場合、リクエストがあるとアプリがインスタンス化されます。次回リクエストがあったときにア
	プリのインスタンスが存在すれば、レスポンスが速くなります。


	デフォルトでは、300秒でインスタンスは削除されます。ということは、インスタンスをずっと保持しておけば、レスポンスは最速なわけです。その設
	定が、これ。httpd.confに書きます。

	PassengerPoolIdleTime 0

	Railsの表示高速化にて動的なイメージやCSSをキャッシュファイルとする作戦¶
	イメージやCSSなどを、管理者が更新したりする場合で、イメージやCSSはpublicなところにおいてもよい場合
	イメージやCSSを動的に生成するためのコントローラを作成し、キャッシュ保存先を本来のpublic内部に設定する
	管理者がイメージを登録した際に、publicにキャッシュファイルが作成され、観覧時には常にそれを見るようになる
	管理者がイメージを削除した際には、publicからキャッシュファイルが削除されるので、観覧する人はイメージがみられなくなる


-------------------------------------------------------------------------------
#サーバー機能飽和したらアパッチ再構成 a2dismod asis alias status log_config auth_basic authn_file authz_groupfile authz_hosts
	#" rails passenger 不要 a2dismod " disable needless apache modules to speed up
	初期ロード　*] core *] mod_env
	ACCEPTヘッダ認識用途 *] mod_negotiation
	#perlなどCGI *] mod_cgi *] mod_actions
		DIR~ 処理 *] mod_dir *] mod_userdir *] mod_autoindex
		SSI	*] mod_include
	#PASSENGER	*] prefork
	#多分永久に使わない
		HTTP-response-headerかきかえ　*] mod_asis
		URL変換とリダイレクト用途 *] mod_alias
		送信状況表示用 *] mod_status
	#Land.toと統合後再組み込み
		*] mod_log_config
		*] mod_auth_basic
		*] mod_authn_file
		*] mod_authz_groupfile
		*] mod_authz_host

#prod config/environments/*** loglevel=:error 

-------------------------------------------------------------------------------
#ActiveScafFold
	  rails/plugin/ActiveScaffold
	  <http://a01.biz/wiki/index.php?plugin=related&page=rails%2Fplugin%2FActiveScaffold>


	rails <http://a01.biz/wiki/index.php?rails>


		ActiveScaffold? <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#pad09b43>

		* ActiveScaffold <#pad09b43>
		* 説明 <#r5efc1c0>
		* Rails2.0対応について <#tdf140e2>
		* インストール <#f5945e80>
		* 使い方 <#z0bcefa8>
			  o 単純な使いかた <#l8e6567c>
			  o ActiveScaffoldの設定 <#f9d88981>
					+ 基本的な内容 <#tb58f8ce>
					+ ページあたりの表示数を指定 <#k568981c>
					+ listの並び順を設定 <#hfc102c7>
					+ 表示するカラムと順番を指定する <#u8058cd7>
					+ カラムのタイトルを日本語にしたい <#v39cab5e>
			  o 2008-03-25 ActiveScaffoldメニューの日本語化 <#u3d32f28>
			  o （旧）ActiveScaffoldメニューの日本語化【2008-03-25 プラグイ
				ン化されているので必要無し】 <#y923029c>
			  o 表示方法を変更するには? <#l7158af5>
			  o 共通の設定をするには? <#rfe3e821>
			  o 不要なメニューを消すには? <#s0686d65>
		* 公式サイト翻訳 <#jab9de3b>
			  o API:Core <#s357815c>
					+ actions (global local) <#n70189f0>
					+ action_links (global local) <#yf541d11>
					+ columns <#p74d1ff1>
		* リンク <#e070a68c>

	説明 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#r5efc1c0>
	そのままではまともに使えないScaffoldに変わり、そのままでもかなり使える Viewを動的に作成してくれます。 Viewの開発を劇的に楽にします。
		Rails2.0対応について † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#tdf140e2>
	基本的な部分は問題なく使えるが、ソートをしようとするとエラーになる。 もしかしたらpostgresql特有の問題かも・・・
	インストール † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#f5945e80>
		Rails2.0～ 2007/1/9 時点
			$ script/plugin install http://activescaffold.googlecode.com/svn/tags/1.1.0_rc1
			$ mv vendor/plugins/1.1.0_rc1/ vendor/plugins/active_scaffold
		Rails1.～
			$ script/plugin install http://activescaffold.googlecode.com/svn/tags/active_scaffold
	単純な使いかた † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#l8e6567c>
	コントローラに宣言を追加する
		$ vi app/controllers/admin_controller.rb 
		class AdminController < ApplicationController
		  active_scaffold :user
		  layout "activescaffold"
		end

	ActiveScaffold? 用のレイアウトを追加 <http://a01.biz/wiki/index.php?cmd=edit&page=ActiveScaffold& refer=rails%2Fplugin%2FActiveScaffold>
		Rails2 $ vi app/views/layouts/activescaffold.erb
		Rails1 $ vi app/views/layouts/activescaffold.rhtml
			ファイル内容
			<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
			<html>
			  <head>
				<title>My Application</title>
				<%= javascript_include_tag :defaults %>
				<%= active_scaffold_includes %>
			  </head>
			  <body>
				<%= yield %>
			  </body>
			</html>

	ActiveScaffoldの設定 †
	基本的な内容 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#tb58f8ce>
	設定をしたい場合はブロックで囲む
	config.xxx=は全体の設定 config.listやconfig.showなどはlist、show個別の設定になる。

		active_scaffold :product do |config|
		  config.label = "商品"
		  config.list.per_page = 2 
		  config.list.sorting ={:name => :asc }
		end 


		ページあたりの表示数を指定 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#k568981c>
			config.list.per_page = 20
					listの並び順を設定 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#hfc102c7>
			config.list.sorting = {:name => :asc}

		表示するカラムと順番を指定する † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#u8058cd7>
			columnsを書くと表示する順番を指定できる。
			config.columns = [:name, :note, :items]
			表示順は書いた順番になる。 全体設定なのでlistだけでなく、showもeditも同じ順番になる。 itemsの様に親子関係の場合も指定可能

		カラムのタイトルを日本語にしたい † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#v39cab5e>
			config.columns[:name].label = "商品名"
			config.columns[:note].label = "メモ"

		カラム関係のメソッド
			label	カラム名	String
			description	補足説明(編集時)	String
			required	必須項目	true|false
			ui_type	関連の選択設定	:crud|:select
			search_sql	SQLの条件節	true|String

	2008-03-25 ActiveScaffold? メニューの日本語化 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#u3d32f28>
		$ script/plugin install http://svn2.assembla.com/svn/activescaffold_japanese_l10n
			  【2008-03-25 プラグイン化されているので必要無し】 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#y923029c>
		urekatのスカンク日記３ <http://d.hatena.ne.jp/urekat/20071110/>さんのと ころの通りでOK

		libにactive_scaffold_localization.rbを作成
		$ vi lib/active_scaffold_localization.rb
			# http://activescaffold.com/docs/localization-reference
			class Object
			  AS_JP_MAP = {
				"Replace With New" => "新しい値に置き換える",
				"Edit"             => "編集",
				"Show"             => "表示",
				"Update"           => "更新",
				"Delete"           => "削除",
				"Search"           => "検索",
				"Create New"       => "新規作成",
				"Reset"            => "リセット",
				"hide"             => "隠す",
				"show"             => "表示",
				"Cancel"           => "キャンセル",
				"Found"            => "件見つかりました。",
				"Create"           => "作成",
				"Close"            => "閉じる",
				"No Entries"       => "データがありません",
				"Live Search"      => "リアルタイム検索",
				"Search Terms"     => "検索ワード",
				"Create %s"        => "%sの新規作成",
				'Create Another'   => "追加",
				'Add From Existing'=> "既にあるものを追加(Add From Existing)",
				'- select -'       => "-- 選択 --",
				'Remove'           => "除外",
				'Previous'         => "前",
				'Next'             => "次",
				'%s for %s'        => "%2$s の %1$s (%1$s for %2$s)",
				'Update %s'        => "%sの編集",
				'Are you sure?'    => "本当によろしいですか？",
				'Request Failed (code 500, Internal Error)' => "エラーが発生しました。",
				'Created %s'       => "%s を作成しました。",
				'Deleted %s'       => "%s を削除しました。",
				'Updated %s'       => "%s を更新しました。",
				"Version inconsistency - this record has been modified since you started editing it." => "更新が衝突しました。",
				'Show %s'          => "%s の表示"
			  }
			  alias_method :as__without_jp, :as_
			  def as__with_jp(*args)
				pars = args.dup
				fmt = pars.shift
				text = AS_JP_MAP[fmt]
				if text
				  text = text % pars unless pars.empty?
				  return text
				end
				return as__without_jp(*args)
			  end
			  alias_method :as_, :as__with_jp
			end

		ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS[:default] = "%Y/%m/%d %H:%M"
		ActiveSupport::CoreExtensions::Date::Conversions::DATE_FORMATS[:default] = "%Y/%m/%d %H:%M"

		environment.rbの最後に追加
			$ vi config/environment.rb
			require "active_scaffold_localization"

		サーバ再起動
		$ script/server


	表示方法を変更するには? † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#l7158af5>
	表示方法を変更するには、ヘルパーを利用する。
	|カラムの表示方法|(カラム名)_column(record)
	|Formの表示方法|(カラム名)_form_column(record, name)
		module AdminHelper
		  def release_date_column(record)
			record[:release_date].strftime("%Y-%m-%d")
		  end

		  def release_date_form_column(record,name)
			input(:record, :release_date, :name => name, :order => [:year, :month, :day], :use_month_numbers => true, :start_year => 1970)
		  end
		end

		  共通の設定をするには? † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#rfe3e821>
	applicationControllerでAjaxScaffold? .set_defaultsを指定すると全体の共 通設定が可能。 <http://a01.biz/wiki/index.php?cmd=edit&page=AjaxScaffold& refer=rails%2Fplugin%2FActiveScaffold>

		  不要なメニューを消すには? † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#s0686d65>

	conf.actions.exclude :delete, :show, :create, :update, :search

	:editではなく:updateなので注意

	公式サイト翻訳 † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#jab9de3b>

	  API:Core † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#s357815c>

		actions (global local) † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#n70189f0>

	使用するアクションを指定する(指定しないばあいは全部使う)

	conf.actions = [:create, :update, :show]

	使わないアクションを指定する

	conf.actions.exclude :create

	配列で渡せばまとめて指定できる

	conf.action.exclude = [:create, :delete]

	アクションを使える様にする

	conf.actions.add :delete

	アクションを変更する(:search専用?)

	conf.actions.swap :search, :live_search

			action_links (global local) † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#yf541d11>

	アクションを追加する

	conf.action_links.add 'get_pdf', :label => 'Download PDF'

	アクションの名称を変更

	conf.action_links['get_pdf'].label = "Save PDF"

	アクションを追加(簡易版)

	conf.action_links << 'print_pdf'

	標準のアクション名を変更する

	conf.show.link.label = "Display Record"

	列毎にMenuを表示する

	conf.action_links.add 'GetRss', :type => :record, :action => 'get_rss'

	アクションの説明

	:action	'action_name'	指定したアクションを実行する
	:controller	'controller_name'	コントローラを指定する
	:parameters		その他のパラメータを指定
	:method	:get :post :put :delete	メソッドを指定する
	:type	:table :record	全体かレコードかを指定
	:label	'label_name'	表示用ラベルを指定

	:confirm		確認? The confirmation message for the link	if any.

	:security_method		
	:crud_type		:create :read :update :destroy
	:inline	true false	ActiveScaffold? で表示するか?
	:page	true false	

			columns † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#p74d1ff1>
	カラムの追加

	conf.columns.add :name
	conf.columns << :sort_no

	まとめて追加

	conf.columns = [:name, :sort_no]

	listに対する編集

	conf.list.columns = [:name, :sort_no]

		リンク † <http://a01.biz/wiki/index.php?rails%2Fplugin%2FActiveScaffold#e070a68c>
		ActiveScaffold公式サイト(英語) <http://www.activescaffold.com/>
		ActiveScaffold を使って Ruby on Rails を機能アップする <http://www.ibm.com/developerworks/jp/linux/library/l-activescaffold/>
		2007-11-10 優しいRailsの育て方 <http://wota.jp/ac/?date=20071110>

	 新規
		<http://a01.biz/wiki/index.php?plugin=newpage&refer=rails%2Fplugin%2FActiveScaffold>
		http://a01.biz/wiki/index.php?cmd=rss&ver=1.0>
		Last-modified: 2009-01-04 (日) 19:17:31 (118d)
		Link: rails <http://a01.biz/wiki/index.php?rails>(118d)
		Site admin: anonymous <http://a01.biz/wiki/>

-------------------------------------------------------------------------------
#Version1.2.x and 2.x-----------------------------------
		minorio のプログラミング・メモ
		RSS2
		<[OSX][Ruby on Rails][WEB制作] ... | [Ruby on Rails][Rails 2.0] Rai...>
		2008-04-26
		■[OSX][Rails 2.0][RadRails][Ruby on Rails] Aptana RadRails を使った Scaffold の作成（RAILS 2.0 の場合） 14:12

	どうも『RailsによるアジャイルWebアプリケーション開発 第2版』の6.1章の通りにやっても Scaffold がうまく作成されないようなので、Rails 2.0 流のやり方をメモしておく。

		* phpMyAdmin で depot_development という名のデータベースを作っておき、RadRails で新規 Rails プロジェクトとして depot を作成
		* depot/config/database.yml ファイルを開いてデータベースのユーザー名、パスワード、ソケットなどを適切に設定

	本ではこのあと、モデルの作成（データベースマイグレーション）、コントローラーの作成、Scaffold の作成と進むことになっているのだけど、
	Rails 2.0 の場合、ここを scaffold 一発でやってしまえばいいみたい。
	Ruby エクスプローラーで depot プロジェクトが選択されていることを確認した上で、「ジェネレーター」タブから scaffold を選択、パラメーターに
	product title:string description:text image_url:string

	と入れて実行。
	これでマイグレーションファイル（db/migrate/20080427053115_create_products.rb）、
	コントローラーファイル（app/controllers/products_controller.rb）も一気に生成される。
	Rails 2.0のscaffoldを使ってみた
	教科書の例では admin コントローラーから product というモデルを操作するという構造になっているのだけど、2.0 の scaffold を使うとコントローラー名とモデル名も自動的に関連づけられるみたいだ（この場合はモデル名 product に対して、コントローラー名、View名が products と複数形になる）。
	scaffold のあと、「Rake タスク」タブから db:migrate を実行すると、データベースにテーブルが作成される。
	サーバー（WEBrick サーバー）を起動してブラウザーから http://127.0.0.1:3000/products にアクセスすると、空の Product リストが表示され、レコードの追加、修正、削除などのページが自動生成されていることが確認できた。
	教科書も Rails 2.0 対応だったらよかったんだけど・・。けっこういろいろ変わっているようなので、もう１冊そういう本を買っておいてもいいかも。

	Rails 2.0 - 初心者がすべきことは？

		作者 Rick DeNatale, 翻訳者 岡田 英久 投稿日 2008年1月8日 午前6時24分
		Rails 2.0.0、2.0.1、そして 2.0.2 という最近の矢継ぎ早なリリースに伴い、Rails サポートディスカッショングループには新しい Rails ユーザからの多くの問い合わせ(source)が届いている。彼らは Dave Tomas 氏と David Heinemeier Hansson 氏が執筆した書籍『 Agile Web Development with Rails 』（訳書のタイトルは『 Rails によるアジャイル Web アプリケーション開発』）のような有名なチュートリアルに従うことに疑問を感じている。書名の頭文字をとって一般に AWDR と呼ばれている Tomas 氏と Hansson 氏のその書籍は、すでに第二版が出版されているが、それも一年前のことで、 Rails 1.2 しかカバーしていない。
		Rails 2.0 と前バージョンである Rails 1.2 との違いは、Rails 1.2 と Rails 1.1 との間の違いに比べれば微々たるものだが、そこには疑うことを知らない新規ユーザをつまずかせるのに十分な大きさの落とし穴がある。
		Rails 2.0 のテーマのひとつはフレームワークのスリム化である。それにより、これまでは標準だったいくつかの機能がコア部分から削除され、プラグインとして提供されるようになった。
		1.2 をベースにしたチュートリアルに従っている人はそこでつまずく可能性がある。次に二つの例を挙げる。

		   1. 多くのチュートリアルではデータベースに MySQL を使っている。それは MySQL が Rails のデフォルトだったからだが、Rails 2.0.3 ではデフォルトが SQLite3 に変更(source)された。AWDR は後ろのほうで SQLite3 の使い方について説明しているが、チュートリアルを辿っている新規ユーザにとっては、問題にぶつかった時点でそれを自力で解決するための備えにはならないかもしれない。
		   2. AWDR の最初のほうで Rails のダイナミックな scaffold 機能を使用するが、現在のバージョンでは scaffold は次のようにプラグインをインストールした後でないと使用することができない。
						script/plugin install scaffolding 

			  このように Rails 2.0 で削除された機能には他に、AJAX を使ったインプレイスエディタやオートコンプリート、そして有名な act as モデル拡張のいくつかが含まれる。
			  削除された機能を提供していると思われるものを利用可能なプラグインの中から探したければ、記のコマンドを実行するとよい。
						script/plugin list 

					you@ecolnux:~/RoRapps/2chnrg$ ruby script/plugin list
					account_location              http://dev.rubyonrails.com/svn/rails/plugins/account_location/
					acts_as_list                  http://dev.rubyonrails.com/svn/rails/plugins/acts_as_list/
					acts_as_nested_set            http://dev.rubyonrails.com/svn/rails/plugins/acts_as_nested_set/
					acts_as_tree                  http://dev.rubyonrails.com/svn/rails/plugins/acts_as_tree/
					atom_feed_helper              http://dev.rubyonrails.com/svn/rails/plugins/atom_feed_helper/
					auto_complete                 http://dev.rubyonrails.com/svn/rails/plugins/auto_complete/
					continuous_builder            http://dev.rubyonrails.com/svn/rails/plugins/continuous_builder/
					deadlock_retry                http://dev.rubyonrails.com/svn/rails/plugins/deadlock_retry/
					exception_notification        http://dev.rubyonrails.com/svn/rails/plugins/exception_notification/
					http_authentication           http://dev.rubyonrails.com/svn/rails/plugins/http_authentication/
					in_place_editing              http://dev.rubyonrails.com/svn/rails/plugins/in_place_editing/
					javascript_test               http://dev.rubyonrails.com/svn/rails/plugins/javascript_test/
					legacy                        http://dev.rubyonrails.com/svn/rails/plugins/legacy/
					localization                  http://dev.rubyonrails.com/svn/rails/plugins/localization/
					open_id_authentication        http://dev.rubyonrails.com/svn/rails/plugins/open_id_authentication/
					scaffolding                   http://dev.rubyonrails.com/svn/rails/plugins/scaffolding/
					scriptaculous_slider          http://dev.rubyonrails.com/svn/rails/plugins/scriptaculous_slider/
					ssl_requirement               http://dev.rubyonrails.com/svn/rails/plugins/ssl_requirement/
					token_generator               http://dev.rubyonrails.com/svn/rails/plugins/token_generator/
					tzinfo_timezone               http://dev.rubyonrails.com/svn/rails/plugins/tzinfo_timezone/
					tztime                        http://dev.rubyonrails.com/svn/rails/plugins/tztime/
					upload_progress               http://dev.rubyonrails.com/svn/rails/plugins/upload_progress/
					lib                           svn://rubyforge.org/var/svn/betternestedset/trunk/lib/
					test                          svn://rubyforge.org/var/svn/betternestedset/trunk/test/
					lib                           svn://rubyforge.org/var/svn/betternestedset/trunk/lib/
					test                          svn://rubyforge.org/var/svn/betternestedset/trunk/test/
					comatose                      http://mattmccray.com/svn/rails/plugins/comatose/
					doozer                        http://mattmccray.com/svn/rails/plugins/doozer/
					encrypted_column              http://mattmccray.com/svn/rails/plugins/encrypted_column/
					gravatar_helper               http://mattmccray.com/svn/rails/plugins/gravatar_helper/
					labeled_form_builder          http://mattmccray.com/svn/rails/plugins/labeled_form_builder/
					radiant_behavior_filters      http://mattmccray.com/svn/rails/plugins/radiant_behavior_filters/
					radiant_mailer_behavior       http://mattmccray.com/svn/rails/plugins/radiant_mailer_behavior/
					radiant_password_protected_behaviorhttp://mattmccray.com/svn/rails/plugins/radiant_password_protected_behavior/
					rendered_column               http://mattmccray.com/svn/rails/plugins/rendered_column/
					tags                          http://mattmccray.com/svn/rails/plugins/tags/
					theme_support                 http://mattmccray.com/svn/rails/plugins/theme_support/
					comatose                      http://mattmccray.com/svn/rails/plugins/comatose/
					doozer                        http://mattmccray.com/svn/rails/plugins/doozer/
					encrypted_column              http://mattmccray.com/svn/rails/plugins/encrypted_column/
					gravatar_helper               http://mattmccray.com/svn/rails/plugins/gravatar_helper/
					labeled_form_builder          http://mattmccray.com/svn/rails/plugins/labeled_form_builder/
					radiant_behavior_filters      http://mattmccray.com/svn/rails/plugins/radiant_behavior_filters/
					radiant_mailer_behavior       http://mattmccray.com/svn/rails/plugins/radiant_mailer_behavior/
					radiant_password_protected_behaviorhttp://mattmccray.com/svn/rails/plugins/radiant_password_protected_behavior/
					rendered_column               http://mattmccray.com/svn/rails/plugins/rendered_column/
					tags                          http://mattmccray.com/svn/rails/plugins/tags/
					theme_support                 http://mattmccray.com/svn/rails/plugins/theme_support/

		別の選択肢は Rails 1.2.6 を使ってチュートリアルを一通り終え、その後で 2.0 への移行を検討することだ。
		まずは次のコマンドを実行して Rails 1.2.6 をインストールしよう。
			gem install rails --version 1.2.6 

	次に、すでにインストール済の Rails 2.0.x 用 gems パッケージを削除するか、もしくはプロジェクトを作成する際の Rails コマンドで次のようにバージョン番号を指定すればよい。
		gems を使ってインストールしたほとんどのコマンドは gem 内のコードを実行するラッパーである。
	それらのコマンドでは、左右にアンダースコアを付加したバージョン番号を最初の引数として与えて実行することにより、gem のバージョンを指定することができる。
		rails _1.2.6_ my_rails_project 

		Obie Fernandez 氏(source)が書いた『 The Rails Way (source)』のように、現時点で入手可能な Rails 2.0 対応書籍もすでにいくつか存在する。
		しかし、今までのところ、それらは全て多少 Rails に触れた経験をもっているユーザのための情報源を目指しているように思える。
		古い Rails 文献のいくつかは、時が経てば必ず更新されて、新しいチュートリアルが盛り込まれることになるだろう。
		さしあたり Rails の新規ユーザに与えられている選択肢は二つだ。前バージョンからの変更点にぶつかったらひたすら苦労して切り抜けるか、
		あるいは恐らくより賢明な方法として、ある程度のレベルに達するまではチュートリアルに合わせたバージョンの Rails を利用するかである。
		原文はこちらです：http://www.infoq.com/news/2007/12/rails-20-docs

	Old vs. New

	work$ rails exchange
	work$ rails -d mysql exchange
	exchange$ ruby script/generate scaffold Movie title:string description:text one_sheet_url:string
	  * Installed Rails
		#gem install rails --include-dependencies

	  * Created an aplication with the rails command
		$rails exchange

	  * Created the databases for the application with the rake command
		$ rake db:create:all

	  * Used the script/generate command to create the scaffolding for the application
		$ ruby script/generate scaffold Movie title:string description:text one_sheet_url:string

	  * Created the database table using the generated migration file
		$ rake db:migrate

	  * Started the webserver with the script/server command
		$ ruby script/server

	  * Pointed our web browser to the application and started entering and editing data
		http://localhost:3000/movies





-------------------------------------------------------------------------------
Railsでデバッグをする７つの方法
	------------------

	記事の引越しから漏れていたのでサルベージ。

	secondlifeさんの記事 に反応して後で書こうかなあと思っていたら、大分時間がたってしまいましたが、めげずに書いてみます。

	1. p/pp
		  こちらはRailsに限らず良く使われている方法ですが、RailsではWebサーバをフォアグラウンドプロセスとして立ち上げた状態で使う感じになります。

	  ???1? $ ./script/server

	p/ppに慣れている人にはわかりやすくて良いと思います。

	2. logger.deb ug
		  さて、続いてlogger.deb ugを使う方法です。
			???1? logger.debug "something interesting information"

		  p/ppの代わりにlogger.deb ugを呼ぶ事で、結果がlog/develo pment.logなどのlog/$RAILS_ENV. logファイルに書き出されます。 書き出されたファイルを、
			???1? $ tail -f log/development.log

		  しておくと、p/ppでデバッグする時と同じような感じでデバッグ出力を見る事が出来ます。また、出力結果はlogファイルとして残っているので、後で参照する事もできます。

	3. script/con sole
		  script/con soleは、実行時にデータベースの中身がどうなっているかを知りたい時に非常に便利です。script/con soleコマンドを実行すると、Railsの環境を読み込んだ状態でirbが立ち上がるので、ActiveRecordを使ってfindしたりcreateしたりdestroy_al lしたり、好きなようにDBをいじる事ができます。本当に素晴らしい機能ですね。

	4. script/bre akpointer
		  script/con soleはとても素晴らしいのですが、アクション実行中のsessionの状態を調べたりするのには使えません。そんな時は、script/bre akpointerを使う事ができます。
			???1? $ ./script/breakpointer

		  まず、あらかじめbreakpoint erを立ち上げておきます。続いて、状態を確認したい場所にbreakpoint を仕込みます。
			???1? class FooController &lt; ApplicationController
			???2?   def bar
			???3?     # something
			???4?     breakpoint
			???5?     # something
			???6?   end

		  あとは、ブラウザからアクセスしてbarアクションを実行すると、待ち受けていたbreakpoint erでirbが立ち上がるので、必要な情報を自由に閲覧・操作する事ができます。

	5. better rails debugger
		  script/bre akpointerはとても便利ですが、ステップ実行が出来ないという問題があります。 実際にステップ実行がどうしても必要という場面はあまり無いのですが、あればあったほうが便利ですね。そんな時は、ruby-debug というGemを使います。
		  これは前回のRails勉強会のときにyuguiさんから教えていただいた方法なのですが、まずはruby-debug をインストールします。
			???1? # gem install ruby-debug

		  次に、ブレークポイントを仕込みます。
			???1? class FooController &lt; ApplicationController
			???2?   def bar
			???3?     # something
			???4?     debugger
			???5?     # something
			???6?   end

		  あとは、p/ppデバッグをするときのようにWebrickやMongrel等のWebサーバをフォアグラウンドで立ち上げ、目的のコードが実行されるようにブラウザからアクセスします。
		  すると、Webサーバのプロセス上でdebug.rb（と似たような感じのもの）が立ち上がるので、通常のrubyスクリプトを デバッグする時と同じ要領でデバッグを行う事ができます。

	6. test/autot est
		  Ruby on Railsでは、テスト用のフレームワークがはじめから使える状態になっています。
		  テスト駆動開発では、テストを書いてから実装を書きますが、適当な動作検証用のコードをテストとして書くことで、デバッグに使う事もできます。この際、毎回テストをrakeコマンドから実行するのは時間が掛かるので、ZenTestのautotestを使うのがお勧めです。
		  autotestを使うと、編集されたファイルに関連するテストだけを実行してくれるので、rakeコマンドを実行するよりも軽快なレスポンスが得られます。さらにredgreenを併用すると気分良くデバッグを行う事ができるのでお勧め。

	7. tail -f log/develo pment.log&; autotest

		  最後に、僕が今使っている方法を紹介します。 開発用とは別に一つターミナルを立ち上げて、RAILS_ROOT で以下のコマンドを実行。
			???1? $ tail -f log/development.log&amp;; autotest

		  こうしておくと、プログラムやテストコードを編集した時はautotestの出力が表示され、ブラウザからアクセスした時にはロガーの出力が表示されます。 基本的に両者が同時に行われる事は無いので、一つのターミナルを有効利用する事ができておすすめ。

	というわけで、Railsでデバッグを行う方法の紹介でした。

	posted by {Png} genki on Wed 21 Nov 2007 at 12:38

	Similar Articles:
	+++++++++++++++++

	  1. FireBug for IE? by {Png} genki

	  2. Seven Debugging Tools of Rails by {Png} genki

	  3. Rails 2.0でデバッグをする新しいやり方 by {Png} genki

	  4. Railsのドキュメントが要らなくなる（事もある）方法 by {Png} genki

	  5. XcodeのgdbでObjective-Cのメソッドを呼び出す by {Png} genki





	January 2008 December February

	  * 31

	11th Fri



	Rails 2.0でデバッグをする新しいやり方
	-----------------------

	比嘉さんからciteされたみたいなので、取り急ぎ新しい情報を吐き出しておこうと思います。

	そろろろRailsについて本音を書いてみるか

	  後、デバッグの環境は、Javaに比べて貧弱だと思う。Railsでデバッグをする７つの方法を見てほしい。IDEでソースにブレークポイントを設定(ソースコードを書き換えるのではなく)して、ステップイン、ステップオーバー、メモリの状態を見たりなんてのに慣れているJavaから比べると、すっごく大変に見える。

	喜ばしいことに、Rails 2.0ではruby-debug を使ったdebuggerが正式に採用されました。 これの使い方は非常に簡単です。
	まずは、以下のようにブレークポイントをコード中に書き込みます。
	  ???1? def some_method
	  ???2?   debugger # breakpoint
	  ???3? end

	続いて、Webサーバをデバッグモードで実行します。
	  ???1? % ./script/server -u

	これだけです。あとは、実際にブレークポイントを仕掛けた 場所が実行されるようにすれば、gdbライクなruby-debug の セッションが開始されます。 ruby-debug は、gdbと同じように、ステップ実行、ステップオーバー等の逐次実行を行うインターフェイスがあるので、
	コードの動作を確認しながらデバッグを行うことができます。

	gdbになれていない人には、irbコマンドを実行することで、 その場でirbを立ち上げることができます。これは非常に便利ですね。

	参考までに、debuggerから実行できるコマンドのリストを 載せておきます。
	  ???1? backtrace break catch cont delete display down eval exit finish frame help irb list method next p pp quit reload restart save script set step thread trace undisplay up var where

	See Also

	  *  MOONGIFT: ? Railsのデバッグのお供に「ruby-debug」:オープンソースを毎日紹介

	更新履歴

	  * 2008/01/21 See Alsoに1点追加

	posted by {Png} genki on Fri 11 Jan 2008 at 22:21

	Similar Articles:
	+++++++++++++++++

	  1. FireBug for IE? by {Png} genki

	  2. Railsでデバッグをする７つの方法 by {Png} genki

	  3. Railsのドキュメントが要らなくなる（事もある）方法 by {Png} genki

	  4. Adobe AIRでfdbコマンドラインデバッガを利用する by {Png} satoko

	  5. merbでデバッグする方法 by {Png} genki

-------------------------------------------------------------------------------
Apache
moduleの全コンパイルを実行
enable-mod-shared=allでも外部ライブラリに依存するものはコンパイルされないため、全モジュール込みのコンパイルには以下を利用
	# sudo ./configure --enable-so --enable-modules=all  (下の指定しないときこのmostを利用) 
	# sudo ./configure --enable-so --enable-ssl --with-ssl=/usr/local/ssl --enable-modules=most  (下の指定しないときこのmostを利用) 
				 --enable-mods-shared="all ssl cache proxy authn_alias mem_cache file_cache charset_lite dav_lock disk_cache"
	# sudo make
	# sudo make install

その他のサンプル
	# sudo ./configure --enable-so --enable-mods-shared=all --enable-ssl
			   --enable-proxy --enable-proxy-connect --enable-proxy-ftp
			   --enable-proxy-http --enable-proxy-ajp --enable-proxy-balancer

※mod_SSL をインストールするには、予めOpenSSLをインストールしておき、./configureに追加で「--with-ssl=/usr/local/ssl」の設定が必要です。す
※configureで下記のエラーがでる場合場
configure: error: ... Error, SSL/TLS libraries were missing or unusable
この場合には、「--with-ssl=/usr/local/src/openssl-0.9.8l」などと、インストール元をしている場合が多い。
	注意）一部のmoduleの名前がバージョンによって、変更されていたりします。
	mod_access.so  廃止    ->   mod_authz_host.so  など
できあがったhttpdに何のmodが同梱されているかを確認してみる。
	/usr/local/apache2/bin/httpd -l





#Heroku
https://devcenter.heroku.com/articles/getting-started-with-rails3
Prepare for Heroku
	 gem install heroku
	 heroku login
	 heroku keys:add /root/.ssh/id_rsa.pub
	 git clone git@heroku.com:tkt-redmine.git

Create application on the Heroku:
	 heroku create tkt-redmine
	 git clone git@heroku.com:tkt-redmine.git
Git add/commit/push to heroku
Migrate and populate database in Heroku:
	 heroku run rake db:migrate
	 heroku run rake redmine:load_default_data
Restart your Redmine server on Heroku:
	 heroku ps:restart
Herokuにアップロードしているssh鍵は以下で確認できる
	$ heroku keys
		  === miamitaka@gmail.com Keys
		  ssh-rsa AAAAB3NzaC...YlRW8P+w== root@localhost.localdomain
		  ssh-rsa AAAAB3NzaC...bqm63tbN3h unicorn@ubuntu
追加していない場合は、以下で追加しておく。公開鍵の方はherokuにアップロードされる。
	$ heroku keys:add
Heroku account を切り替える
	$ heroku accounts:set private
使用中のHeroku accountを確認
	$ heroku accounts
すでにherokuにリポジトリがあり、そこをリモートリポジトリとして追加する場合、Heroku accountを利用している人は、git@heroku.com:hogehoge.gitと指定してはダメで、以下のように指定しなければならない。
	$ git remote add heroku git@heroku.private:hogehoge.git
アカウント追加後、切り替えたアカウントの認証がうまくいかない場合は、
	$ heroku login

 
    
HerokuアプリのDBをバックアップ 無料のBasicタイプでは、バックアップできるファイル数の上限は2個。
	#準備
		$ gem update heroku
		$ heroku addons:add pgbackups:basic --app heroku-hello-world
	#実行
		$ heroku pgbackups:capture --app heroku-hello-world
	#一覧を見る
		$ heroku pgbackups --app heroku-hello-world
	#古いarchiveを捨てて新しいファイルでバックアップをする。その場合は、以下のように--expireオプションを付ける。
		$ heroku pgbackups:capture --expire --app heroku-hello-world
	#手動で削除/restore  destroy|restore [archive#Dnumber] を使う。
		$ heroku pgbackups:destroy b003 --app heroku-hello-worldHeroku上でバックアップしたデータを、ローカルにダウンロードするには以下のように実行する。

	Heroku上でバックアップデータを、(1) URL取得 (2)ローカルにダウンロードするには
		$ heroku pgbackups:url b004 --app heroku-hello-world
			[http://s3.amazonaws.com/hkpgbackups/...](http://s3.amazonaws.com/hkpgbackups/...)
		$ curl "http://s3.amazonaws.com/hkpgbackups/..." -o b004.dump
		ブラウザを使って直接アクセスしてもダウンロード可能。

	ダウンロードしたダンプファイルをローカルのPostgreSQLにリストアする。
		$ pg_restore --verbose --clean --no-acl --no-owner -h localhost -U ruedap -d mydb b004.dump
		-hでホスト名、-Uでユーザー名、-dでDB名を指定して、最後にリストアしたいダンプファイルを指定する。
		Railsアプリであれば、config/database.ymlにユーザー名やDB名は指定してあるはず。

Herokuでのprivate環境変数利用
	heroku config:add SOME_VAR_NAME1=somevalue SOME_VAR_NAME2=someothervalue
	.bashrc or .bash_profie:
		export SOME_VAR_NAME1=somevalue ; export SOME_VAR_NAME2=someothervalue
	Ruby code
		ENV['SOME_VAR_NAME1'] ;ENV['SOME_VAR_NAME2']


Herokuアプリ アクセス拒否方法
   　application_controller.rb
		USERS = { "user" => "secret" }
		before_filter :authenticate
		def authenticate
		  authenticate_or_request_with_http_digest("Application") do |name|
			USERS[name]
		  end
		end
	そのほか　heroku_user objectというのもある｡
		https://blog.heroku.com/archives/2008/1/14/heroku_user
		
dumma
[-tmp-]
[-ecolinux-config-steps-]
[-vim-]
	[-vimScript-]
	[-vimWindowTab-]
[-RubyMainOTL-]
	[-hpricot-]
[-RailsApache-]
	[-railsDebuggers-]
	[-railsDBapi-]
	[-rails_activescafhold-]
	[-hpricot-]#test
#Ruby and RoR on ubuntu/ecolinux
	#WWW::Machanize
		sudo vim  /usr/lib/ruby/gems/1.8/gems/mechanize-0.9.2/lib/www/mechanize.rb
		User Agent aliases takami
			AGENT_ALIASES = {
			'Windows IE 6' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',
			'Windows IE 7' => 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)',
			'Windows Mozilla' => 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.4b) Gecko/20030516 Mozilla Firebird/0.6',
			'Mac Safari' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/418 (KHTML, like Gecko) Safari/417.9.3',
			'Mac FireFox' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.0.3) Gecko/20060426 Firefox/1.5.0.3',
			'Mac Mozilla' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.4a) Gecko/20030401',
			'Linux Mozilla' => 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.4) Gecko/20030624',
			'Linux Konqueror' => 'Mozilla/5.0 (compatible; Konqueror/3; Linux)',
			'iPhone' => 'Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1C28 Safari/419.3',

				'SO903i' => 'DoCoMo/2.0 F903i(c100;TJ)',
			#     #
			'Mechanize' => "WWW-Mechanize/#{VERSION} (http://rubyforge.org/projects/mechanize/)"
			}

				  sudo gem1.8 install schof-searchlogic
					#copy/edit config/configgb.yml
					  sudo rake gems:install schof-searchlogic
			  sudo chmod 664 /usr/lib/ruby/gems/1.8/gems/sqlite3-ruby-1.2.4/lib/sqlite3/database.rb
			  sudo chmod 664 /usr/lib/ruby/gems/1.8/gems/sqlite3-ruby-1.2.4/lib/sqlite3/translator.rb
	##Linode	sudo ssh 74.207.240.145
	##Linode	apt-get update	#update package-list
	##Linode	sudo apt-get install gcc make language-pack-ja cron
	#instllation of ruby, rails, and other related tools
	  sudo apt-get install ruby irb rdoc ri 
	  or
	##Linode	gem install -v=2.3.2 rails
	#Linode	download latest RubyGEMS from http://rubyforge.org/frs/?group_id=126
		  # wget http://rubyforge.org/frs/download.php/45905/rubygems-1.3.1.tgz
		  tar zxvf rubygems-1.3.1.tgz
		  cd rubygems-1.3.1
		  sudo ruby setup.rb
	#Linode	dpkg-reconfigure locales; update-locale LANG=ja_JP.UTF-8; dpkg-reconfigure tzdata	#tzdata=timezone-config

	  sudo apt-get install libopenssl-ruby
	  sudo gem1.8 install rails -y
		  sudo apt-get install ruby1.8-dev libsqlite3-dev sqlite3
		  sudo gem1.8 install sqlite3-ruby
		  ls -tal  /usr/lib/ruby/gems/1.8/gems/sql*/lib/sql*/
			  sudo chmod 664 /usr/lib/ruby/gems/1.8/gems/sqlite3-ruby-1.2.4/lib/sqlite3/database.rb
			  sudo chmod 664 /usr/lib/ruby/gems/1.8/gems/sqlite3-ruby-1.2.4/lib/sqlite3/translator.rb
	  sudo gem1.8 install rails --version 1.2.6
		  sudo apt-get install mysql-client-5.0
	  rails test
		  ruby test/script/server
		  http://localhost:3000
	#debugger & help-manual installation
		sudo gem1.8 install ruby-debug	
		xmpfilter
			sudo gem1.8 install rcodetools
			sudo gem1.8 install fastri
				fastri-server -b; fastri-server -B	;#create TOC & full-text-index @ ~/.fastri-***
				fastri-server       ;#invoke index server, instead you can use -L  option to be offline.
				fri -h;fri -e NKF	
	#vim config for Rails
		#vim-rubyインストール手順は既存の設定ファイルやプラグインに影響しないが、心配ならば ~/.vimrc と~./vimを事前バックアップ
		デフォルトのvimはrubyインタフェースを実装していないので、対応版をインストール (upgradeだと依存環境全部更新するのでinstall )
			sudo apt-get install vim-ruby
		vim-rubyのインストール。上記と名前は一緒ですが、今回はrubyのvimのライブラリです。
			sudo gem1.8 install vim-ruby
			sudo vim-ruby-install.rb
				Possible Vim installation directories:
				        1) /home/[yourID]/.vim
				Please select one (or anything else to specify another directory):  ←1を入力
		~/.vimrcを編集。以下を追加
			filetype on
			filetype  plugin indent on

		これで、編集中にCtrl-x Ctrl-oを押すと 補完がききます。オムニ補完っていうらしい。
		キーバインドを変更するには、以下のようにvimrcを設定することで可能です。ここではCtrl-kに割り当てています。
			imap <C-k> <C-x><C-o>
		#" :h competion" to see completion-command, such as C-n, C-p
		~/.rdebugrc作成・編集
			  set autoeval
			  set autolist
			  set autoreload
		~/irbrc作成・編集
			# 補完を有効
			require 'irb/completion'
			module Kernel
				def r(arg)
					puts `refe #{arg}`
				end
				private :r
			end
			class Module
				def r(meth = nil)
					if meth
						if instance_methods(false).include? meth.to_s
							puts `refe #{self}##{meth}`
						else
							super
						end
					else
						puts `refe #{self}`
					end
				end
			end
		#vimbrowse.pl
			cpan LWP::UserAgent
				In addition, the vim plugin synmark.vim is required. This is vim script 1128, available at:
				  http://vim.sf.net/scripts/script.php?script_id=1128
				  cp -r vim/* ~/.vim; cp -r perl ~/.vim; cp -r extra/* ~/.vim;
				  :helptags ~/.vim/doc
					
				#after installing perldoc
					"bin/vimbrowse.pl
					perldoc vimbrowse.pl
					perldoc browser.pod
					or
					vimbrowse.pl --man
						you@ecolnux:~/.vim$ grep -inRI "ViewSource" . "*.*m" 


			#anthy
				http://ore.saizensen.net/にしたがってAnthy再設定
					以下をインストールするパッケージとしてマーク。インストール済みのは再インストール指定。
					*  Synaptic Package Managerを起動
					* “SCIM“|"kasumi"でパッケージを検索

					  scim-anthy
					  scim-bridge-agent
					  scim-bridge-agent-gtk
					  scim-bridge-agent-qt
					  scim-bridge-agent-qt4
					  scim-gtk2-immodule
					  scim-qtimm
					  kasumi
				* 次に、Ubuntuの起動時にSCIMを標準の言語入力インターフェイスとして定義するためにファイル作成 or 編集
					  sudo vi gedit /etc/X11/Xsession.d/74custom-scim_startup
					  74custom-scim_startupa??a?￠a?≪a-?a?¨a??a??a?´a??a?￣a≫\a，?a?Re!?a??e??a??a?a?aa??a?´a??a?￣a?°e|?a?≪a??a??a??a??a??a?
					  export XMODIFIERS="@im=SCIM"
					  export GTK_IM_MODULE="scim"
					  export XIM_PROGRAM="scim -d"
					  export QT_IM_MODULE="scim"
				* OS再起動。init 6 	
					 ~/irbrc編集
			gems&plugins--------------------------------
				sudo apt-get install libxml2-dev libxslt1-dev git-core subversion
				 sudo gem1.8 install creator	
				  sudo gem1.8 install schof-searchlogic
					#copy/edit config/configgb.yml
					  sudo rake gems:install schof-searchlogic
				  sudo gem1.8 install railroad --local
				  sudo gem1.8 install jpmobile-0.0.4.gem --local
					  RAILS_ROOT/config/environment.rb の Rails::Initializer.run do |config| ? end 内に
						config.gem "jpmobile"
						の行を追加する。

					=== pluginとしてインストールする場合
					リリース版:
					  % ./script/plugin install http://jpmobile.rubyforge.org/svn/tags/rel-x.x.x/jpmobile
					  (x.x.xはバージョン)

					開発版:
					  % ./script/plugin install git://github.com/darashi/jpmobile.git


				  sudo gem1.8 install gmailer --local

				[-hpricot-]
				  sudo gem1.8 install hpricot mechanize
					  or sudo gems1.8 install mechanize --local 

				ruby script/plugin install http://github.com/two2twelve/onlooker
					git submodule add git://github.com/two2twelve/onlooker.git vendor/plugin_name

				action_mailer_tls プラグインを入れて config/mailer.yml に必要な情報を書いて
				config/initializers/smtp_gmail.rb でactionmailerにオプションをセットするという感じ。
				To install action_mailer_tls the plugin (the old way):

					  1. `./script/plugin install git://github.com/openrain/action_mailer_tls.git -r 'tag v1.0.0'`
					  2. Copy vendor/plugins/action_mailer_tls/sample/smtp_gmail.rb to config/
					  3. Copy vendor/plugins/action_mailer_tls/sample/mailer.yml.sample to config/
					  4. Update the configuration file with your settings

					To install the gem (the preferred way):

					  1. `sudo gem install openrain-action_mailer_tls -s http://gems.github.com`
					  2. `./script/generate action_mailer_tls`
					  3. Copy RAILS_ROOT/config/smtp_gmail.yml.sample to RAILS_ROOT/config/smtp_gmail.yml
					  4. Update the configuration file with your settings

					To (optionally) vendor this gem:

					  1. Add the following entry to config/environment.rb
						* config.gem "openrain-action_mailer_tls", :lib => "smtp_tls.rb", :source => "http://gems.github.com"
					  2. rake gems:unpack


					Testing it out
					--------------

					  1. `./script/generate mailer Notifier hello_world`
					  2. Add the following lines to config/environments/development.rb 
						* config.action_mailer.raise_delivery_errors = true
						* config.action_mailer.perform_deliveries = true
						* config.action_mailer.delivery_method = :smtp
					  3. Update the recipients and from fields in app/models/notifier.rb
					  4. `./script/console `


				#Active scaffold
					#rails2.x
						script/plugin install git://github.com/lackac/render_component.git -r rails-edge
						cd /vendor/plugins;
						git clone git://github.com/activescaffold/active_scaffold.git activescaffold
						*normal motion on rails 2.2.x is suspicious. to b checked. ouhave to "git clone" & edit"config/environment.rb":
						#NOTE: not natively compatible with Spree app. 
					#rails1.x
						ruby script/plugin install http://activescaffold.googlecode.com/svn/tags/active_scaffold	
						ruby script/plugin install http://activescaffold.googlecode.com/svn/tags/active_scaffold -r rails-2.2

				#my_admin
					ruby script/plugin install http://railsmyadmin.googlecode.com/svn/trunk/my_admin/
					#downloading error Plugin not found: ["http://railsmyadmin.googlecode.com/svn/trunk/my_admin/"]

					#Once the plugin is installed, generate the railsMyAdmin files with:
						_Note: this will copy files from the plugin folders into your application folders._			
						ruby script/generate my_admin

							  create  app/controllers/my_admin
							  create  app/helpers/my_admin
							  create  app/views/my_admin
							  create  app/views/my_admin/main
							  create  app/views/my_admin/model
							  create  app/views/my_admin/spy
							  create  public/my_admin
							  create  public/my_admin/images
							  create  app/controllers/my_admin/common_controller.rb
							  create  app/controllers/my_admin/main_controller.rb
							  create  app/controllers/my_admin/model_controller.rb
							  create  app/controllers/my_admin/spy_controller.rb
							  create  app/controllers/my_admin/my_admin_tool.rb
							  create  app/helpers/my_admin/common_helper.rb
							  create  app/helpers/my_admin/main_helper.rb
							  create  app/helpers/my_admin/model_helper.rb
							  create  app/helpers/my_admin/spy_helper.rb
							  create  app/views/layouts/my_admin.rhtml
							  create  app/views/my_admin/main/_ajax.rhtml
							  create  app/views/my_admin/main/_includes.rhtml
							  create  app/views/my_admin/main/index.rhtml
							  create  app/views/my_admin/main/main.rhtml
							  create  app/views/my_admin/main/models.rhtml
							  create  app/views/my_admin/model/_form.rhtml
							  create  app/views/my_admin/model/edit.rhtml
							  create  app/views/my_admin/model/list.rhtml

							  create  app/views/my_admin/model/new.rhtml
							  create  app/views/my_admin/spy/_single.rhtml
							  create  app/views/my_admin/spy/index.rhtml
							  create  public/my_admin/my_admin.css
							  create  public/my_admin/my_admin.js
							  create  public/my_admin/images/destroy.png
							  create  public/my_admin/images/edit.png
							  create  public/my_admin/images/home.png
							  create  public/my_admin/images/new.png
							  create  public/my_admin/images/ajax_indicator.gif


					#Next, copy the following code snippet into the bottom of your environment.rb file:
						## MY ADMIN CONFIG
						require 'my_admin/my_admin_tool'
						# If you only want certain models to be available to RailsMyAdmin, set :all_models to false and specify the desired models in MY_ADMIN_MODELS
						MY_ADMIN_GLOBALS  = {:all_models => true, :confirm_destroy => false}
						# Uncomment this next line if you set :all_models to false above.
						#MY_ADMIN_MODELS  = [Page, Comment, User]      
						MY_ADMIN_AUTH     = Proc.new { |c| c.send("admin_logged_in?") }
	#rails plugins to install
		ruby script/plugin install http://activescaffold.googlecode.com/svn/tags/active_scaffold -r rails-2.2
		ruby ruby script/plugin install http://railsmyadmin.googlecode.com/svn/trunk/my_admin/
		ruby script/plugin install http://activescaffold.googlecode.com/svn/tags/active_scaffold
		ruby script/plugin install http://code.openrain.com/rails/action_mailer_tls/
		ruby script/plugin install http://svn.plasticrain.com/projects/plugins/mysql_backup/
		ruby script/plugin install http://github.com/two2twelve/onlooker.git
		git submodule add git://github.com/two2twelve/onlooker.git vendor/plugin_name
		ruby script/plugin install http://svn.robertrevans.com/gems/creator/
		gem install creator
		script/plugin install svn://rubyforge.org/var/svn/betternestedset/tags/stable/betternestedset
	#WWW::Machanize
		sudo vim  /usr/lib/ruby/gems/1.8/gems/mechanize-0.9.2/lib/www/mechanize.rb
		User Agent aliases takami
			AGENT_ALIASES = {
			'Windows IE 6' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',
			'Windows IE 7' => 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)',
			'Windows Mozilla' => 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.4b) Gecko/20030516 Mozilla Firebird/0.6',
			'Mac Safari' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/418 (KHTML, like Gecko) Safari/417.9.3',
			'Mac FireFox' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.0.3) Gecko/20060426 Firefox/1.5.0.3',
			'Mac Mozilla' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.4a) Gecko/20030401',
			'Linux Mozilla' => 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.4) Gecko/20030624',
			'Linux Konqueror' => 'Mozilla/5.0 (compatible; Konqueror/3; Linux)',
			'iPhone' => 'Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1C28 Safari/419.3',

				'SO903i' => 'DoCoMo/2.0 F903i(c100;TJ)',
			#     #
			'Mechanize' => "WWW-Mechanize/#{VERSION} (http://rubyforge.org/projects/mechanize/)"
			}

	#Heroku-----------------------------------------------------------------------------------------------------------------
			 sudo gem1.8 install heroku
			 sudo gem1.8 install herokugarden 
				 ssh-keygen -t rsa
					Generating public/private rsa key pair.
					Enter file in which to save the key (/home/you/.ssh/id_rsa): 
					Created directory '/home/you/.ssh'.
					Enter passphrase (empty for no passphrase): 
					Enter same passphrase again: 
					Your identification has been saved in /home/you/.ssh/id_rsa.
					Your public key has been saved in /home/you/.ssh/id_rsa.pub.
					The key fingerprint is:
					e6:22:07:46:2e:48:1a:48:14:65:76:a4:3e:bd:30:ea you@ecolnux
					The key's randomart image is:
					+--[ RSA 2048]----+
					|.+o+.o           |
					|o o o            |
					|o. ..            |
					|oo.o.            |
					|o .=+.  S        |
					|  .o+..o         |
					| .  ..o .        |
					|.    o .         |
					| E               |
					+-----------------+

				heroku keys:add
				git init
				git add .
				git commit -m "new app"
				heroku create	/	herokugarden create

					Enter your Heroku credentials.
					Email: some_body@gmail.com
					Password: 
					Uploading ssh public key /home/you/.ssh/id_rsa.pub
					Created http://untitled-f2fa5a.herokugard1en.com/ | git@herokugarden.com:untitled-f2fa5a.git
						Git remote heroku added

					Created http://cold-wind-71.heroku.com/ | git@heroku.com:cold-wind-71.git

				git push heroku master

					Enter passphrase for key '/home/you/.ssh/id_rsa': 
					Counting objects: 686, done.
					Compressing objects: 100% (606/606), done.
					Writing objects: 100% (686/686), 1.44 MiB | 3 KiB/s, done.
					Total 686 (delta 60), reused 0 (delta 0)
					
					-----> Heroku receiving push
					-----> Rails app detected
						   Compiled slug size is 1.3MB
					-----> Launching........ done
						   App deployed to Heroku
					
					.To git@heroku.com:cold-wind-71.git
					 * [new branch]      master -> master

				heroku rake db:migrate
					error-->edit config/environment.rb
				heroku open



				#repeat
					git push heroku

				#heroku&git commande---------------------------------------------------------------------------------------------
					  503  heroku keys
						you@ecolnux:~/RoRapps/takamisoft2$ heroku keys
						=== 1 key for some_body@gmail.com
						ssh-rsa AAAAB3NzaC...vF7ojbsQ== you@ecolnux

					  504  heroku list
						you@ecolnux:~/RoRapps/takamisoft2$ heroku list
						radiant-journey-14
						gentle-planet-73

						heroku destroy [--app appname]
							heroku destroy --app gentle-planet-73

					  505  heroku info [appnameIntheList]
						you@ecolnux:~/RoRapps/takamisoft2$ heroku info radiant-journey-14
						=== radiant-journey-14
						Web URL:        http://radiant-journey-14.heroku.com/
						Git Repo:       git@heroku.com:radiant-journey-14.git
						Collaborators:  some_body@gmail.com
						you@ecolnux:~/RoRapps/takamisoft2$ heroku info gentle-planet-73
						=== gentle-planet-73
						Web URL:        http://gentle-planet-73.heroku.com/
						Git Repo:       git@heroku.com:gentle-planet-73.git
						Collaborators:  some_body@gmail.com

					 git remote add heroku git@heroku.com:appname.git

						   git-remote [-v | --verbose]
						   git-remote add [-t <branch>] [-m <master>] [-f] [--mirror] <name> <url>
						   git-remote rm <name>
						   git-remote update [group]
						   git-remote show [-n] <name>
						   git-remote prune [-n | --dry-run] <name>
					usage: git [--version] [--exec-path[=GIT_EXEC_PATH]] [-p|--paginate|--no-pager] [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE] [--help
					] COMMAND [ARGS]
					
					The most commonly used git commands are:
					   add        Add file contents to the index
					   bisect     Find the change that introduced a bug by binary search
					   branch     List, create, or delete branches
					   checkout   Checkout a branch or paths to the working tree
					   clone      Clone a repository into a new directory
					   commit     Record changes to the repository
					   diff       Show changes between commits, commit and working tree, etc
					   fetch      Download objects and refs from another repository
					   grep       Print lines matching a pattern
					   init       Create an empty git repository or reinitialize an existing one
					   log        Show commit logs
					   merge      Join two or more development histories together
					   mv         Move or rename a file, a directory, or a symlink
					   pull       Fetch from and merge with another repository or a local branch
					   push       Update remote refs along with associated objects
					   rebase     Forward-port local commits to the updated upstream head
					   reset      Reset current HEAD to the specified state
					   rm         Remove files from the working tree and from the index
					   show       Show various types of objects
					   status     Show the working tree status
					   tag        Create, list, delete or verify a tag object signed with GPG


#summary of spree new app local generation
	spree [railsappname] -d mysql
	mysqladmin create [dbname] -u root -p
	cd [railsappname]
	#edit config/database.yml
	#paste /vendor/lib/smtp_tls.rb for ruby1.8.7 compatibility bug
	rake db:bootstrap
	rake db:migrate
	sudo ruby script/server -p 80 -u
	#login to http://localhost/admin/products/ and edit "Available on:" date making it to be the PAST date
			Email [spree@example.com]: 
			Password [spree]: 
#spree normal installaton )----------------------------------------------------
	#NG: gem1.8 update spree
		#version 0.9.1 rubygemへの依存度やバージョン管理がややこしくて、updateはおろかinstallすらむずかしい
		#gem install spreeで通信応答せず。git cloneでもってきて以下をやるがだめ。
		#製作者たちにしかupdate/nstallできないソフトはパッケージとは言えず特注システムでしかない。
			sudo gem1.8 update authlogic
			sudo gem1.8 install chriseppstein-compass
			sudo gem1.8 install rsl-stringex
			sudo gem1.8 install javan-whenever
			sudo gem1.8 install searchlogic
			#mv config/database.yml.sample config/database.yml
			#vim config/environment.rb ":
				config.gem 'haml', :version => '>=2.2.0'
			sudo rake db:migrate
			rake db:admin:create

	#かりにspreeのアンインストールコマンドが充実していたら、以下の2chnrgとの統合も検討の余地が出てくる：
		#rename 2chnrg 
		#spree -s 2chnrg -d mysql
		cd 2chnrg
		#migrate config/database.yml
		#paste /vendor/lib/smtp_tls.rb for ruby1.8.7 compatibility bug
		rake db:bootstrap
		rake db:migrate
#spree on heroku (failed)----------------------------------------------------
		sudo gem1.8 sources -a http://gems.github.com
		cd -
		git clone git://github.com/schof/spree.git spree
		rake -h;rails -v
		vim config/boot.rb 
		vim lib/tasks/release.rake
		rake gems:install
		cd spree/config/
			cp database.yml.example database.yml
			#edit config/boot.rb line58 as follows
				load_rails("2.2.2")  # note: spree requires rails 2.2.2 (change at your own risk)
			touch #RAILS_ROOT/lib/smtp_gmail.rb
			#vim smtp_gmail.rb above
			#vim database.yml
		#rake gems:install
		grep -R 1.15 *
		vim config/environment.rb
		sudo gem1.8 install has_many_polymorphs
		sudo gem1.8 install highline --version 1.4.0
		sudo gem1.8 install mini_magick
		sudo gem1.8 install tlsmail
			cp -R calendar_date_select-1.15/ /home/you/RoRapps/spree/spree/vendor/gems/
			cp -R authlogic-2.0.9/ /home/you/RoRapps/spree/spree/vendor/gems/
			cp -R activemerchant-1.4.1/ /home/you/RoRapps/spree/spree/vendor/gems/
			cp -R has_many_polymorphs-2.13/ /home/you/RoRapps/spree/spree/vendor/gems/
			cp -R highline-1.4.0/ /home/you/RoRapps/spree/spree/vendor/gems/
			cp -R mini_magick-1.2.3/ /home/you/RoRapps/spree/spree/vendor/gems/
			cp -R tlsmail-0.0.1/ /home/you/RoRapps/spree/spree/vendor/gems/
		#install postgresql
			sudo apt-get install postgresql postgresql-client postgresql-contrib pgadmin3
			# PostgreSQLe¨-aR?a?

				# passwd postgres ##postgresa?|a??a?¶a??a?Ra??a?1a?￣a??a??a??e¨-aR?a?
				# su postgres
				$ psql template1
					template1=# alter user postgres with password '******'; ## ******a?￣e?ca??a?aa??a?1a?￣a??a??a??e¨-aR?a?
					template1=# \q ## \qa?§cμ?ao?a?
				$ createuser -AdPE hoge ## hogea?￣e?ca??a?aa，e?￢a?|a??a?¶a??a?，a?a，e?￢a?|a??a?¶a?，a?Ra??a??a??a??a??a?1a??a??a¨ce??e¨-aR?a?
				$ vi /etc/postgresql/8.3/main/postgresql.conf
					listen_addresses = 'localhost'
					a??
					listen_addresses = '*' ##'*'a?，a??a?´a?
				$ vi /etc/postgresql/8.3/main/pg_hba.conf
					##a≫\a，?a??a??a?!a??a?≪a?a，?e?¨a?，e??a??a?192.168.11.1a?￣a??e?aa??a??a??a?￣a??a?￣c?°a￠?a?，a?
					local   all         all                               trust
					host    all         all  192.168.11.1 255.255.255.255  trust
					host    all         all  0.0.0.0     0.0.0.0          password crypt

				$ exit
			# /etc/init.d/postgresql-8.3 restart
		edit database.yml configuration:

			development:
			adapter: postgresql
			host: localhost
			port: 5432
			database: postgres
			username: postgres
			password: [your-password]


		rake db:bootstrap
			Create the admin user (press enter for defaults).
			Email [spree@example.com]: 
			Password [spree]: 
			Load Sample Data? [y]: 

			Sample products have been loaded into to the store

			Finished.

#adva-cms Know-how-----------------------------------------------------------------------------------------------------------------
		#installation: follow the README.doc
		rake adva:install:core
		sudo rake adva:install engines=adva_theme,adva_assets
		sudo rake db:migrate
		#engines
			#adva-wiki
				post comment[s]	
				MethodError in CommentsController#create
				undefined method `wiki_content_path' for #<CommentsController:0xb5163c34>
				RAILS_ROOT: /home/you/RoRapps/2chnrg
				Application Trace | Framework Trace | Full Trace
		#you@ecolnux:~/RoRapps/2chnrg$ rake adva:uninstall engines=blog

		#buggy
			redirection to previous page after login page does not work well. it makes a user being rejected login. but turns out successrful login only when the user goes to the root directory(ie., top page of the website) 

#rails2.3.2 最後リリースのADVA0.2.0インストール
	rails 2ch2 -m  /home/you/RoRapps/svenfuchs-adva_cms-ef1f561/templates/adva-cms.0.2.0.rb
#rails2.3.2 最後リリースのADVA0.2.0 で めだったplugin
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_cms/vendor/plugins/safemode/README.markdown
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_cms/vendor/plugins/has_options/lib/has_options.rb
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_cms/vendor/plugins/has_filter/lib/has_filter/filter.rb
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_cms/vendor/plugins/has_filter/lib/has_filter.rb
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_cms/vendor/plugins/filtered_column/README
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_calendar/vendor/plugins/later_dude/README
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_newsletter/vendor/gems/cronedit-0.3.0/lib/cronedit.rb
	/home/you/RoRapps/svenfuchs-adva_cms-ef1f561/engines/adva_spam/vendor/plugins/viking/Readme.txt

#mySQL
	#Linode	sudo apt-get install mysql-server mysql-client libmysqlclient15-dev libmysql-ruby1.8 -y
		you@ecolnux:~/RoRapps/2chnrg/lib$ ps -ef |grep sql
		root      3300     1  0 17:29 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe
		mysql     3446  3300  0 17:29 ?        00:00:01 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --pid-file=/var/run/mysqld/mysqld.pid --skip-external-locking --port=3306 --socket=/var/run/mysqld/mysqld.sock
		root      3447  3300  0 17:29 ?        00:00:00 logger -p daemon.err -t mysqld_safe -i -t mysqld
	#Linode >	mysqladmin create r2chnn -u root -p 
	#cf.	rails -d mysql [pj-name]
	#edit config/database.yml
		development:
			adapter: sqlite3
			database: db/development.sqlite3
			pool: 5
			timeout: 5000
		dev:
			adapter: mysql
			database: r2chnn
			username: "root"
			password: "alison"
			timeout: 5000
			socket: /var/run/mysqld/mysqld.sock
			#encoding: utf8
	cp config/environment/development.rb config/environment/dev.rb
	>	mysql -u root -p
		 show databases;
		 use [DBname];
		 show tables;
		 describe [table-name];
		\h	help
		\q	quit
		status

	mysql> select * from users ;
		+----+------------+-----------+----------------------+----------+-------+-----------+------------------------------------------+------------------------------------------+------+-------+---------+-------------+-----------+------------------+-----------+---------------------+---------------------+---------------------+------------+
		| id | first_name | last_name | email                | homepage | about | signature | password_hash                            | password_salt                            | ip   | agent | referer | remember_me | token_key | token_expiration | anonymous | created_at          | updated_at          | verified_at         | deleted_at |
		| +----+------------+-----------+----------------------+----------+-------+-----------+------------------------------------------+------------------------------------------+------+-------+---------+-------------+-----------+------------------+-----------+---------------------+---------------------+---------------------+------------+
		| |  1 | some_body | NULL      | some_body@gmail.com | NULL     | NULL  | NULL      | d9e778c53529bcf488846230be0f6bf6f3a922d4 | 9ee11fa50003a673b6c783263a61770f37254b55 | NULL | NULL  | NULL    | NULL        | NULL      | NULL             |         0 | 2009-07-25 09:19:17 | 2009-07-25 09:19:17 | 2009-07-25 09:19:16 | NULL       | 
		| +----+------------+-----------+----------------------+----------+-------+-----------+------------------------------------------+------------------------------------------+------+-------+---------+-------------+-----------+------------------+-----------+---------------------+---------------------+---------------------+------------+
		| 1 row in set (0.00 sec)
		|

	 MySQL インポートとエクスポート（テキストデータ） Submitted by sasaki on 月曜, 2007-01-15 15:44
		 #erace all existing rows
			 mysql -u root -p
			 use r2chnn;
			 delete from kokuekis;
		 ■テキストTAB形式でのエクスポート                                                       
			  データベースmydbのempテーブルからタブ区切りのテキストデータでエクスポートする。        
				 $ sudo mysql -B --skip-column-names -D mydb -e 'select * from emp;' -u tanaka -p > out.txt   
				 $ sudo mysql -B --skip-column-names -D r2chnn -e 'select * from kokuekis;' -u root -p > test.txt   
			  --skip-column-namesを削除して実行すれば、カラム名も出力されるので便利。                
		 #vi replace mysq-export&import
			%s/】\t\t/】\t\t2009\//gc
			%s/】\t\t2009\/03/】\t\t2010\/03/gc
			%s/】\t\t2009\/02/】\t\t2010\/02/gc
			%s/】\t\t2009\/01/】\t\t2010\/01/gc
				#置換もれがあるのでvi上でチェック
		  #文字化け対策
		  ■テキストデータのインポート mysqlimport編                                             
			  データベースmydbのempテーブルにテキストデータをインポートする。                        
				  tar cvf tbl.tar *tbl.*; #<----sftp with binmode
				  SHOW VARIABLES LIKE 'character_set%';
						SHOW VARIABLES LIKE 'character_set%';
						+--------------------------+----------------------------+
						| Variable_name            | Value                      |
						| +--------------------------+----------------------------+
						| | character_set_client     | latin1                     | 
						| | character_set_connection | latin1                     | 
						| | character_set_database   | utf8                       | 
						| | character_set_filesystem | binary                     | 
						| | character_set_results    | latin1                     | 
						| | character_set_server     | latin1                     | 
						| | character_set_system     | utf8                       | 
						| | character_sets_dir       | /usr/share/mysql/charsets/ | 
						| +--------------------------+----------------------------+
						? 解決方法その3 root になれるなら MySQL のデフォルト文字コードを UTF-8 に変更する。 /etc/my.cnf か /etc/mysql/my.cnf を開き（ない場合は mysql が起動するときの設定ファイルを探す）、MySQLのデフォルト文字コードを UTF-8 に変更する。
						# vi /etc/my.cnf
						[mysqld]
						default-character-set = utf8
						[mysql]
						default-character-set = utf8
						[mysqldump]
						default-character-set = utf8
				  $ sudo mysqlimport --local mydb emp.txt -u root -p                                          
				  $ sudo mysqlimport --local r2chnn kokuekis.tbl.tsv -u root -p                                          
				 select * from kokuekis where sbm > 900;
			 mydb：　データベース名                                                                  
			 emp.sql：　テーブル名.sql（中身はテキストタブのデータ）
			 テキストエディタやExcel等で、TEXT-TAB形式で書き出した後、「テーブル名.txt」へ変更する 
			 --localを指定しないと、「Access denied」エラーが発生する。                              
#文字化けutf-8
	解決方法その3 root になれるなら MySQL のデフォルト文字コードを UTF-8 に変更する。 /etc/my.cnf か /etc/mysql/my.cnf を開き（ない場合は
		mysql が起動するときの設定ファイルを探す）、MySQLのデフォルト文字コードを UTF-8 に変更する。
		# vi /etc/my.cnf
		[mysqld]
		default-character-set = utf8
		[mysql]
		default-character-set = utf8
		[mysqldump]
		default-character-set = utf8

#ruby/RAILS COMMAND-----------------------------------------------------------------------------------------------------------------
	**create "rails test" add for troubleshooting such as installation of plugins.
	*never use "new/create/destroy/list/index/update/edit/" for controller/model/action name. otherwise Rails router get confused.
	*don't use "_" character for DB table/coolumn name. this way U can easily tell "_" of helper/plugin method name.
	*WiFI connection must check every 10 minutes before every donloading.
	*search "How to deploy [frameforkname/gemsname\pluginname] to Heroku" first of all.
	*install framefowk/gem/plugin  before creating project assuming deployment onto Heroku
	*don't read japanese docment until you stuck into a trouble. it's waste of time.
	#
	plugin remove [pluginname]	=	uninstall [pluginname]
	To obtain a list of other [pluginname] 
	rake tasks:	=	rake -T [pluginname]	
		you@ecolnux:~/RoRapps/2chnrg$ rake --tasks
		(in /home/you/RoRapps/2chnrg)
		rake adva:assets:copy                     # Copy public assets from plugins to public/
			rake adva:install                         # install selected adva_cms engines (pick some with engines=all plugins=all or engines=name1,name...
			rake adva:install:all                     # install all adva_cms engines and plugins
			rake adva:install:core                    # install adva_cms core engines
			rake adva:uninstall                       # uninstall selected adva_cms engines (pick some with engines=all plugins=all or engines=name1,na...
			rake adva:uninstall:all                   # uninstall all adva_cms engines and plugins
			rake adva:uninstall:core                  # uninstall adva_cms core engines
		rake db:abort_if_pending_migrations       # Raises an error if there are pending migrations
		rake db:charset                           # Retrieves the charset for the current environment's database
		rake db:collation                         # Retrieves the collation for the current environment's database
		rake db:create                            # Create the database defined in config/database.yml for the current RAILS_ENV
		rake db:create:all                        # Create all the local databases defined in config/database.yml
		rake db:migrate:prepare                   # Copy migrations from plugins to db/migrate
		rake db:migrate                           # Migrate the database through scripts in db/migrate and update db/schema.rb by invoking db:schem...
		rake db:drop                              # Drops the database for the current RAILS_ENV
			rake db:drop:all                          # Drops all the local databases defined in config/database.yml
			rake db:migrate:reset                     # Resets your database using your migrations for the current environment
			rake db:reset                             # Drops and recreates the database from db/schema.rb for the current environment.
		rake db:fixtures:identify                 # Search for a fixture given a LABEL or ID.
		rake db:fixtures:load                     # Load fixtures into the current environment's database.
		rake db:rollback                          # Rolls the schema back to the previous version.
			rake db:migrate:down                      # Runs the "down" for a given migration VERSION.
			rake db:migrate:up                        # Runs the "up" for a given migration VERSION.
			rake db:migrate:redo                      # Rollbacks the database one migration and re migrate up.
			rake db:version                           # Retrieves the current schema version number
		rake db:schema:dump                       # Create a db/schema.rb file that can be portably used against any DB supported by AR
		rake db:schema:load                       # Load a schema.rb file into the database
		rake db:sessions:clear                    # Clear the sessions table
		rake db:sessions:create                   # Creates a sessions migration for use with ActiveRecord::SessionStore
		rake db:structure:dump                    # Dump the database structure to a SQL file
		rake db:test:clone                        # Recreate the test database from the current environment's database schema
		rake db:test:clone_structure              # Recreate the test databases from the development structure
		rake db:test:load                         # Recreate the test database from the current schema.rb
		rake db:test:prepare                      # Check for pending migrations and load the test schema
		rake db:test:purge                        # Empty the test database
		rake deploy                               # Release the website and new gem version
		rake doc:app                              # Build the RDOC HTML Files
			rake doc:clobber_app                      # Remove rdoc products
			rake doc:clobber_plugins                  # Remove plugin documentation
			rake doc:clobber_rails                    # Remove rdoc products
			rake doc:guides                           # Generate Rails guides
			rake doc:plugins                          # Generate documentation for all installed plugins
			rake doc:plugins:action_mailer_tls        # Generate documentation for the action_mailer_tls plugin
			rake doc:plugins:adva_activity            # Generate documentation for the adva_activity plugin
			rake doc:plugins:adva_assets              # Generate documentation for the adva_assets plugin
			rake doc:plugins:adva_blog                # Generate documentation for the adva_blog plugin
			rake doc:plugins:adva_calendar            # Generate documentation for the adva_calendar plugin
			rake doc:plugins:adva_cells               # Generate documentation for the adva_cells plugin
			rake doc:plugins:adva_cms                 # Generate documentation for the adva_cms plugin
			rake doc:plugins:adva_comments            # Generate documentation for the adva_comments plugin
			rake doc:plugins:adva_context_templates   # Generate documentation for the adva_context_templates plugin
			rake doc:plugins:adva_fckeditor           # Generate documentation for the adva_fckeditor plugin
			rake doc:plugins:adva_forum               # Generate documentation for the adva_forum plugin
			rake doc:plugins:adva_google_analytics    # Generate documentation for the adva_google_analytics plugin
			rake doc:plugins:adva_meta_tags           # Generate documentation for the adva_meta_tags plugin
			rake doc:plugins:adva_newsletter          # Generate documentation for the adva_newsletter plugin
			rake doc:plugins:adva_photos              # Generate documentation for the adva_photos plugin
			rake doc:plugins:adva_post_ping           # Generate documentation for the adva_post_ping plugin
			rake doc:plugins:adva_rbac                # Generate documentation for the adva_rbac plugin
			rake doc:plugins:adva_spam                # Generate documentation for the adva_spam plugin
			rake doc:plugins:adva_themes              # Generate documentation for the adva_themes plugin
			rake doc:plugins:adva_url_history         # Generate documentation for the adva_url_history plugin
			rake doc:plugins:adva_user                # Generate documentation for the adva_user plugin
			rake doc:plugins:adva_wiki                # Generate documentation for the adva_wiki plugin
			rake doc:rails                            # Build the RDOC HTML Files
			rake doc:reapp                            # Force a rebuild of the RDOC files
			rake doc:rerails                          # Force a rebuild of the RDOC files
		rake gems                                 # List the gems that this rails application depends on
			rake gems:build                           # Build any native extensions for unpacked gems
			rake gems:install                         # Installs all required gems.
			rake gems:refresh_specs                   # Regenerate gem specifications in correct format.
			rake gems:unpack                          # Unpacks all required gems into vendor/gems.
			rake gems:unpack:dependencies             # Unpacks all required gems and their dependencies into vendor/gems.
			rake install_gem_no_doc                   # Install the package as a gem, without generating documentation(ri/rdoc)
		rake local_deploy                         # Runs tasks website_generate and install_gem as a local deployment of the gem
		rake log:clear                            # Truncates all *.log files in log/ to zero bytes
		rake manifest:refresh                     # Recreate Manifest.txt to include ALL files
		rake middleware                           # Prints out your Rack middleware stack
		rake notes                                # Enumerate all annotations
			rake notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=WTFHAX
			rake notes:fixme                          # Enumerate all FIXME annotations
			rake notes:optimize                       # Enumerate all OPTIMIZE annotations
			rake notes:todo                           # Enumerate all TODO annotations
		rake paperclip:clean                      # Cleans out invalid attachments.
			rake paperclip:refresh                    # Refreshes both metadata and thumbnails.
			rake paperclip:refresh:metadata           # Regenerates content_type/size metadata for a given CLASS (and optional ATTACHMENT).
			rake paperclip:refresh:thumbnails         # Regenerates thumbnails for a given CLASS (and optional ATTACHMENT).
		rake rails:freeze:edge                    # Lock to latest Edge Rails, for a specific release use RELEASE=1.2.0
			rake rails:freeze:gems                    # Lock this application to the current gems (by unpacking them into vendor/rails)
			rake rails:template                       # Applies the template supplied by LOCATION=/path/to/template
			rake rails:unfreeze                       # Unlock this application from freeze of gems or edge and return to a fluid use of system gems
		rake rails:update                         # Update both configs, scripts and public/javascripts from Rails
			rake rails:update:application_controller  # Rename application.rb to application_controller.rb
			rake rails:update:configs                 # Update config/boot.rb from your current rails install
			rake rails:update:generate_dispatchers    # Generate dispatcher files in RAILS_ROOT/public
			rake rails:update:javascripts             # Update your javascripts from your current rails install
			rake rails:update:scripts                 # Add new scripts to the application script/ directory
		rake routes                               # Print out all defined routes in match order, with names.
		rake secret                               # Generate a crytographically secure secret key.
		rake stats                                # Report code statistics (KLOCs, etc) from the application
		rake test                                 # Run all unit, functional and integration tests
			rake test:benchmark                       # Run tests for benchmarkdb:test:prepare / Benchmark the performance tests
			rake test:functionals                     # Run tests for functionalsdb:test:prepare / Run the functional tests in test/functional
			rake test:integration                     # Run tests for integrationdb:test:prepare / Run the integration tests in test/integration
			rake test:plugins                         # Run tests for pluginsenvironment / Run the plugin tests in vendor/plugins/*/**/test (or specify...
			rake test:profile                         # Run tests for profiledb:test:prepare / Profile the performance tests
			rake test:recent                          # Run tests for recentdb:test:prepare / Test recent changes
			rake test:uncommitted                     # Run tests for uncommitteddb:test:prepare / Test changes since last checkin (only Subversion and...
			rake test:units                           # Run tests for unitsdb:test:prepare / Run the unit tests in test/unit
		rake time:zones:all                       # Displays names of all time zones recognized by the Rails TimeZone class, grouped by offset.
		rake time:zones:local                     # Displays names of time zones recognized by the Rails TimeZone class with the same offset as the...
		rake time:zones:us                        # Displays names of US time zones recognized by the Rails TimeZone class, grouped by offset.
		rake tmp:cache:clear                      # Clears all files and directories in tmp/cache
			rake tmp:clear                            # Clear session, cache, and socket files from tmp/
			rake tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids
			rake tmp:pids:clear                       # Clears all files in tmp/pids
			rake tmp:sessions:clear                   # Clears all files in tmp/sessions
			rake tmp:sockets:clear                    # Clears all files in tmp/sockets
		rake website                              # Generate and upload website files
		rake website_generate                     # Generate website files
		rake website_upload                       # Upload website files to rubyforge
		rake xss_terminate                        # Given MODELS=Foo,Bar,Baz find all instances in the DB and save to sanitize existing records

	* phpMyAdmin で depot_development という名のデータベースを作っておき、RadRails で新規 Rails プロジェクトとして depot を作成
	* depot/config/database.yml ファイルを開いてデータベースのユーザー名、パスワード、ソケットなどを適切に設定
	Instead of using the command
	work$ rails exchange
	use the command
	work$ rails -d mysql exchange

	#basic steps of making rails page
		What has been done so far?
		  * Installed Rails
			#gem install rails --include-dependencies
		  * Created an aplication with the rails command
			$rails exchange
		  * Created the databases for the application with the rake command
			$ rake db:create:all
		  * Used the script/generate command to create the scaffolding for the application
			$ ruby script/generate scaffold Movie title:string description:text one_sheet_url:string
		  * Created the database table using the generated migration file
			$ rake db:migrate
		  * Started the webserver with the script/server command
			$ ruby script/server
		  * Pointed our web browser to the application and started entering and editing data
			http://localhost:3000/movies

		0)	note that rails url generatio follows "/C[controller-name]/V[view & method/action-name]/Mo[model & filetype parameter-name]/" format.
		1)	create "/app/controllers/[contoller-name]_controller.rb
				ruby script/generte controller [contoller-name] [optional:method/action-name]

		3)	if you need a DB table to be called from rhtml, perform followings in advance: 
				ruby script/generte model [model-name]
				#edit app/models/[model-name].rb to add columns ant its attribution.
					t.column	:title	:string
					t.column	:description	:text
					...
				rake db:migrate

		3-2)if you want add/create something new in DB, do followings:
				ruby script/generte migration (add_[model-name]|create_[model-name])

		4*)	if you predict 4) above and also hence need 1)~3) above at onec, try "scaffold" as followings:
			in case of rails 1.2.x,
				CRUD methods/actions namely "_form, list, show, new, edit" and its views is generated automatically:
					ruby script/generte scaffold [model-name]  [controller-name]  
			in case of rails 2.x.x,
				CRUD methods/actions namely "index, show, new, edit" and its views is generated automatically:
					ruby script/generate scaffold Movie title:string description:text one_sheet_url:string
					ruby script/generate scaffold News genre:string ndc1:string ndc2:string int_res:integer int_sbm:integer int_res:integer int_rating:integer txt_title:text txt_href:text kisha:string src1:string src2:string src3:string 
						
						description:text one_sheet_url:string
						route map.resources :movies
						*create app/controllers/movies_controller.rb
						 :
						create app/views/movies/index.html.erb
						create app/views/movies/show.html.erb
						create app/views/movies/new.html.erb
						create app/views/movies/edit.html.erb
						create app/views/layouts/movies.html.erb
						create app/helpers/movies_helper.rb
						create public/stylesheets/scaffold.css dependency model
						 :
						*create app/models/movie.rb
						create db/migrate/001_create_movies.rb
						 :
						create test/unit/movie_test.rb
						create test/fixtures/movies.yml
						create test/functional/movies_controller_test.rb
						 :
					Description:
						Scaffolds an entire resource, from model and migration to controller and
						views, along with a full test suite. The resource is ready to use as a
						starting point for your RESTful, resource-oriented application.

						Pass the name of the model (in singular form), either CamelCased or
						under_scored, as the first argument, and an optional list of attribute pairs.

						Attribute pairs are column_name:sql_type arguments specifying the
						model's attributes. Timestamps are added by default, so you don't have to
						specify them by hand as 'created_at:datetime updated_at:datetime'.

						You don't have to think up every attribute up front, but it helps to
						sketch out a few so you can start working with the resource immediately.

						For example, 'scaffold post title:string body:text published:boolean'
						gives you a model with those three attributes, a controller that handles
						the create/show/update/destroy, forms to create and edit your posts, and
						an index that lists them all, as well as a map.resources :posts
						declaration in config/routes.rb.

						If you want to remove all the generated files, run
							'script/destroy scaffold ModelName'.

					Examples:
						`./script/generate scaffold post`
						`./script/generate scaffold post title:string body:text published:boolean`
						`./script/generate scaffold purchase order_id:integer amount:decimal`
											
		5)	define method/action in "/app/controllers/[controller-name].rb
				you may process content-type with "format.(Rhtml|Rxml|yaml) in method/action., 
				and map them by ":id.:format" in "routes.rb"
		6)	embed helper-ruby-script code in "/app/views/[contoller-name]/[method/action-name].(Rhtml|Rxmls|erb|rjs)" 
		    which was created by step 1) above 

		x)	other
				rake doc:app
				ruby script/console
				ruby script/plugin list
				'script/destroy scaffold ModelName'.
				gems を使ってインストールしたほとんどのコマンドは gem 内のコードを実行するラッパーである。
				それらのコマンドでは、左右にアンダースコアを付加したバージョン番号を最初の引数として与えて実行することにより、gem のバージョンを指定することができる。
					rails _1.2.6_ my_rails_project 
				#active form? session is not valid for mobile phone.
					rake db:sessions:create	; rake:db:migrate;	=> create session DBtable				
					rake db:sessions:clear	; rake:db:migrate;	=> clear  session DBtable				
				538  rake db:rollback
				539  ruby script/destroy scaffold News
				(erase all data & reqreates tables from schema) 
					rake db:reset
				541  ruby script/generate scaffold News genre:string ndc1:string ndc2:string
				542  rake db:migrate
				543  ruby script/server&

	#fri/qri tutorial
		fastri-server       ;#invoke index server
		#vim			C-],	<S-K> means "!man [word nder cursor]
		#command-line	[fq]ri -h;[fq]ri -e NKF	
		#OBSOLETE: ri tutorial
			ri WWW::Mechanize::FileResponse
			ri --gems WWW::Mechaniz
			ri --gems mail -l
	#Rdoc local genelation like javadoc----------------------------------------------------------------------------------
		cd railsapi/
		rake rails:freeze:gems
		echo >vendor/rails/activesupport/README 
		rake doc:rails
	#debugger; 
		#禁則
			#irb	: 実行結果もソースも同じコンソールに表示され、逐次実効やブレークポイントなど設定できず、不便。
			#ruby -rdebug [scriptname] はワーニングですぎで初心者向きじゃない。
		rdebug [scriptname]
			(rdb:)+ help, 
		rdebug object tree dislay
			#rdebug v l : c g;  v cl; v i;  where
			#etc
			info args -- Argument variables of current stack frame
			info breakpoints -- Status of user-settable breakpoints
			info catch -- Exceptions that can be caught in the current stack frame
			info display -- Expressions to display when program stops
			info file -- Info about a particular file read in
			info files -- File names and timestamps of files read in
			info global_variables -- Global variables
			info instance_variables -- Instance variables of the current stack frame
			info line -- Line number and file name of current position in source file
			info locals -- Local variables of the current stack frame
			info program -- Execution status of the program

				(rdb:1) p page.root.to_plain_text.grep(/TOEIC/).each{|el| p el +"\n"  }

			xmpfilter "#=>" annotation embedding, 
				F12, F9,F8, F7
			"require 'debugger' 
			you@ecolnux:~/RoRapps/dev232plain$ ruby script/runner -h
				Usage: script/runner [options] ('Some.ruby(code)' or a filename)
				-e, --environment=name           Specifies the environment for the runner to operate under (test/development/production).
					Default: development
				-h, --help                       Show this help message.
				You can also use runner as a shebang line for your scripts like this:
					-------------------------------------------------------------
					#!/usr/bin/env /home/you/RoRapps/dev232plain/script/runner
					Product.find(:all).each { |p| p.price *= 2 ; p.save! }
					-------------------------------------------------------------
			/script/performance/
				benchmarker.rb	&	profiler.rb
		Rails debugger
			喜ばしいことに、Rails 2.0ではruby-debug を使ったdebuggerが正式に採用されました。 これの使い方は非常に簡単です。
			まずは、以下のようにブレークポイントをコード中に書き込みます。
			  ???1? def some_method
			  ???2?   debugger # breakpoint
			  ???3? end
				#@erb/rhtml       print "<% require 'ruby-debug' %>" print "<% debugger %>"

			続いて、Webサーバをデバッグモードで実行します。
			  ???1? % ./script/server -u
			(rdb:)  $LOADED_FEATURES			
			(rdb:2) info variables
					info instance_variables
			(rdb:2) info global_variables
			     :	:


	#1liner
		ruby test.rb yomikaku.txt >new ;sort     new >new2
		ruby test.rb yomikaku.txt >new ;sort -b new >new2

		-e … このオプションのあとにスクリプト片を与えると、ファイルからスクリプトを読み込むのではなくそれをそのまま実行してくれます。
			ruby -e ‘print “Hello World!\n”‘ 		画面にHello World!が表示されます
			ruby -ne ‘gsub(/ +/, “\t”)’ <filename	ファイル中のスペースの連続をTSVタブに置換
			ruby -ne ‘$_.upcase!’ <filename		ファイル中のアルファベットをすべて大文字に


		-p … このオプション（引数なし）を与えると、プログラム全体が

			while gets
				…
				print $_
			end


		FILE SPACING:

		# double space a file
			$  ruby -pe 'puts' < file.txt
		# triple space a file
			$  ruby -pe '2.times {puts}' < file.txt
		# undo double-spacing (w/ and w/o whitespace in lines)
			$  ruby -lne 'BEGIN{$/="\n\n"}; puts $_' < file.txt
			$  ruby -ne 'BEGIN{$/="\n\n"}; puts $_.chomp' < file.txt
			$  ruby -e 'puts STDIN.readlines.to_s.gsub(/\n\n/, "\n")' < file.txt

		NUMBERING:

		# number each line of a file (left justified).
			$  ruby -ne 'printf("%-6s%s", $., $_)' < file.txt
		# number each line of a file (right justified).
			$  ruby -ne 'printf("%6s%s", $., $_)' < file.txt
		# number each line of a file, only print non-blank lines
			$  ruby -e 'while gets; end; puts $.' < file.txt
		# count lines (emulates 'wc -l')
			$  ruby -ne 'END {puts $.}' < file.txt
			$  ruby -e 'while gets; end; puts $.' < file.txt

		TEXT CONVERSION AND SUBSTITUTION:

		# convert DOS newlines (CR/LF) to Unix format (LF)
		# - strip newline regardless; re-print with unix EOL
			$  ruby -ne 'BEGIN{$\="\n"}; print $_.chomp' < file.txt

		# convert Unix newlines (LF) to DOS format (CR/LF)
		# - strip newline regardless; re-print with dos EOL
			$  ruby -ne 'BEGIN{$\="\r\n"}; print $_.chomp' < file.txt

		# delete leading whitespace (spaces/tabs/etc) from beginning of each line
			$  ruby -pe 'gsub(/^\s+/, "")' < file.txt

		# delete trailing whitespace (spaces/tabs/etc) from end of each line
		# - strip newline regardless; replace with default platform record separator
			$  ruby -pe 'gsub(/\s+$/, $/)' < file.txt

		# delete BOTH leading and trailing whitespace from each line
			$  ruby -pe 'gsub(/^\s+/, "").gsub(/\s+$/, $/)' < file.txt

		# insert 5 blank spaces at the beginning of each line (ie. page offset)
			$  ruby -pe 'gsub(/%/, "   ")' < file.txt
			FAILS! $  ruby -pe 'gsub(/%/, 5.times{putc " "})' < file.txt

		# align all text flush right on a 79-column width
			$  ruby -ne 'printf("%79s", $_)' < file.txt

		# center all text in middle of 79-column width
			$  ruby -ne 'puts $_.chomp.center(79)' < file.txt
			$  ruby -lne 'puts $_.center(79)' < file.txt

		# substitute (find and replace) "foo" with "bar" on each line
			$  ruby -pe 'gsub(/foo/, "bar")' < file.txt

		# substitute "foo" with "bar" ONLY for lines which contain "baz"
			$  ruby -pe 'gsub(/foo/, "bar") if $_ =~ /baz/' < file.txt

		# substitute "foo" with "bar" EXCEPT for lines which contain "baz"
			$  ruby -pe 'gsub(/foo/, "bar") unless $_ =~ /baz/' < file.txt

		# substitute "foo" or "bar" or "baz".... with "baq"
			$  ruby -pe 'gsub(/(foo|bar|baz)/, "baq")' < file.txt

		# reverse order of lines (emulates 'tac') IMPROVE
			$  ruby -ne 'BEGIN{@arr=Array.new}; @arr.push $_; END{puts @arr.reverse}' < file.txt

		# reverse each character on the line (emulates 'rev')
			$  ruby -ne 'puts $_.chomp.reverse' < file.txt
			$  ruby -lne 'puts $_.reverse' < file.txt

		# join pairs of lines side-by-side (like 'paste')
			$  ruby -pe '$_ = $_.chomp + " " + gets if $. % 2' < file.txt

		# if a line ends with a backslash, append the next line to it
			$  ruby -pe 'while $_.match(/\\$/); $_ = $_.chomp.chop + gets; end' < file.txt
			$  ruby -e 'puts STDIN.readlines.to_s.gsub(/\\\n/, "")' < file.txt

		# if a line begins with an equal sign, append it to the previous line (Unix)
			$  ruby -e 'puts STDIN.readlines.to_s.gsub(/\n=/, "")' < file.txt

		# add a blank line every 5 lines (after lines 5, 10, 15, etc)
			$  ruby -pe 'puts if $. % 6 == 0' < file.txt

		SELECTIVE PRINTING OF CERTAIN LINES

		# print first 10 lines of a file (emulate 'head')
			$  ruby -pe 'exit if $. > 10' < file.txt

		# print first line of a file (emulate 'head -1')
			$  ruby -pe 'puts $_; exit' < file.txt

		# print the last 10 lines of a file (emulate 'tail'); NOTE reads entire file!
			$  ruby -e 'puts STDIN.readlines.reverse!.slice(0,10).reverse!' < file.txt

		# print the last 2 lines of a file (emulate 'tail -2'); NOTE reads entire file!
			$  ruby -e 'puts STDIN.readlines.reverse!.slice(0,2).reverse!' < file.txt

		# print the last line of a file (emulates 'tail -1')
			$  ruby -ne 'line = $_; END {puts line}' < file.txt

		# print only lines that match a regular expression (emulates 'grep')
			$  ruby -pe 'next unless $_ =~ /regexp/' < file.txt

		# print only lines that DO NOT match a regular expression (emulates 'grep')
			$  ruby -pe 'next if $_ =~ /regexp/' < file.txt

		# print the line immediately before a regexp, but not the regex matching line
			$  ruby -ne 'puts @prev if $_ =~ /regex/; @prev = $_;' < file.txt

		# print the line immediately after a regexp, but not the regex matching line
			$  ruby -ne 'puts $_ if @prev =~ /regex/; @prev = $_;' < file.txt

		# grep for foo AND bar AND baz (in any order)
			$  ruby -pe 'next unless $_ =~ /foo/ && $_ =~ /bar/ && $_ =~ /baz/' < file.txt

		# grep for foo AND bar AND baz (in order)
			$  ruby -pe 'next unless $_ =~ /foo.*bar.*baz/' < file.txt

		# grep for foo OR bar OR baz
			$  ruby -pe 'next unless $_ =~ /(foo|bar|baz)/' < file.txt

		# print paragraph if it contains regexp; blank lines separate paragraphs
			$  ruby -ne 'BEGIN{$/="\n\n"}; print $_ if $_ =~ /regexp/' < file.txt

		# print paragraph if it contains foo AND bar AND baz (in any order); blank lines separate paragraphs
			$  ruby -ne 'BEGIN{$/="\n\n"}; print $_ if $_ =~ /foo/ && $_ =~ /bar/ && $_ =~ /baz/' < file.txt

		# print paragraph if it contains foo AND bar AND baz (in order); blank lines separate paragraphs
			$  ruby -ne 'BEGIN{$/="\n\n"}; print $_ if $_ =~ /(foo.*bar.*baz)/' < file.txt

		# print paragraph if it contains foo OR bar OR baz; blank lines separate paragraphs
			$  ruby -ne 'BEGIN{$/="\n\n"}; print $_ if $_ =~ /(foo|bar|baz)/' < file.txt

		# print only lines of 65 characters or greater
			$  ruby -pe 'next unless $_.chomp.length >= 65' < file.txt
			$  ruby -lpe 'next unless $_.length >= 65' < file.txt

		# print only lines of 65 characters or less
			$  ruby -pe 'next unless $_.chomp.length < 65' < file.txt
			$  ruby -lpe 'next unless $_.length < 65' < file.txt

		# print section of file from regex to end of file
			$  ruby -pe '@found=true if $_ =~ /regex/; next unless @found' < file.txt

		# print section of file based on line numbers (eg. lines 2-7 inclusive)
			$  ruby -pe 'next unless $. >= 2 && $. <= 7' < file.txt

		# print line number 52
			$  ruby -pe 'next unless $. == 52' < file.txt

		# print every 3rd line starting at line 4
			$  ruby -pe 'next unless $. >= 4 && $. % 3 == 0' < file.txt

		# print section of file between two regular expressions, /foo/ and /bar/
			$  ruby -ne '@found=true if $_ =~ /foo/; next unless @found; puts $_; exit if $_ =~ /bar/' < file.txt

		SELECTIVE DELETION OF CERTAIN LINES

		# print all of file except between two regular expressions, /foo/ and /bar/
			$  ruby -ne '@found = true if $_ =~ /foo/; puts $_ unless @found; @found = false if $_ =~ /bar/' < file.txt

		# print file and remove duplicate, consecutive lines from a file (emulates 'uniq')
			$  ruby -ne 'puts $_ unless $_ == @prev; @prev = $_' < file.txt

		# print file and remove duplicate, non-consecutive lines from a file (careful of memory!)
			$  ruby -e 'puts STDIN.readlines.sort.uniq!.to_s' < file.txt

		# print file except for first 10 lines
			$  ruby -pe 'next if $. <= 10' < file.txt

		# print file except for last line
			$  ruby -e 'lines=STDIN.readlines; puts lines[0,lines.size-1]' < file.txt

		# print file except for last 2 lines
			$  ruby -e 'lines=STDIN.readlines; puts lines[0,lines.size-2]' < file.txt

		# print file except for last 10 lines
			$  ruby -e 'lines=STDIN.readlines; puts lines[0,lines.size-10]' < file.txt

		# print file except for every 8th line
			$  ruby -pe 'next if $. % 8 == 0' < file.txt

		# print file except for blank lines
			$  ruby -pe 'next if $_ =~ /^\s*$/' < file.txt

		# delete all consecutive blank lines from a file except the first
			$  ruby -e 'BEGIN{$/=nil}; puts STDIN.readlines.to_s.gsub(/\n(\n)+/, "\n\n")' < file.txt

		# delete all consecutive blank lines from a file except for the first 2
			$  ruby -e 'BEGIN{$/=nil}; puts STDIN.readlines.to_s.gsub(/\n(\n)+/, "\n\n")' < file.txt

		# delete all leading blank lines at top of file
			$  ruby -pe '@lineFound = true if $_ !~ /^\s*$/; next if !@lineFound' < file.txt



#redmine
	rake db:migrate
		#adva-cmsとはDBtable 'comments'が衝突してmigrate頓挫する。両方のcommentsテーブルは構成がにていて、ADVA-CMSのcommentsテーブルの方が多くのカラムを持つが、包含関係ではない。
		したがって互換性もなく、共存させたければADVA-CMSとRedmineのマイグレーションファイルをマージしてからmigrateするハックが必要。DBtable 'boards'も同様。
		comments
		boards
	admin/adminで初回ログイン
	open-IDつかいたいならば -->  sudo gem install ruby-openid
#redmine-overwriting-upgrade
	0.8.x series & 0.9.x series ---> DBに互換性なし
	sudo gem1.8 uninstall rack
	#rackup0.1, synatraもけす

	sudo gem1.8 install --version '= 1.0.1' rack
	rake db:migrate
	#vim /config/environment.rb  
		chars = ('a'..'z').to_a + ('A'..'Z').to_a + ('0'..'9').to_a
		secret = Array.new(60){chars[rand(chars.size)]}.join
		config.action_controller.session = { :key => "_hello_session", :secret => secret }
#redmine plugin making つまるところ以下の手順でプラグインが開発できる。
	See: http://rails-engines.org/
	1. script/generate redmine_plugin でプラグインの雛形を作る 
		ruby script/generate redmine_plugin r2chnn
	1b file-copy
		railsでつくったMVCをREDMINE/vendor/plugins 配下にコピーし差をうめ 　　
		元RailsAppのRAILS_ROOT/lib はREDMINE_ROOT/libにコピー 
		元RailsAppのRAILS_ROOT/public/* はREDMINE_ROOT/public にコピー 
		元RailsAppのRAILS_ROOT/public/images/* はREDMINE_ROOT/public/images/ にコピー 
		元RailsAppのRAILS_ROOT/vendor/plugins/* はREDMINE_ROOT/vendor/lugins/ にコピー(ただしRedmineのbootエラーが出るプラグインはどこかに退避させる） 
	2. init.rb を編集する
		Redmine::Plugin.register :redmine_continuous_deployment do
		  name 'Redmine Continuous Deployment plugin'
		  author 'Takayuki Kyowa'
		  description 'Redmine Continuous Deployment plugin'
		  version '0.0.1'

		#メニューの追加先をプロジェクトメニューにしています 初期設定で最も重要なのは表示メニューへの追加です。追加可能な表示箇所は以下の4つに分類さ れます。
			 1. トップメニュー（top_menu）
			 2. アカウントメニュー（account_menu）
			 3. プロジェクト非選択時のアプリケーションメニュー（application_menu）
			 4. プロジェクト選択時メニュー（project_menu）（①）。プロジェクトメニューa project-IDが必須にな ります。
		#:paramオプションで:project_idを指定するとURLにプロジェクトIDが付与されます(②)。
		  menu :project_menu, :deploy_history,  # ①
			   { :controller => 'deployments', :action => 'index' }, :caption => "デプロイ", :last => true,
			   :param => :project_id # ②
			#プロジェクトメニューはデフォルトで非表示にな っているため，permissionメソッドで表示/非表示を制御します(③)。
			#注意事項：URLを直打ちするとpermissionはきかない。一般公開を目的としたプラグインを作成する場合には指定せず権限の管理画面（/roles/report）からロール毎に表示／非表示を設定します。

			  permission
				:deploy_histories,              # パーミッションの名前。パーミッション全体で一意でなければならない。
				{ :deployments => [ :index ] }, # 制御対象の画面をあらわすハッシュ。menuメソッドで指定したコントローラ / アクションを指定する。
				:public => true                 # trueにすると常に表示される。

		end

		#例
		class ModelName < ActiveRecord::Migration
		  def self.up
			create_table :deploy_histories do |t|
			  t.column :project_id, :integer    # デプロイ時のプロジェクト
			  t.column :deployer_id, :integer   # デプロイしたユーザ
			  t.column :changeset_id, :integer  # デプロイ時のチェンジセット（リビジョン）
			  t.column :started_on, :datetime   # 開始時間
			  t.column :deployed_on, :datetime  # 終了時間
			  t.column :return_code, :integer   # デプロイの実行結果。コマンドの終了ステータスを保存する。
			  t.column :log, :text              # デプロイのログ
			end
		  end

		  def self.down
			drop_table :deploy_histories
		  end
		end

		一通り作成したらmigrateを実行します。
		$ RAILS_ENV=production rake db:migrate_plugins

	3. 共通設定移植
		application_contoroller の独自共通メソッド 
		config/database.yml
		config/environments.rb
		config/routes.rb
	3. Contoroller 移植(@project を基点にプロジェクトの情報を得る)
		#これをいれるとredmine標準layout   layout 'base'  
		  unloadable
		  before_filter :find_project #, :authorize  <----会員専用ページ
			...
		private
		  def find_project   
			@project=Project.find(params[:id])
		  end
		class
		EOF
		#プロジェクト配下では@projectインスタンス変数が必須になる為，URLで渡されたプロジェクトIDからProjectモデルのインスタンスを取得し，
		@projectイ ンスタンス変数にセットしています。基本的にすべての画面で必要になるため，before_filterで記述しています（①）。

	4. View を書く
		  値の取得例：<%= button_to "デプロイ！", { :action => "deploy", :project_id => params[:project_id] } %>
			def hogehoge
				@project = Project.find(params[:project_id])
			end
		PG:redmine:plugin: setting/*erb のファイル名はインストール済みプラグインの名前空間で衝突しない独特名にしないと、早番順同名ファイルがよみこまれたりする。
		#PLUGIN_ROOT/app/views/で
			<%#  takami disabled below due to 'stack level too deep' error%>
			<%#  <%= stylesheet_link_tag 'scaffold' +|%>
	5. PLUGINROT/lang/nn.yml  config/locales 言語ファイルを書く
		lang/en.yml
			en:
			  button_exec_deploy: Deploy!
			  text_confirm_deploy: Are you sure you want to deploy?
		lang/ja.yml
			ja:
			  button_exec_deploy: デプロイ！
			  text_confirm_deploy: デプロイします。よろしいですか？

		アプリ側からメッセージを読み込むには「l」というメソッドの引数に言語ファイルで定義したラベルを指定します。
		app/views/deployments/index.html.erb
			<%= button_to l(:button_exec_deploy), { :action => "deploy", :project_id => params[:project_id] }, :confirm => l(:text_confirm_deploy) %>

	6. /home/you/RoRapps/redmine-0.9.5/app/controllers/settings_controller.rb
			
	rake db:migrate_plugins

		
	#Redmineで名前空間内衝突をおこし、そのままつかえない人気プラグイン
		#Paperclip::Attachment:Classと redmine-0.8.4/app/models/attachment.rbのAttachment:Classと名前衝突、誤動作
			/home/you/RoRapps/redmine-0.8.4/app/models/attachment.rb:34: undefined method `table_name' for Paperclip::Attachment:Class (NoMethodError)
		#jpmobile (* 0.9.5はbootエラーなし。)
			/home/you/RoRapps/redmine-0.8.4/vendor/plugins/jpmobile/lib/jpmobile/hook_action_view.rb:26: undefined method `find_template' for class `ActionView::PathSet' (NameError)
		--> require '/usr/lib/ruby/gems/1.8/gems/jpmobile-0.0.4/lib/jpmobile.rb'  #some_body
		#XXX_path, XXX_urlの書き換え
	#if redmine 0.8.x系 then 
		environments.rb /config/environmnts/[envname]rb config.plugin_reload=true
				
	#redmine-gmail-combo
		#ruby script/plugin install git://github.com/collectiveidea/action_mailer_optional_tls.git
		i#config/email.ymlはタブをスペースに変換すること。
#linode new-plugin/mdule配備手順
	ローカルにデプロイ演習DB作っておいて演習する。
	いろいろmigrationむけrake task ommandはあるが、rake:db:migrateでエラーになるファイルをさけつつガリガリやってDBtable作成を目視確認するのがはやみち。
		rake db:migrate:plugin                                 # Migrate a specified plugin.
		rake db:migrate:plugins                                # Migrate plugins to current status.
		rake db:migrate:redo                                   # Rollbacks the database one migration and re migrate up.
		rake db:migrate_plugins                                # Migrates installed plugins.
		rake db:migrate:upgrade_plugin_migrations              # For engines coming from Rails version < 2.0 or for those previously updated to work with Sven Fuch's fork of engines, you need to upgrade the schema info table

#@editable はwiki_controller-->iMixinWikiController::def indexとよばれる。document_controllerではこのながれはない。

#redminePG: http://localhost:3000/projects/convert/documents?sort_by=author  きかない docusmnt/index ではattachments.authorでソートするので添付ファイル泣ければ動作しない
#Linode環境移行手順
	#db-migration
		/root/TMPDIR/DBbak/r2chnn_core_selected_tables.gz
		/root/redmine-0.9.5/config/database.yml
	#httpd-env
		/usr/local/apache2/conf/extra/httpd-proxy.conf
		/usr/local/apache2/conf/httpd.conf
		/root/redmine-0.9.5/config/environments/development.rb
		/root/redmine-0.9.5/config/environments/production.rb
	#appdir & cronpath
		/root/redmine-0.9.5/lib/R2chnnInitfork.rb
#webalizer-------------------------------------------------------------------------------
	#かならずshellで作業。vimのシェルコマンドではうまくslinkがつくられない
	#cd #{RAILS_ROOT}/public
	!sudo ln -s var/log/webalizer webalizer
~                                         

wget -O - --no-cache localhost:3000/r2chnns
 ruby script/generate scaffold r2chnn genre:string ndc1:string ndc2:string sbm:integer rate:integer Thread:text THref:text kisha:string src1:string src2:string src3:string issue2nn:integer issueOfWeek:integer issueOfMonth:integer issueOfSeason:integer issueOfYear:integer issueOfDecade:integer

#index.htmk.erb を偽装して通常のhtmlを表示させる方法＝＞ <%= stylesheet_link_tag 'scaffold' %>だけをのこしてあとをいれかえる。
#Rails scrach
#//ver2予定:mobyle.seisyun.netも書き換えたい http://mobile.seisyun.net/cgi/read.cgi/newsplus/mamono_newsplus_1214022204/1
#
#driverSW update  HTMLeditoron FIrefox / / dentist/ 投信 
	./browser/plugin/short.vim:45:command! -bar -bang ViewSource call BrowserViewSource(<q-bang>)
	./browser/plugin/main.vim:82:command! -bar -bang BrowserViewSource call BrowserViewSource(<q-bang>)
	netbeans-linux
	http://eigenclass.org/hiki.rb?fastri  and it's also available in gem format
	(rdb:1) show command
		No readline suport
	#Yahoo pipes
		2NN- 芸能|フィギュア|労働新聞|自治議論|遺棄|自殺|殺害|少子化|晩婚|婚活|アラフォー|アラサー|Mac |iPod|iPhone|Podcast|テレビ|ラジオ|が話題|(になる|する)\!?[\?？]|SMAP|しょこたん|くまぇり|ネチズン|ブログ|シー..?シェパード|||||||||||||||||||||||||||||||||||||||||||||||
		-Twitter|Wassr|Myspace|facebook|flickr|Mac |iPod|iPhone|Podcast|テレビ|ラジオ|(になる|する)\!?[\?？]|Shibuya.pm|last.fm|Tumblr|イケメン||||||||||||||||||||||||||||||||||||||
	#mashup
		http://railsify.com/search
		http://wiki.rubyonrails.org/?do=search&id=WORD1+WORD2


	#js2rb.rb
		/else if/elsif/
#
	<dl>
	<dt>3 ：<span class="name">七つの海の名無しさん </span>：2009/05/04(月) 14:28:56 ID:l1rmttGY 
	 <input id="3" name="edit_res[]" value="3" checked="checked" type="checkbox">
	  <label for="3">このレスを掲載する</label></dt>
	   <dd> <a href="http://gimpo.2ch.net/test/read.cgi/news5plus/1241414647/1" target="_blank">&gt;&gt;1</a> <br> グロ張らないで頂戴！！！！！！！！！！ <br></dd>

	   <dt>38 ：<span class="name">七つの海の名無しさん </span>：2009/05/04(月) 17:08:24 ID:584C/LGG 
	    <input id="38" name="edit_res[]" value="38" checked="checked" type="checkbox">
		 <label for="38">このレスを掲載する</label></dt>
		  <dd> <a href="http://gimpo.2ch.net/test/read.cgi/news5plus/1241414647/1" target="_blank">&gt;&gt;1</a> <br> 良い仕事したな。ナイスオパーイ <br></dd>
 

require 'scanf'
require 'action_pack'
require 'action_view'
require 'jpmobile/request_with_mobile'
require 'tempfile'

(rdb:1191) request.headers["HTTP_HOST"]
"localhost:3000"
(rdb:1191) request.headers["REQUEST_PATH"]
"/"
(rdb:1191) request.headers["PATH_INFO"]
"/r2chnns/readurl/825"

(rdb:1191) request.headers["HTTP_REFERER"]
"http://localhost:3000/r2chnns/refresh/1"
	(rdb:1191) request.headers["REQUEST_URI"]
		"http://localhost:3000/r2chnns/readurl/825"

		request.headers["PATH_INFO"]=url
		request.headers["REQUEST_PATH"]=url
		#request.headers["HTTP_HOST"]= 
#ADVA-CMS-HACK
		LOGOUT:	Parameters: {"return_to"=>"http://localhost:3000/", "action"=>"new", "controller"=>"session"}
			CACHE (0.0ms)   SELECT * FROM "sites" WHERE ("sites"."host" = 'localhost:3000') LIMIT 1
			CACHE (0.0ms)   SELECT * FROM "sections" WHERE ("sections"."parent_id" IS NULL) AND ("sections"."site_id" = 1) ORDER BY lft LIMIT 1
			  User Load (4.5ms)   SELECT * FROM "users" WHERE ("users"."id" = '1') LIMIT 1
			  SQL (1.5ms)   SELECT count(*) AS count_all FROM "users" WHERE (id = 1 AND remember_me = 'ee029d36aec513eb2e4c0ef2eccc8bc50f886fc5' AND verified_at IS NOT NULL) 
			  User Load (15.1ms)   SELECT * FROM "users" WHERE ("users"."id" = 1) LIMIT 1

		LOGIN:	Parameters: {"action"=>"destroy", "_method"=>"delete", "authenticity_token"=>"fCmjxS2tJJLWqxy46mXGKcejW9uQffss4lcjX4eXZqo=", "controller"=>"session"}
			  CACHE (0.0ms)   SELECT * FROM "sites" WHERE ("sites"."host" = 'localhost:3000') LIMIT 1
			  CACHE (0.0ms)   SELECT * FROM "sections" WHERE ("sections"."parent_id" IS NULL) AND ("sections"."site_id" = 1) ORDER BY lft LIMIT 1
	(rdb:1056) SessionController.instance_methods.grep(/current/i)
		["current_user", "assign_current_user_to_models", "current_resource", "current_page"]
	(rdb:1163) current_user
		#<User id: 1, first_name: "some_body", last_name: nil, email: "some_body@gmail.com", homepage: nil, about: nil, signature: nil, password_hash: "d9e778c53529bcf488846230be0f6bf6f3a922d4", password_salt: "9ee11fa50003a673b6c783263a61770f37254b55", ip: nil, agent: nil, referer: nil, remember_me: nil, token_key: nil, token_expiration: nil, anonymous: false, created_at: "2009-07-25 09:19:17", updated_at: "2009-07-25 09:19:17", verified_at: "2009-07-25 09:19:16", deleted_at: nil>
	(rdb:1056) SessionController.instance_methods.grep(/veri/i)
		["verify_authenticity_token", "verified_request?", "verifiable_request_format?", "hash_for_verify_user_url", "verify_user_url", "formatted_verify_user_url", "hash_for_verify_user_path", "verify_user_path", "formatted_verify_user_path"]
	(rdb:1056) SessionController.instance_methods.grep(/user/i)
		["hash_for_new_user_url", "new_admin_user_path", "new_user_url", "hash_for_admin_site_user_url", "formatted_new_admin_user_path", "formatted_new_user_url", "admin_site_user_url", "hash_for_new_user_path", "formatted_admin_site_user_url", "hash_for_edit_admin_user_url", "new_user_path", "hash_for_admin_site_user_path", "edit_admin_user_url", "formatted_new_user_path", "formatted_admin_site_user_path", "formatted_edit_admin_user_url", "hash_for_edit_user_url", "hash_for_edit_admin_user_path", "edit_user_url", "edit_admin_user_path", "formatted_edit_user_url", "hash_for_user_roles_url", "formatted_edit_admin_user_path", "hash_for_edit_user_path", "user_roles_url", "edit_user_path", "formatted_user_roles_url", "hash_for_admin_user_url", "formatted_edit_user_path", "hash_for_user_roles_path", "admin_user_url", "current_user", "user_roles_path", "formatted_admin_user_url", "hash_for_verify_user_url", "formatted_user_roles_path", "hash_for_admin_user_path", "verify_user_url", "formatted_admin_user_path", "formatted_verify_user_url", "assign_current_user_to_models", "hash_for_verify_user_path", "hash_for_user_object_roles_url", "hash_for_admin_site_users_url", "verify_user_path", "user_object_roles_url", "handle_user_settings", "admin_site_users_url", "formatted_verify_user_path", "formatted_user_object_roles_url", "formatted_admin_site_users_url", "admin_site_users_path", "hash_for_user_url", "hash_for_user_object_roles_path", "authenticate_user", "hash_for_admin_site_users_path", "user_url", "user_object_roles_path", "formatted_admin_site_users_path", "formatted_user_url", "formatted_user_object_roles_path", "hash_for_user_path", "admin_users_path", "hash_for_new_admin_site_user_url", "user_path", "new_admin_site_user_url", "formatted_user_path", "formatted_new_admin_site_user_url", "admin_user_path", "hash_for_new_admin_site_user_path", "hash_for_admin_users_url", "admin_site_user_path", "new_admin_site_user_path", "admin_users_url", "formatted_new_admin_site_user_path", "formatted_admin_users_url", "hash_for_admin_users_path", "hash_for_edit_admin_site_user_url", "formatted_admin_users_path", "edit_admin_site_user_url", "formatted_edit_admin_site_user_url", "hash_for_new_admin_user_url", "hash_for_edit_admin_site_user_path", "new_admin_user_url", "edit_admin_site_user_path", "formatted_new_admin_user_url", "formatted_edit_admin_site_user_path", "hash_for_new_admin_user_path"]

	(rdb:1132) t(:'adva').keys
		[:wikipage, :wiki_helper, :session, :assets, :labels, :cells, :plugins, :messages, :signup, :footer, :theme_files, :locations, :sidebar, :roles, :state, :blog, :info, :spam, :common, :sections, :sites, :titles, :boards, :users, :categories, :themes, :topics, :wiki, :comments, :tracking, :resources, :settings, :posts, :articles, :passwords, :subscription, :cached_pages, :links, :flash, :wikipages_helper, :activity, :contents]
	(rdb:1132) t(:'adva.sites')
		{:no_sites=>"You currently do not have any sites created.", :title=>{:create=>"Create a new site", :home_section=>"Home section"}, :attributes=>{:host=>"Host", :name=>"Name"}, :no_users=>"Site does not have any users.", :hints=>{:admin_email=>"Shown in emails sent from your site", :host_name=>"Include the port if it's a non-standard one. E.g. localhost:3000"}, :confirm_delete=>"Are you sure you wish to delete this site?", :no_available_users=>"Site does not have any available user.", :label=>{:timezone=>"Website Timezone", :admin_email=>"Administrator email", :title=>"Website title", :host=>"Host name", :name=>"Website name", :subtitle=>"Website subtitle"}, :flash=>{:create=>{:success=>"The site has been created.", :failure=>"The site could not be created"}, :destroy=>{:success=>"The site has been deleted.", :failure=>"The site could not be deleted"}, :install=>{:success=>"Congratulations! You have successfully set up your site.", :error_already_complete=>"Installation is already complete. Please log in with your admin account.", :failure=>"The following models could not be created: {{models}}."}, :update=>{:success=>"The site has been updated.", :failure=>"The site could not be updated"}}, :links=>{:delete=>"Delete this site", :create_site_and_account=>"Create site & account ≫", :manage_new=>"Manage your new site &raquo;"}, :install=>{:success_fully_created=>"You have successfully created your site. Enjoy!", :section_default=>"Home", :can_always_change_settings=>"Don't worry. You can always change these settings later.", :welcome_to_installation=>"Welcome to the less-than-two-minutes installation process. Just fill in the information below and you're done. "}}
	(rdb:1132) t(:'adva.session')
		{:labels=>{:remember_me=>"Remember me"}, :flash=>{:create=>{:success=>"Logged in successfully.", :failure=>"Could not login with this email and password."}, :destroy=>{:success=>"Logged out successfully."}}}
	kkkkkkkk

	 Rails::Initializer.run do |config| $rails_config = config end
	$rails_config.to_a.split(/@/)

	#VMguest@local
	procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
	 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
	  3  0    153      4      5     45    0    0    21    16  144   29  9 15 75  1

	root@ecolnux:~/RoRapps/2chnrg/vendor/adva/engines# grep -inR "site.host.*=" *
	adva_blog/test/integration/admin/blog_article_test.rb:44:      request.url.should == "http://#{@site.host}/2008/1/1/the-article-title?cl=en"
	adva_cms/test/unit/models/site_test.rb:81:    @site.host = '    t e s t.advabest.de'
	adva_cms/test/unit/models/site_test.rb:86:    @site.host = 't e s t.advabest.de'
	adva_cms/test/unit/models/site_test.rb:91:    @site.host = 't e s t.advabest.de    '
	adva_cms/test/integration/admin/section_article_test.rb:98:      request.url.should == "http://#{@site.host}/articles/the-article-title?cl=en"
	adva_cms/test/integration/admin/section_article_test.rb:103:      request.url.should == "http://#{@site.host}/articles/the-article-title-de?cl=de"
	adva_cms/test/integration/admin/sites_test.rb:30:      fill_in 'site[host]',  :with => 'http://the-new-site.com'
	adva_newsletter/test/unit/model/issue_test.rb:325:    @issue.body = %(<a href="http://#{@issue.newsletter.site.host}/newest-products.html?order=date">View our newest products</a>)
	adva_newsletter/test/unit/model/issue_test.rb:328:    expected = %(<a href="http://#{@issue.newsletter.site.host}/newest-products.html?order=date&utm_medium=newsletter&utm_campaign=#{URI.escape(@issue.tracking_campaign)}&utm_source=#{URI.escape(@issue.tracking_source)}">View our newest products</a>)
	adva_newsletter/test/unit/model/issue_test.rb:334:    @issue.body = %(<a href="http://#{@issue.newsletter.site.host}/newest-products.html?order=date">View our newest products</a>)
	adva_newsletter/test/unit/model/issue_test.rb:339:    @issue.body_html.should == %(<a href="http://#{@issue.newsletter.site.host}/newest-products.html?order=date">View our newest products</a>)
	root@ecolnux:~/RoRapps/2chnrg/vendor/adva/engines# grep -inR "request.host.*=" *
	adva_cms/test/contexts.rb:11:    @request.host = @site.host if @request && @site
	adva_cms/test/test_helper/extensions/rails_patch.rb:34:    request.host = @request.host if @request
	adva_forum/test/functional/forum_cache_references_test.rb:14:    @request.host = @forum.site.host
	adva_forum/test/functional/forum_cache_references_test.rb:53:    @request.host = @forum.site.host

	root@ecolnux:/usr/lib/ruby/gems/1.8/gems/mongrel-1.1.5# grep -inR "3000" *
		README:63: h = Mongrel::HttpServer.new("0.0.0.0", "3000")
		README:68:If you run this and access port 3000 with a browser it will say "hello!".  If you access it with any url other than "/test" it will give a simple 404.  Check out the Mongrel::Error404Handler for a basic way to give a more complex 404 message.
		bin/mongrel_rails:27:        ['-p', '--port PORT', "Which port to bind to", :@port, 3000],
		examples/mongrel.conf:8::port: 3000
		examples/mongrel_simple_service.rb:110:  :port            => 3000,
		examples/camping/tepee.rb:146:  server = Mongrel::Camping::start("0.0.0.0",3000,"/tepee",Tepee)
		examples/camping/tepee.rb:147:  puts "** Tepee example is running at http://localhost:3000/tepee"
		examples/builder.rb:17:  listener :port => 3000 do
		lib/mongrel/configurator.rb:14:  #     listener :port => 3000 do
		lib/mongrel.rb:56:  #   server = HttpServer.new("0.0.0.0", 3000)
	root@ecolnux:/usr/lib/ruby/gems/1.8/gems/mongrel-1.1.5# cd ../mongrel_cluster-1.0.5/
	root@ecolnux:/usr/lib/ruby/gems/1.8/gems/mongrel_cluster-1.0.5# grep -inR "3000" *
		lib/mongrel_cluster/init.rb:20:        "port" => 3000,
		lib/mongrel_cluster/init.rb:287:        ['-p', '--port PORT', "Starting port to bind to", :@port, 3000],






#メソッド名!は例外を発生させる。!がなければオブジェクトか:nilをかえすのが通例。
obj.find_by_name("dave")
ret=obj.find_by_sql("select * fro xxx")
obj.select_all
book = Product.find_or_create_by_name_and_price('book', 2079)
	リスト7●productsテーブルからnameが'book'，priceが2079であるようなProductオブジェクトを読み取り，存在しなかった場合はデータベースにレコードを新規作成する処理

ruby methods
	to_a to_s
	== =~
	class		/	type
	subclasses_of
		remove_subclasses_of
	method
		methods
		singleton_methods
		private_methods
		protected_methods
		public_methods
	is_a?
	kind_of?
	nil?
RailsApp-level API
	scrape2nn
	`
	eql?
	equal?
	===
	[]
	[]=
	as_
	b64encode 	decode64 	encode64 decode_b
	debugger breakpoint
	metaclass
	try
	dup
	tap
	inspect
	daemonize
	clone
	dclone
	returning
	display
	delete
	load_with_new_constant_marking
	unloadable
	with_options
	enable_warnings
	id	/		object_id 	__id__
	send 					__send__
	taguri taguri=
	readonly! readonly?
	taint tainted? untaint
	silence_stderr
		silence_stream silence_warnings
	instance_eval
		instance_exec
		instance_of?
		instance_values
		instance_variable_defined?
		instance_variable_get
		instance_variable_names
		instance_variable_set
		instance_variables
	to_ary
		to_default_s
		to_formatted_s
		to_param
		to_query
		to_sentence
		to_set
	acts_like?
		blank?
		present?
		respond_to?
		duplicable?
	pretty_inspect
		pretty_print
		pretty_print_cycle
		pretty_print_inspect
		pretty_print_instance_variables
	extend
		extend_with_included_modules_from
		extended_by
	require
		require_association
		require_dependency
		require_library_or_gem
		require_or_load
	slice				slice!
	sort				sort!				sort_by
	uniq				uniq!
	split
	#DB-level-API
		#DBobject-level-API
			>
			>=
			abstract_class
				abstract_class=
				abstract_class?
			accepts_nested_attributes_for
			accessible_attributes
			aggregate_mapping
			alias_attribute
				alias_attribute_with_dirty
				alias_attribute_without_dirty
				alias_method_chain
			all
			allocate
			allow_concurrency
			allow_concurrency=
			ancestors
			as_load_path
			attr_accessible
				attr_accessor_with_default
				attr_internal
				attr_internal_accessor
				attr_internal_naming_format
				attr_internal_naming_format=
				attr_internal_reader
				attr_internal_writer
				attr_protected
				attr_readonly
				attribute_method_suffix
				attribute_types_cached_by_default
				attribute_types_cached_by_default=
			authorized_for?
			autoload autoload?
			average
			base_class
			after_create
				after_create_callback_chain
				after_destroy
				after_destroy_callback_chain
				after_find
				after_find_callback_chain
				after_initialize
				after_initialize_callback_chain
				after_save
				after_save_callback_chain
				after_update
				after_update_callback_chain
				after_validation
				after_validation_callback_chain
				after_validation_on_create
				after_validation_on_create_callback_chain
				after_validation_on_update
				after_validation_on_update_callback_chain
			before_create
				before_create_callback_chain
				before_destroy
				before_destroy_callback_chain
				before_save
				before_save_callback_chain
				before_update
				before_update_callback_chain
				before_validation
				before_validation_callback_chain
				before_validation_on_create
				before_validation_on_create_callback_chain
				before_validation_on_update
				before_validation_on_update_callback_chain
			belongs_to
			benchmark
			binding_n
			cache
				cache_attribute?
				cache_attributes
				cached_attributes
			calculate
			cattr_accessor
				cattr_reader
				cattr_writer
			changed changed?
			class
				class_eval
				class_exec
				class_inheritable_accessor
				class_inheritable_array
				class_inheritable_array_writer
				class_inheritable_hash
				class_inheritable_hash_writer
				class_inheritable_reader
				class_inheritable_writer
				class_name
				class_name_of_active_record_descendant
				class_of_active_record_descendant
				class_variable_defined?
				class_variables
			clear_active_connections!
			clear_all_connections!
			clear_reloadable_connections!
			clone
			colorize_logging colorize_logging=
			column_methods_hash
			column_names
			columns
			columns_hash
			composed_of
			compute_type
			configurations configurations=
			connected?
				connection
				connection_handler connection_handler=
				connection_pool
			const_defined?
				const_get
				const_missing
				const_missing_with_dependencies
				const_missing_without_dependencies
				const_set
				constants
			construct_count_options_from_args
			content_columns
			copy_instance_variables_from
			count
			create create!
			create_reflection
			current_scoped_methods
				current_user
				current_user_proc current_user_proc=
			debug_method
			decrement_counter
			default_scope
			default_scoping default_scoping=
			default_timezone default_timezone=
			define_attribute_methods
			define_callbacks
			define_read_methods
			construct_calculation_sql
				count_by_sql
				find_by_sql
			delegate
			delete
				delete_all
			deprecate
				deprecated_method_warning
				deprecation_horizon
			descends_from_active_record?
			destroy destroy_all
			encode_quoted_value
			enum_for
			establish_connection
			execute_grouped_calculation
				execute_simple_calculation
			exists?
			expand_hash_conditions_for_aggregates
				expand_range_bind_variables
			extend
				extend_with_included_modules_from
				extended_by
			find
				find_each
				find_hidden_method
				find_in_batches
			finder_needs_type_condition?
			generated_methods generated_methods?
			get_primary_key
			has_and_belongs_to_many
			has_many
			has_one
			human_attribute_name
			human_name
			include?
			included_in_classes
			included_modules
			increment_counter
			inheritable_attributes
				inheritance_column
				inheritance_column=
				inherited
			instance_eval
				instance_exec
				instance_method
				instance_method_already_implemented?
				instance_methods
				instance_of?
				instance_values
				instance_variable_defined?
				instance_variable_get
				instance_variable_names
				instance_variable_set
				instance_variables
			include_root_in_json
			include_root_in_json=
			json_class_name
			load_with_new_constant_marking
			local_constant_names
				local_constants
			lock_optimistically
				lock_optimistically=
				locking_column
				locking_column=
				locking_enabled?
			logger logger=
			match_attribute_method?
				mattr_accessor
				mattr_reader
				mattr_writer
			merge_conditions
			method_added
			method_defined?
			minimum
			model_name
			module_eval
			module_exec
			name
			named_scope
			new
			observers observers=
				add_observer
				count_observers
				delete_observer
				delete_observers
				instantiate_observers
				notify_observers
			original_primary_key
			original_table_name
			parent parent_name parents
			partial_updates partial_updates= partial_updates?
			post_mortem_method
			preload_associations
			pretty_inspect
				pretty_print
				pretty_print_cycle
				pretty_print_inspect
				pretty_print_instance_variables
			primary_key primary_key=
			primary_key_prefix_type primary_key_prefix_type=
			private_class_method public_class_method
			private_instance_methods protected_instance_methods public_instance_methods
			private_method_defined? protected_method_defined? public_method_defined?
			private_methods protected_methods public_methods
			protected_attributes
			quote_bound_value
				quote_value
				quoted_locking_column
				quoted_table_name
			raise_if_bind_arity_mismatch
			read_inheritable_attribute
			readonly_attributes
			record_timestamps record_timestamps=
			reflect_on_aggregation
				reflect_on_all_aggregations
				reflect_on_all_associations
				reflect_on_all_autosave_associations
				reflect_on_association
				reflections
			reject_new_nested_attributes_procs reject_new_nested_attributes_procs=
			remove_class
				remove_connection
				remove_subclasses
				remove_subclasses_of
			replace_bind_variables
			replace_named_bind_variables
			require
				require_association
				require_dependency
				require_library_or_gem
				require_or_load
			reset_column_information
				reset_column_information_and_inheritable_attributes_for_all_subclasses
				reset_inheritable_attributes
				reset_locking_column
				reset_primary_key
				reset_sequence_name
				reset_subclasses
				reset_table_name
			retrieve_connection
			sanitize
				sanitize_conditions
				sanitize_sql
				sanitize_sql_array
				sanitize_sql_for_assignment
				sanitize_sql_for_conditions
				sanitize_sql_hash
				sanitize_sql_hash_for_assignment
				sanitize_sql_hash_for_conditions
			schema_format schema_format=
			scope scopes
			scoped scoped?
			scoped_methods
			self_and_descendants_from_active_record
			send
			sequence_name sequence_name=
			serialize
			serialized_attributes
			set_inheritance_column
			set_locking_column
			set_primary_key
			set_readonly_option!
			set_sequence_name
			set_table_name
			silence
			silence_stderr
			silence_stream
			silence_warnings
			singleton_methods
			skip_time_zone_conversion_for_attributes
			skip_time_zone_conversion_for_attributes=
			sqlite3_connection
			sqlite_connection
			sti_name
			store_full_sti_class store_full_sti_class= store_full_sti_class?
			subclasses
			subclasses_of
			sum
			superclass
				superclass_delegating_accessor
				superclass_delegating_reader
				superclass_delegating_writer
			suppress
			synchronize
			table_exists?
			table_name table_name=
			table_name_prefix table_name_prefix=
			table_name_suffix table_name_suffix=
			time_zone_aware_attributes
				time_zone_aware_attributes=
				timestamped_migrations
				timestamped_migrations=
			to_enum
			to_param
			to_query
			transaction
			uncached
			unloadable
			update
				update_all
				update_counters
				update_counters_with_lock
				update_counters_without_lock
			valid_keys_for_belongs_to_association
				valid_keys_for_belongs_to_association=
				valid_keys_for_has_and_belongs_to_many_association
				valid_keys_for_has_and_belongs_to_many_association=
				valid_keys_for_has_many_association
				valid_keys_for_has_many_association=
				valid_keys_for_has_one_association
				valid_keys_for_has_one_association=
			validate
				validate_callback_chain
				validate_find_options
				validate_on_create
				validate_on_create_callback_chain
				validate_on_update
				validate_on_update_callback_chain
				validates_acceptance_of
				validates_associated
				validates_confirmation_of
				validates_each
				validates_exclusion_of
				validates_format_of
				validates_inclusion_of
				validates_length_of
				validates_numericality_of
				validates_presence_of
				validates_size_of
				validates_uniqueness_of
			verification_timeout verification_timeout=
			verify_active_connections!
			with_exclusive_scope
			with_options
			with_scope
			write_inheritable_array write_inheritable_attribute write_inheritable_hash
			yaml_as yaml_tag_class_name yaml_tag_read_class yaml_tag_subclasses?

			#recordsset-level-API
				#records-level-API
				&
				*
				+
				-
				<<
				<=>
				after
				assoc
				rassoc
				at
				class
				class_eval
				collect				collect!
				combination
				compact				compact!
				copy_instance_variables_from
				cycle
				delete_at
				delete_if
				drop
				drop_while
				entries
				enum_cons
					enum_for
					enum_slice
					enum_with_index
				extract_options!
				fill
				fetch
					first
					second
					third
					fourth
					fifth
					last
					forty_two
				#record選択
					choice
					detect
					find
					find_all
					find_index
					grep
					select
					each
						each_cons
						each_index
						each_slice
						each_with_index
						each_with_object
					from				to
					group_by 	in_groups 	in_groups_of
					insert
					reverse				reverse!
						reverse_each
						rindex
				#record範囲指定
					index				index_by				indexes
					include?
					member?
					many?
					none?
					one?
					all?
					any?
					empty?
					min				min_by
					max				max_by
					minmax				minmax_by

				flatten				flatten!
				freeze				frozen?
				hash
				indices
				inject

				nitems
				pack
				partition
				permutation
				product
				reduce

				clear
				concat
				count
				join
				replace
				rand
				values_at
				map				map!
				reject				reject!
				shift				unshift
				push				pop
				shuffle				shuffle!
				|
				nil

				sum
				suppress
				take
				take_while

				transpose
				zip
					record(row,column-level-API
					@r2chnns[1].methods.sort.grep(/./)

					errors
					hash
					logger
					destroy

					quoted_id
					id=
					id_before_type_cast
					_delete
					becomes
					cache_key
					clear_aggregation_cache
					class_eval
					colorize_logging
					configurations
					copy_instance_variables_from
					default_scoping					default_timezone
					connection					connection_handler
					decrement					decrement!
					increment					increment!

					enum_for
					include_root_in_json
					schema_format
					suppress
					method_missing
					to_label
					to_query
					transaction
					timestamped_migrations
					pluralize_table_names
					primary_key_prefix_type
					existing_record_check?
					new_record?
					record_timestamps
					rollback_active_record_state!
					with_transaction_returning_status
					
					table_name_prefix					table_name_suffix
					store_full_sti_class					store_full_sti_class?
					toggle					toggle!
					changed					changed?					changes
					created_at					created_at=					created_at?
					updated_at					updated_at=					updated_at?
					unsaved=					unsaved?
					mark_for_destruction					marked_for_destruction?
					partial_updates					partial_updates?
					freeze					frozen?
					valid?					invalid?
					validate					validate_on_create					validate_on_update
					run_callbacks
						valid_with_callbacks?					valid_without_callbacks?
					reload
						reload_with_autosave_associations					reload_without_autosave_associations
						reload_with_dirty					reload_without_dirty
					lock!
						lock_optimistically
						locking_enabled?
					destroy_with_callbacks					destroy_without_callbacks
						destroy_with_transactions					destroy_without_transactions
						destroy_without_lock
					associated_valid?
						associations_for_update
						clear_association_cache
						no_errors_in_associated?
					after_create					before_create
						after_destroy					before_destroy
						after_update					before_update
						after_validation_on_create					before_validation_on_create
						after_validation_on_update					before_validation_on_update
						after_save					before_save
						after_validation					before_validation
					save					save!
						save_associated					save_associated!
						save_with_dirty					save_with_dirty!
						save_with_transactions					save_with_transactions!
						save_with_validation					save_with_validation!
						save_without_dirty					save_without_dirty!
						save_without_transactions					save_without_transactions!
						save_without_validation					save_without_validation!
						save_with_unsaved_flag					save_without_unsaved_flag
					attributes					attributes=					attribute_present?					has_attribute?
						unserializable_attribute?					unserialize_attribute
						update_attribute					update_attributes					update_attributes!
							attributes_before_type_cast
							attribute_for_inspect
							attribute_names
							attribute_types_cached_by_default
							column_for_attribute
							query_attribute
							reject_new_nested_attributes_procs
							skip_time_zone_conversion_for_attributes
							time_zone_aware_attributes
							respond_to_without_attributes?
						read_attribute					write_attribute
							read_attribute_before_type_cast
							write_attribute_without_dirty



[-ecolinux-config-steps-]
[-vim-]
	[-vimScript-]
	[-vimWindowTab-]
[-RubyMainOTL-]
	[-hpricot-]
[-RailsApache-]
	[-railsDebuggers-]
	[-railsDBapi-]
	[-rails_activescafhold-]
##Linode	cd ~;rm vimhomeold.tar*;tar -cvf vimhomeold.tar .vim* *vim* .ve_* MyWiki/ .*rc  ;gzip vimhomeold.tar; cd -
##PLUG-INS

	#YANKTMP.---------------------------------------------------------------------------------------
		vim 他のファイルにコピペするプラグインyanktmp.vim 2009 年 7 月 16 日
		しかしyanktmp.vimプラグインを使うことで解決。
		１．yanktmp.vimをダウンロード
		ダウンロードは以下より
		http://www.vim.org/scripts/script.php?script_id=1598

		２．ダウンロードしたyanktmp.vimファイルをプラグインディレクトリに配置する。
		/Users/<username>/.vim/plugin/yanktmp.vim

		３．.vimrcに以下を追記する
		map sy :call YanktmpYank()<CR>
		map sp :call YanktmpPaste_p()<CR>
		map sP :call YanktmpPaste_P()<CR>

		コピーしたい箇所を選択して、ｓｙでコピーして、他のタブ（プロセス）に切り替えてsp(またはsP)でペースト。
		※spとsPの違いは、pとPの違いと一緒一

	#SURROUND.---------------------------------------------------------------------------------------
		with the cursor on "Hello world!  (iw is a text object.The "." command will work with ds, cs, and yss with repeat.vim, vimscript #2136.)
		dsの中ではtがタグを表現する。以下の文章(*はカーソルの位置) iwは、inner word。
		#
		ySS	インデントするyss
		yssb or yss) .		({ Hello } world!)
			ysテキストオブジェクトを使ったcsができる。"Hello *world!"に対して「ysiw)」とすると"Hello (*world!)"
			yss	カレントラインに対するcs。
			yS	インデントするys
		#changing side-quotaton:
		cs"'							"Hello world!" to 'Hello world!'
		cs'<q> to change it to <q>Hello world!</q>
		cst" to get "Hello world!"
		ds" .  Hello world!
		dst		remove side tags
		di		remove innertext
		Revert to the original text: ds{ds) Hello world!
		Emphasize hello:	ysiw<em> <em>Hello</em> world!
		#visual mode combo:	 V-S<p class="important">.  <p class="important"> <em>Hello</em> world! </p>
		カスタマイズ
			括弧やタグみたいに自分の好きな文字を入れる時は以下のようにする。
			let g:surround_45 = "<?php \r ?>"
			これは-が押されたときにPHPタグを指定できる。surround_45の45が-を示している。-のASCIIコードが45．-のASCIIコードを調べるには:echo char2nr
			("-"))とすればよい。

		install details
			Extract to ~/.vim, or ~\vimfiles (Windows).  You'll need to regenerate helptags (fill in the install path below)
			:helptags ~/.vim/doc

	#RUBY-MACRO----------------------------------------------------------------------------------------
		Typing "for" on a blank line will result in
			for  in  
			end

		with the cursor positioned before the "in".  
		The same will happen with "while", "until", and so on.  But if the line is not blank, "for" will just insert itself.
		Also, symbols like " are inserted in matching pairs, with the cursor in between.
		"K" runs ruby on the current buffer, and the "F1" function key puts a line #!/usr/math/bin/ruby on the first line.  (You will have to edit
		this part).
		install details
			put this in an ftplugin directory in your runtime path.  or Put something like the following line in your .vimrc file:
			autocmd Filetype ruby source ~/.Vim/ruby-macros.vim
	#SNIPMATE----------------------------------------------------------------------------------------
		snipMate.vim aims to be an unobtrusive, concise vim script that implements some of TextMate's snippets features in Vim. A snippet is a
		piece of often-typed text that you can insert into your document using a trigger word followed by a <tab>.

		For instance, in a C file using the default installation of snipMate.vim, if you type "for<tab>" in insert mode, it will expand a
		typical for loop in C:

		for (i = 0; i < count; i++) {

		}

		To go to the next item in the loop, simply <tab> over to it; if there is repeated code, such as the "i" variable in this example, you
		can simply start typing once it's highlighted and all the matches specified in the snippet will be updated.


		snipMate.vim has the following features among others:
		  - The syntax of snippets is very similar to TextMate's, allowing easy conversion.
		  - The position of the snippet is kept transparently (i.e., it does not use marks/placeholders inserted into the buffer), allowing you
		to escape out of an incomplete snippet, something particularly useful in Vim.
		  - Variables in snippets are updated as-you-type.
		  - Snippets can have multiple matches.
		  - Snippets can be out of order. For instance, in a do...while loop, the condition can be added before the code.

		Bug reports, feature requests, etc. are welcome and can be emailed to me or submitted on the issue tracker: http://code.google.com/p/
		snipmate/issues/list
		For a quick introduction, see this screencast: http://vimeo.com/3535418
		For more help see the  documentation that comes with snipMate in ~/.vim/doc/snipMate.txt.

		install details
			Requires Vim 7 or higher.
			filetype plugin on" to your .vimrc 
			unzip snipMate.zip -d ~/.vim (or equivalent, e.g. $HOME\vimfiles on Windows)
			:helptags ~/.vim/doc

		Keep in mind this will overwrite any files included with older versions of snipMate, including the default *.snippets files for the
		included filetypes. If you don't want your snippets overwritten, just name them name them differently than the default snippets, e.g.
		c-mysnips.snippets.


	#TEMPLATE.---------------------------------------------------------------------------------------
		Vimで新しいファイルを作ったときに、拡張子に応じて自動的にテンプレートを適用する方法です。
		まずは準備として、VIMHOMEを設定。.bashrcとか.zshrcに以下の設定。
			export VIMHOME=$HOME/.vim
		次に.vimrcの設定。autocmdを使って、テンプレートを読み込むようにします。
			autocmd BufNewFile * silent! 0r $VIMHOME/templates/%:e.tpl
		これでvimで新規ファイルを作成すると、その拡張子に応じて$HOME/.vim/templates以下の<拡張子>.tplファイルをテンプレートとして読み込む設定が
		できました。
		あとはテンプレートファイルの作成。例えばhtmlファイルならこんな感じ。
			$ vim $HOME/.vim/templstes/html.tpl
			<html>
			<head>
			<title></title>
			</head>
			<body>
			</body>
			</html>
		拡張子に応じたテンプレートを作ったら、後はその拡張子のファイルを作成したら、自動でテンプレートが適用されます。

	#CHINESE.---------------------------------------------------------------------------------------
		VimIM 是?? Vim 玩家??的插件，可作? Vim 内嵌中文?入法。只要?的 Vim 能?示中文，?就能用 Vim ?入搜索中文。
		install details
		(1) download any data file you like from
			http://code.google.com/p/vimim/downloads/list
		(2) save this file and the data file in the Vim plugin directory

		Usage (1): [in Insert Mode] 【点石成金】没有所?模式??
		  # to insert: type keycode and hit <C-\> to trigger
		  # to search: hit '/' or '?' from popup menu

		Usage (2): [in Insert Mode] 【中文?入模式】 Ctrl-6 切?
		  # [dynamic] mode: any valid key code => Chinese
		  # [static]  mode: Space=>Chinese  Enter=>English
		官方网址:  http://vim.sourceforge.net/scripts/script.php?script_id=2506
		新???:  http://groups.google.com/group/vimim
		??下?:  http://code.google.com/p/vimim/downloads/list
		最新主?:  http://maxiangjiang.googlepages.com/vimim.html
		程式框架:  http://maxiangjiang.googlepages.com/vimim.vim.html

#David Rayner's VIMTIPS.---------------------------------------------------------------------------------------
	David Rayner's Best of Vim Tips part 1
	http://www.rayninfo.co.uk/vimtips.html より。

	" 検索
	/joe/e                      : カーソルをマッチの末尾へ
	/joe/e+1                    : カーソルをマッチの末尾＋1へ
	/joe/s-2                    : カーソルをマッチの先頭－2へ
	/^joe.*fred.*bill/          : normal
	/^[A-J]\+/                  : 1個以上のA-Jで始まる行を検索
	/begin\_.*end               : 複数行にまたがることを許す検索
	/fred\_s*joe/i              : 改行を含む任意のホワイトスペース
	/fred\|joe                  : fred または joe を検索
	/.*fred\&.*joe              : fred と joe を検索（順序は問わない！）
	/\<fred\>/i                 : fred を検索。alfred や frederick を除く
	/\<\d\d\d\d\>               : ちょうど4個の数字を検索
	/\D\d\d\d\d\D               : ちょうど4個の数字を検索
	/\<\d\{4}\>                 : 同じ
	/\([^0-9]\|^\)%.*%          : Search for absence of a digit or beginning of line
	" 空行を検索
	/^\n\{3}                    : 連続する3つの空行を検索
	" 正規表現の記憶を検索中で使う
	/\(fred\).*\(joe\).*\2.*\1
	" パターンの繰り返し (rather than what the Regexp finds)
	/^\([^,]*,\)\{8}
	" ヴィジュアル検索
	:vmap // y/<C-R>"<CR>       : 選択したテキストを検索
	:vmap <silent> //    y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR> : 特殊文字のエスケープ付き版
	" \zs and \ze 正規表現のデリミタ :h /\zs
	/<\zs[^>]*\ze>              : タグの中身を検索。<> は無視
	" ゼロ幅 :h /\@=
	/<\@<=[^>]*>\@=             : タグの中身を検索。<> は無視
	/<\@<=\_[^>]*>\@=           : 複数行にわたってタグを検索
	" 複数行に渡る検索。 \_ は改行を含むという意味
	/<!--\_p\{-}-->                   : 複数行に渡るコメントを検索
	/fred\_s*joe/i                    : 改行を含む任意のホワイトスペース
	/bugs\(\_.\)*bunny                : bunny が後に続く bugs。ファイル中のどこでも。
	:h \_                             : help
	<moge>     <sage>
	" カーソル下のサブルーチン／関数の宣言を検索
	:nmap gx yiw/^\(sub\<bar>function\)\s\+<C-R>"<CR>
	" 複数ファイルから検索
	:bufdo /searchstr/                : 検索を再開するには :rewind を使う
	" 複数ファイルからの検索。ベターだがチート
	:bufdo %s/searchstr/&/gic   : 停止するには n を選択してから a
	" バックスラッシュを使わないで URL を検索する方法
	?http://www.vim.org/        : 後方検索を使う。clever huh!
	" 「探さない」ものを指定する（母音）
	/\c\v([^aeiou]&\a){4}       : 連続する4つの子音を検索
	----------------------------------------
	#substitution
	:%s/fred/joe/igc            : 一般的な置換コマンド
	:%s/\r//g                   : DOS の改行 ^M を削除
	" ファイルがぐちゃぐちゃになっていたらこれを使う
	:%s/\r/\r/g                 : DOS の改行 ^M を本当の改行に置換
	:%s=  *$==                  : 行末のスペースを削除
	:%s= \+$==                  : 同上
	:%s#\s*\r\?$##              : 行末の空白とDOSの改行両方を削除
	:%s#\s*\r*$##               : 同上
	" 空行を削除する
	:%s/^\n\{3}//               : 3個の連続する空行を削除
	:%s/^\n\+/\r/               : 空行を圧縮する
	:%s#<[^>]\+>##g             : テキストを残したままhtmlタグを削除(non-greedy)
	:%s#<\_.\{-1,}>##g          : 複数行にわたってhtmlタグを削除(non-greedy)
	" IF YOU ONLY WANT TO KNOW ONE THING
	:'a,'bg/fred/s/dick/joe/igc : VERY USEFUL
	" カラムを重複させる
	:%s= [^ ]\+$=&&=            : 最後のカラムを重複させる
	:%s= \f\+$=&&=              : 同上
	:%s= \S\+$=&&               : 普通は同上
	" 記憶
	:s/\(.*\):\(.*\)/\2 : \1/   : : で区切られるフィールドを反転
	:%s/^\(.*\)\n\1$/\1/        : 重複する行を削除
	" non-greedy matching \{-}
	:%s/^.\{-}pdf/new.pdf/      : 最初のpdfまでを削除
	" 直前の項目が0個または1個を意味するアトム \?
	:%s#\<[zy]\?tbl_[a-z_]\+\>#\L&#gc : lowercase with optional leading characters
	" 複数行に渡ることを許す
	:%s/<!--\_.\{-}-->//        : 複数行に渡るコメントを削除
	:help /\{-}                 : help non-greedy
	" レジスタを使った置換
	:s/fred/<c-r>a/g            : "fred" をレジスタ"a"の中身で置き換える
	:s/fred/<c-r>asome_text<c-r>s/g
	:s/fred/\=@a/g              : レジスタの中身が表示されないのでベター
	" 1行に対して複数のコマンド
	:%s/\f\+\.gif\>/\r&\r/g | v/\.gif$/d | %s/gif/jpg/
	:%s/a/but/gie|:update|:next : これを繰り返すには @: を使う
	" ORing（分岐）
	:%s/suck\|buck/loopy/gc     : ORing (パイプ記号 | をエスケープすること)
	" VIM の関数を呼ぶ
	:s/__date__/\=strftime("%c")/ : 日付を挿入する
	" 列を操作する。3列目の str1 を置換する
	:%s:\(\(\w\+\s\+\)\{2}\)str1:\1str2:
	" 最初と最後の列を入れ替える（4列ある場合）
	:%s:\(\w\+\)\(.*\s\+\)\(\w\+\)$:\3\2\1:
	" form の全ての要素をペーストレジスタに入れる
	:redir @*|sil exec 'g#<\(input\|select\|textarea\|/\=form\)\>#p'|redir END
	:nmap ,z :redir @*<Bar>sil exec 'g@<\(input\<Bar>select\<Bar>textarea\<Bar>/\=form\)\>@p'<Bar>redir END<CR>
	" 数字を3デクリメントする
	:%s/\d\+/\=(submatch(0)-3)/
	" ある行についてだけ数字を6インクリメントする
	:g/loc\|function/s/\d/\=submatch(0)+6/
	" ベター
	:%s#txtdev\zs\d#\=submatch(0)+1#g
	:h /\zs
	" gg\d\d の数字だけを6インクリメントする
	:%s/\(gg\)\@<=\d\+/\=submatch(0)+6/
	:h zero-width
	" 文字列を増加していく数字で置き換える
	:let i=10 | 'a,'bg/Abc/s/yy/\=i/ |let i=i+1 # yy を10,11,12 ...で置き換える
	" 同上。ただしより正確
	:let i=10 | 'a,'bg/Abc/s/xx\zsyy\ze/\=i/ |let i=i+1 # convert xxyy to xx11,xx12,xx13
	" 置換するテキストを見つけ、メモリにおく。それから \zs を使って単純に置換する
	:%s/"\([^.]\+\).*\zsxx/\1/
	" カーソル下の単語を置換の検索語として挿入する
	:nmap <leader>z :%s#\<<c-r>=expand("<cword>")<cr>\>#
	" 選択されたテキストを置換の検索語として挿入する
	:vmap <leader>z :<C-U>%s/\<<c-r>*\>/
	----------------------------------------
	" all following performing similar task, substitute within substitution
	" Multiple single character substitution in a portion of line only
	:%s,\(all/.*\)\@<=/,_,g     : "all/" の後に現れる / をすべて _ で置換する
	" 同上
	:s#all/\zs.*#\=substitute(submatch(0), '/', '_', 'g')#
	" 行を分割し、再結合することによって置換
	:s#all/#&^M#|s#/#_#g|-j!
	" 置換中で置換する
	:%s/.*/\='cp '.submatch(0).' all/'.substitute(submatch(0),'/','_','g')/
	----------------------------------------
	" global コマンドの表示
	:g/gladiolli/#              : g/ の結果を行番号つきで表示(YOU WANT THIS!)
	:g/fred.*joe.*dick/         : fred,joe & dick すべてを含む行を表示
	:g/\<fred\>/                : fred に一致する単語を含む行すべてを表示
	:g/^\s*$/d                  : 空行をすべて削除
	:g!/^dd/d                   : 文字列を含まない行を削除
	:v/^dd/d                    : 文字列を含まない行を削除
	:g/fred/,/joe/d             : 非行指向(very powerfull)
	:g/-------/.-10,.d          : 文字列と上の10行を削除
	:g/{/ ,/}/- s/\n\+/\r/g     : {...}の中の空行を削除
	:v/\S/d                     : 空行を削除 (both types)
	:v/./,/./-j                 : 空行を圧縮
	:g/^$/,/./-j                : 空行を圧縮
	:g/<input\|<form/p          : OR
	:g/^/put_                   : 全ての行と行の間に空行を挿入(pu = put) "_はブラックホールレジスタ
	:g/^/m0                     : ファイルを反転させる(m = move)
	:'a,'bg/^/m'b               : a から b のセクションを反転
	:g/^/t.                     : 各行を重複させる
	:g/fred/t$                  : fredにマッチする行をEOFにコピー
	:g/stage/t'a                : stageにマッチする行をマークaへコピー
	:g/\(^I[^^I]*\)\{80}/d      : 80個以上のタブを含む行すべてを削除
	" 1行おきに置換を行う
	:g/^/ if line('.')%2|s/^/zz /
	" マーク a と b の間で"somestr"を含む行すべてにマッチ
	:'a,'bg/somestr/co/otherstr/ : co(py) or mo(ve)
	" 同上。ただし置換も行う
	:'a,'bg/str1/s/str1/&&&/|mo/str2/
	:%norm jdd                  : 1行置きに削除
	" 数字をインクリメントする（<c-a>は5文字タイプすること）
	:.,$g/^\d/exe "norm! \<c-a>": 数字をインクリメント
	:'a,'bg/\d\+/norm! ^A       : 数字をインクリメント
	" :g の結果を保存する（レジスタ名を大文字にしなければならない）。最初に qaq でレジスタを空にしておくこと。
	" 結果をレジスタ／ペーストバッファに保存する
	:g/fred/y A                 : fred を含む行すべてをレジスタaに追加する
	:g/fred/y A | :let @*=@a    : ペーストバッファにコピー
	:let @a=''|g/Barratt/y A |:let @*=@a
	" 行をフィルタしてファイルに書き出す（ファイルは既に存在しなければならない）
	:'a,'b g/^Error/ . w >> errors.txt
	" duplicate every line in a file wrap a print '' around each duplicate
	:g/./yank|put|-1s/'/"/g|s/.*/Print '&'/
	" 文字列をファイルの中身で置換する。-d が MARK を削除する
	:g/^MARK$/r tmp.txt | -d
	" きれいに表示
	:g/<pattern>/z#.5           : コンテキストつきで表示
	:g/<pattern>/z#.5|echo "=========="  : 美しく表示
	" g// とノーマルモードコマンドを組み合わせる
	:g/|/norm 2f|r*                      : 2番めの | を * で置き換える
	" global コマンドの出力を新しいウィンドウに送る
	:nmap <F3>  :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR><CR>
	----------------------------------------
	" :global と置換を組み合わせる(power editing)
	:'a,'bg/fred/s/joe/susan/gic :  can use memory to extend matching
	:g/fred/,/joe/s/fred/joe/gic :  non-line based (ultra)
	----------------------------------------
	" joe の検索を始める前に fred を見つける
	:/fred/;/joe/-2,/sid/+3s/sally/alley/gIC
	----------------------------------------
	" ファイル中の各行に対して新しいファイルを作る。1.txt, 2.txt, 3.txt etc
	:g/^/exe ".w ".line(".").".txt"
	----------------------------------------
	" Absolutely essential
	----------------------------------------
	* # g* g#           : カーソル下の単語を検索 (<cword>) (forwards/backwards)
	%                   : 対応括弧に移動 {}[]()
	 .                   : 最後の変更を繰り返す
	 @:                  : 最後の : コマンドを繰り返す (then @@)
	 matchit.vim         : % で <tr><td><script> <?php などのタグにマッチさせるプラグイン
	 <C-N><C-P>          : インサートモードで単語補完
	 <C-X><C-L>          : 行補完 SUPER USEFUL
	 /<C-R><C-W>         : <cword> を検索／コマンドラインに挿入する
	 /<C-R><C-A>         : <CWORD> を検索／コマンドラインに挿入する
	 :set ignorecase     : you nearly always want this
	:syntax on          : Perl,HTML,PHP などで色づけを有効にする
	━━━━━━━━━━━━━ :h regexp<C-D>      : control-D をタイプすると regexp を含むヘルプトピックを全てリスト
						  （tabでそのリスト中を巡回）
	 ----------------------------------------
	 " _vimrc の更新、再読み込みを簡単にするマップ
	 :nmap ,s :source $VIM/_vimrc
	:nmap ,v :e $VIM/_vimrc
	━━━━━━━━━━━━━ ----------------------------------------
	"VISUAL MODE (easy to add other HTML Tags)
	 :vmap sb "zdi<b><C-R>z</b><ESC>  : 選択したテキストを<b></b> で囲む
	 :vmap st "zdi<?= <C-R>z ?><ESC>  : 選択したテキストを <?=   ?> で囲む
	 ----------------------------------------
	 "vim 7 tabs
	 :tabe fred.php
	:tab ball
	━━━━━━━━━━━━━ vim -p fred.php joe.php          : ファイルをタブで開く
	" vim 7 forcing use of tabs
	nnoremap gf <C-W>gf
	━━━━━━━━━━━━━ cab      e  tabe
	----------------------------------------
	" Exploring
	:e .                            : ファイルエクスプローラ
	:Exp(lore)                      : file explorer note capital Ex
	:Sex(plore)                     : ファイルエクスプローラ。ウィンドウ分割
	:browse e                       : ウィンドウズスタイルのファイルを開くダイアログ
	:ls                             : バッファのリスト
	:cd ..                          : 親ディレクトリへ移動
	:args                           : ファイルのリスト
	 :lcd %:p:h                      : 現在のファイルのディレクトリへ移動
	:autocmd BufEnter * lcd %:p:h   : 自動的に現在のファイルのディレクトリへ移動(_vimrcに書く）
	----------------------------------------
	" バッファエクスプローラ (Top Ten Vim Script)
	 " bufexplorer.vim が必要 http://www.vim.org/script.php?script_id=42
	\be                             : バッファリスト
	\bs                             : バッファエクスプローラ（ウィンドウ分割）
	----------------------------------------
	 " Changing Case
	guu                             : 行を小文字に
	gUU                             : 行を大文字に
	Vu                              : 行を小文字に
	 VU                              : 行を大文字に
	 g~~                             : 大文字小文字を反転
	 vEU                             : 単語を大文字に
	vE~                             : 単語の大文字小文字を反転
	ggguG                           : ファイル全体を小文字に
	" 選択したテキストをキャピタライズ (map for .vimrc)
	 vmap ,c :s/\<\(.\)\(\k*\)\>/\u\1\L\2/g<CR>
	" 文の最初の文字を大文字に
	:%s/[.!?]\_s\+\a/\U&\E/g
	----------------------------------------
	 gf                              : カーソル下のファイル名を開く (SUPER)
	 :nnoremap gF :view <cfile><cr>  : カーソル下のファイル名を開く。なければ作る
	ga                              : カーソルしたの文字の16進アスキー値を表示
	ggVGg?                          : ファイル全体を rot13 変換
	ggg?G                           : ファイル全体を rot13 変換（大きいファイルに対して速い）
	 :8 | normal VGg?                : 8行目から rot13
	:normal 10GVGg?                 : 8行目から rot13
	<C-A>,<C-X>                     : カーソル下の数字をインクリメント、デクリメント
									  win32 users must remap CNTRL-A
	 <C-R>=5*5                       : 25 をテキストに挿入 (ミニ計算機）
	 ----------------------------------------
	" Makes all other tips superfluous
	:h 42            : also http://www.google.com/search?q=42
	:h holy-grail
	 :h!
	 ----------------------------------------
	" マークと移動
	'.               : 最後に変更された行へ移動 (SUPER)
	`.               : 最後に変更された行、桁へ移動
	 g;               : 最近の変更箇所を回る（古いのが最初）(new in vim6.3)
	g,               : 逆方向 (new in vim6.3)
	:changes
	:h changelist    : help for above
	 <C-O>            : ジャンプ履歴を戻る
	<C-I>            : ジャンプ履歴を進む
	:ju(mps)         : ジャンプの履歴
	:help jump-motions
	 :history         : あなたが打ったコマンドを表示
	:his c           : コマンドライン履歴
	:his s           : 検索履歴
	q/               : 検索履歴ウィンドウ (puts you in full edit mode)
	 q:               : コマンドライン履歴ウィンドウ (puts you in full edit mode)
	:<C-F>           : 履歴ウィンドウ
	----------------------------------------
	" 略語とマップ
	 :map   <f7>   :'a,'bw! c:/aaa/x
	:map   <f8>   :r c:/aaa/x
	:map   <f11>  :.w! c:/aaa/xr<CR>
	:map   <f12>  :r c:/aaa/xr<CR>
	 :ab php          : php で始まる略語を表示
	:map ,           : , で始まるマッピングを表示
	" F10 をマッピングに使えるようにする (win32)
	set wak=no       : :h winaltkeys
	 " For use in Maps
	<CR>             : リターン
	<ESC>            : エスケープ
	<LEADER>         : 通常は \
	 <BAR>            : | パイプ記号
	<BACKSPACE>      : バックスペース
	<SILENT>         : シェルウィンドウを出さない
	#display RGB colour under the cursor eg #445588
	 :nmap <leader>c :hi Normal guibg=#<c-r>=expand("<cword>")<cr><cr>
	map <f2> /price only\\|versus/ :バックスラッシュが必要
	----------------------------------------
	" Simple PHP debugging display all variables yanked into register a
	 iab phpdb exit("<hr>Debug <C-R>a  ");
	----------------------------------------
	" レジスタをマップとして使う（.vimrc 中に書いておくと起動時に設定される）
	:let @m=":'a,'bs/"
	 :let @s=":%!sort -u"
	----------------------------------------
	" レジスタの中身を表示する
	:reg             : 全レジスタの中身を表示
	:reg a           : 個個のレジスタの中身を表示
	"1p....          : 数字つきレジスタ("1, "2, "3, ...)を順番に引き出す
	:let @y='yy@"'   : レジスタの pre-loading (.vimrcに書く)
	qqq              : レジスタqを空にする
	----------------------------------------
	" 便利なトリック
	"ayy@a           : テキストファイル中の vim コマンドを実行
	yy@"             : 同上（無名レジスタを使う）
	u@.              : たった今入力したテキストを実行
	----------------------------------------
	" 他のコマンドの出力を取得する（外部プログラムが必要）
	:r!ls.exe        : ls の出力を読む
	!!date           : 同上（しかし現在行を出力で置き換える）
	" 外部コマンドの sort でソート
	:%!sort -u       : 外部プログラムを使ってバッファをフィルタリング
	:'a,'b!sort -u   : 外部プログラムを使ってバッファをフィルタリング
	!1} sort -u      : パラグラフをソート(ノーマルモードに注意！)
	:g/^$/;,/^$/-1!sort : 各ブロックをソート (note the crucial ;)
	----------------------------------------
	" 複数ファイルの管理 (Essential)
	:bn              : 次のバッファへ
	:bp              : 前のバッファへ
	:wn              : ファイルを保存し次へ(super)
	:wp              : ファイルを保存し前へ
	:bd              : ファイルをバッファリストから削除 (super)
	:bun             : バッファをアンロード（ウィンドウを消すがバッファリストからは消さない）
	:badd file.c     : バッファリストにファイルを追加
	:b 3             : バッファ3へ
	:b main          : 名前に main (例. main.c)を含むバッファを開く。(ultra)
	:sav php.html    : カレントファイルを php.html に保存して php.html を開く
	:sav! %<.bak     : カレントファイルの拡張子を変えて保存 （古い方法）
	:sav! %:r.cfm    : カレントファイルの拡張子を変えて保存
	:sav %:s/fred/joe/           : ファイル名の一部を置換する
	:sav %:s/fred/joe/:r.bak2    : ファイル名と拡張子の一部を置換する
	:!mv % %:r.bak   : rename current file (DOS use Rename or DEL)
	:e!              : 修正されていない状態に戻す
	:w c:/aaa/%      : ファイルを他の場所に保存する
	:e #             : 代替ファイルを編集する (C-^ でも同じ)
	:rew             : 編集ファイルリストの最初に戻る (:args)
	:brew            : buffer rewind
	:sp fred.txt     : ウィンドウを分割して fred.txt を開く
	:sball,:sb       : 全てのバッファを分割する (super)
	:scrollbind      : これを分割した各ウィンドウ中で実行する
	:map   <F5> :ls<CR>:e # : F5 を押すと全バッファリストを表示するので番号をタイプするだけ
	:set hidden      : カレントバッファを保存せずに他のバッファに移動できるようになる
	----------------------------------------
	" 分割ウィンドウ間ですばやい移動
	map <C-J> <C-W>j<C-W>_
	map <C-K> <C-W>k<C-W>_
	----------------------------------------
	" レコーディング(BEST TIPS of ALL)
	qq  # record to q
	your complex series of commands
	q   # end recording
	@q to execute
	@@ to Repeat
	5@@ to Repeat 5 times
	" レジスタ／レコーディングを編集する
	"qp                               :レジスタqの中身を表示する (ノーマルモード )
	<ctrl-R>q                         :レジスタqの中身を表示する (インサートモード )
	" キーレコーディングの中身を見ることができる。必要なら編集もできる
	"qdd                              :put changed contacts back into q
	@q                                :レジスタqの中身を実行する
	" 矩形範囲に対してレコーディングを実行する
	1) define recording/register
	qq:s/ to/ from/g^Mq
	2) Define Visual BLOCK
	V}
	3) hit : and the following appears
	:'<,'>
	4)Complete as follows
	:'<,'>norm @q
	----------------------------------------
	" レコーディングとマップを組み合わせる(to end up in command mode)
	nnoremap ] @q:w!<bar>bd
	----------------------------------------
	" ヴィジュアルモードは新しく通常もっとも直感的な編集モード
	" ヴィジュアルモード基礎
	v                               : ヴィジュアルモードに入る
	V                               : ヴィジュアルモード行全体
	<C-V>                           : ヴィジュアルブロックモードに入る
	gv                              : 最後の選択範囲を再選択 (ultra)
	o                               : navigate visual area
	"*y                             : 選択範囲をペーストバッファにヤンク
	V%                              : 対応するところまで選択
	V}J                             : 選択範囲を連結(great)
	V}gJ                            : 選択範囲を連結。スペースをはさまずに
	----------------------------------------
	" 以下10行の最初の2文字を削除する
	0<c-v>10j2ld
	----------------------------------------
	" 矩形選択を使って列をコピーする
	" <C-V> それから移動コマンドを使って列を選択し、c,d,y,r など
	then c,d,y,r etc
	----------------------------------------
	" 矩形選択範囲のテキストを別のブロックで上書きする方法
	最初のブロックを拾う: ctrl-v 移動 "ay
	2番めのブロックを拾う: ctrl-v 移動 c ctrl-o "aP <esc>
	----------------------------------------
	" _vimrc essentials
	:set incsearch : タイプする度に単語を検索してジャンプする(annoying but excellent)
	:set wildignore=*.o,*.obj,*.bak,*.exe : タブ補完がこれらを無視するようになる
	:set shiftwidth=3                     : シフト／タブに関係する
	:set vb t_vb=".                       : 静かにさせる（ビープを止める）
	:set browsedir=buffer                 : GUI の「ファイルを開く」ダイアログでカレントバッファ
											のディレクトリをカレントディレクトリにさせる。
	----------------------------------------
	" Windows インターネットエクスプローラを起動する
	:nmap ,f :update<CR>:silent !start c:\progra~1\intern~1\iexplore.exe file://%:p<CR>
	:nmap ,i :update<CR>: !start c:\progra~1\intern~1\iexplore.exe <cWORD><CR>
	----------------------------------------
	" FTPing from VIM
	cmap ,r  :Nread ftp://209.51.134.122/public_html/index.html
	cmap ,w  :Nwrite ftp://209.51.134.122/public_html/index.html
	gvim ftp://www.somedomain.com/index.html # uses netrw.vim
	----------------------------------------
	" レジスタに追加する (大文字にする)
	" 5行を "a" にヤンクし、さらに5行追加する
	"a5yy
	10j
	"A5yy
	----------------------------------------
	[I     : カーソル下の単語 <cword> にマッチする行を一覧表示 (super)
	----------------------------------------
	" 昔ながらのシフト／インデント
	:'a,'b>>
	" 選択してシフト (選択範囲が解除されないのでそのまま繰り返せる)
	:vnoremap < <gv
	:vnoremap > >gv
	" ブロックをシフトする (magic)
	>i{
	>a{
	" または
	>% and <%
	----------------------------------------
	" リダイレクトとペーストレジスタ *
	:redir @*                    : コマンドの出力をペーストバッファにリダイレクト
	:redir END                   : リダイレクト終了
	:redir >> out.txt            : ファイルへリダイレクト
	" ペーストバッファを使う
	"*yy                         : ペーストバッファにヤンク
	"*p                          : ペーストバッファから貼り付け
	" ペーストバッファにヤンク
	:'a,'by*                     : 範囲をヤンク
	:%y*                         : バッファ全体をヤンク
	:.y*                         : 現在行をヤンク
	" 印字不能文字をフィルタする
	" gui アプリから貼りつけたときに便利
	:nmap <leader>p :let @* = substitute(@*,'[^[:print:]]','','g')<cr>"*p
	----------------------------------------
	" テキストの整形
	gq}                          : パラグラフを整形する
	gqap                         : パラグラフを整形する
	ggVGgq                       : ファイル全体を整形
	Vgq                          : 現在行
	" 70 文字目で改行を挿入する。できるなら ; の後で
	:s/.\{,69\};\s*\|.\{,69\}\s\+/&\r/g
	----------------------------------------
	" コマンドを複数ファイルに対して実行
	:argdo %s/foo/bar/e          : :args のすべてのファイルに対して実行
	:bufdo %s/foo/bar/e
	:windo %s/foo/bar/e
	:argdo exe '%!sort'|w!       : 外部コマンドを含む例
	----------------------------------------
	" コマンドラインのトリック
	gvim -h                    : help
	ls | gvim -                : ストリームを編集する！
	cat xx | gvim - -c "v/^\d\d\|^[3-9]/d " : ストリームをフィルタする
	gvim -o file1 file2        : 分割して開く
	" ファイルを開いた後でコマンドを実行する
	gvim.exe -c "/main" joe.c  : Open joe.c & jump to "main"
	" 1つのファイルに複数のコマンドを実行する
	vim -c "%s/ABC/DEF/ge | update" file1.c
	" 複数ファイルに複数コマンドを実行する
	vim -c "argdo %s/ABC/DEF/ge | update" *.c
	" 複数ファイルからテキストのブロックを削除
	vim -c "argdo /begin/+1,/end/-1g/^/d | update" *.c
	" ファイルの編集を自動化する（convert.vim中のExコマンド）
	vim -s "convert.vim" file.c
	#.vimrcとプラグインを読まずにVIMを起動する(clean VIM)
	gvim -u NONE -U NONE -N
	" Access paste buffer contents (put in a script/batch file)
	" ペーストバッファの中身にアクセス（スクリプトかバッチファイルに書く）
	gvim -c 'normal ggdG"*p' c:/aaa/xp
	" ペーストバッファの中身をデフォルトのプリンタに出力
	gvim -c 's/^/\=@*/|hardcopy!|q!'
	" gvim の外部grepの使い道(Win32 or *nix)
	:grep somestring *.php     : creates a list of all matching files
	" リストを進む・戻るには :cn(ext) :cp(rev)
	:h grep

	----------------------------------------
	" diff 機能 (Brilliant)
*	dp                         : カーソル下の差分を他方のファイルに "put" する
*	do                         : カーソル下の差分を他方のファイルから "get" する
	----------------------------------------
	" Vim のトラップ
	正規表現 バックスラッシュが必要 \+ （1個以上）
	正規表現 バックスラッシュが必要 \| （or）
	正規表現 バックスラッシュが必要 \( （グループ化）
	正規表現 バックスラッシュが必要 \{ （繰り返し）
	/fred\+/                   : fredまたはfreddyにマッチ。しかしfreeにはマッチしない
	/\(fred\)\{2,3}/           : note what you have to break
	----------------------------------------
	" \v または very magic (usually) を使うとバックスラッシュの数を減らせる
	/codes\(\n\|\s\)*where  : 通常の正規表現
*	/\vcodes(\n|\s)*where   : very magic
	----------------------------------------
	" オブジェクトをコマンド／検索ラインにひっぱり出す (SUPER)
*	<C-R><C-W> : カーソル下の word をコマンドラインや検索にひっぱり出す
	<C-R><C-A> : カーソル下の WORD をコマンドラインや検索にひっぱり出す
	<C-R>-                  : スモールレジスタの中身を挿入 (also insert mode)
	<C-R>[0-9a-z]           : 名前付きレジスタの中身を挿入 (also insert mode)
	<C-R>%                  : ファイル名を挿入 (# も可) (also insert mode)
	<C-R>=somevar           : 変数の値を挿入 (例 :let sray="ray[0-9]")
	----------------------------------------
	" レジスタ操作
	:let @a=@_              : レジスタaをクリア
	:let @a=""              : レジスタaをクリア
	:let @*=@a              : レジスタaをペーストバッファにコピー
	:let @*=@:              : 最後のコマンドをペーストバッファにコピー
	:let @*=@/              : 最後の検索語をペーストバッファにコピー
	:let @*=@%              : 現在のファイル名をペーストバッファにコピー
	----------------------------------------
	" help for help (USE TAB)
	:h quickref             : VIM クイックリファレンスシート (ultra)
	:h tips                 : Vim 自身の tips help
*	:h visual<C-D><tab>     : visual に関するヘルプを全部リストする
							: その後 tab でそれらを1個1個回っていける
*	:h ctrl<C-D>            : コントロールキーのヘルプを全部リストする
*	:helpg uganda           : grep HELP Files use :cn, :cp to find next
*	:helpgrep edit.*director: 正規表現を使ってヘルプを検索
*	:h :r                   : :ex コマンドのヘルプ
	:h CTRL-R               : ノーマルモード
	:h /\r                  : 正規表現中で \r は何を意味するか(<CR>にマッチする)
	:h \\zs                 : ヘルプで \zs を見つけるにはバックスラッシュを2個にする
	:h i_CTRL-R             : インサートモードでの<C-R>のヘルプ
	:h c_CTRL-R             : コマンドモードでの<C-R>のヘルプ
	:h v_CTRL-V             : ヴィジュアルモード
	:h tutor                : VIM チュートリアル
	<C-[>, <C-T>            : ヘルプの履歴を前後に移動
	gvim -h                 : VIM コマンドラインヘルプ
	----------------------------------------
	" このオプションはどこで :set されたのか
	:scriptnames            : 読み込まれたプラグイン, _vimrc らを全て表示(super)
	:verbose set history?   : history の値とどこで設定されたかを表示
	:function               : 関数をリストする
	:func SearchCompl       : 特定の関数をリストする
	----------------------------------------
	" 独自の vim help を作る
	:helptags /vim/vim64/doc  : rebuild all *.txt help files in /doc
	:help add-local-help
	----------------------------------------
	" ファイルに外部プログラムをかける(例 php)
	map   <f9>   :w<CR>:!c:/php/php.exe %<CR>
	map   <f2>   :w<CR>:!perl -c %<CR>
	----------------------------------------
	" 現在のスクリプトの出力を別のバッファに出力する
	:new | r!perl #                   : 新しいバッファを開き、それまでいたバッファの実行結果を読み込む
	:new! x.out | r!perl #            : 上と同様。名前付きのファイル。
	:new+read!ls
	----------------------------------------
	" 新規バッファを作り、その中にレジスタqをペーストし、新バッファをソートする
	:new +put q|%!sort
	----------------------------------------
	" DOS 改行を挿入する
	:%s/$/\<C-V><C-M>&/g          :  that's what you type
	:%s/$/\<C-Q><C-M>&/g          :  for Win32
	:%s/$/\^M&/g                  :  what you'll see where ^M is ONE character
	----------------------------------------
	" 自動的に行末のDOS改行、ホワイトスペースを削除
*	autocmd BufRead * silent! %s/[\r \t]\+$//
*	autocmd BufEnter *.php :%s/[ \t\r]\+$//e
	----------------------------------------
	" 特定のファイルやファイルタイプに対してアクションを引き起こす
	autocmd VimEnter c:/intranet/note011.txt normal! ggVGg?
	autocmd FileType *.pl exec('set fileformats=unix')
	----------------------------------------
	" 最後のコマンドラインコマンドをテキストに挿入する
*	i<c-r>:
	" 最後の検索語をテキストに挿入する
	i<c-r>/
	----------------------------------------
	" さらなる補完
	<C-X><C-F>                        :カレントディレクトリのファイル名を挿入
	 ----------------------------------------
	 " 選択範囲内で置換
	 " 普通に選択して(:h visual) :s/Emacs/Vim/ などとタイプする
	 :'<,'>s/Emacs/Vim/g               : '<.'> はタイプする必要ない
	 gv                                : 前に選択した範囲を再選択 (ULTRA)
	 ----------------------------------------
	 " ファイルに行番号を挿入
*	 :g/^/exec "s/^/".strpart(line(".")."    ", 0, 4)
	:%s/^/\=strpart(line(".")."     ", 0, 5)
	 ━━━━━━━━━━━━━━ :%s/^/\=line('.'). ' '
	----------------------------------------
	 #numbering lines VIM way
	 :set number                       : 行番号を表示
*	 :map <F12> :set number!<CR>       : 行番号を表示（トグル）
	:%s/^/\=strpart(line('.')."        ",0,&ts)
	 ━━━━━━━━━━━━━━ 任意の数字から始めて行を番号づける（PC上では Perl が必要）
	:'a,'b!perl -pne 'BEGIN{$a=223} substr($_,2,0)=$a++'
	 #数字のリストを生成
	 #Type in number on line say 223 in an empty file
	 qqmnYP`n^Aq                       : q にレコードするので @q で繰り返す
	 " ファイルの最後まで、すでにある数字をインクリメント(type <c-a> as 5 characters)
	 :.,$g/^\d/exe "normal! \<c-a>"
	" 高度なインクリメンティング
	 ━━━━━━━━━━━━━━ http://vim.sourceforge.net/tip_view.php?tip_id=150
	----------------------------------------
	" 高度なインクリメンティング (really useful)
	 ━━━━━━━━━━━━━━ " 以下を _vimrc に書く
	let g:I=0
	function! INC(increment)
	let g:I =g:I + a:increment
	return g:I
	endfunction
	" 例）マークa,bの間に223から始まり5ずつ増えるリストを作成
	:let I=223
	:'a,'bs/^/\=INC(5)/
	" create a map for INC
	 cab viminc :let I=223 \| 'a,'bs/$/\=INC(5)/
	----------------------------------------
	" 23から64までの数字を挿入する
	o23<ESC>qqYp<C-A>q40@q
	 ----------------------------------------
	" 現在のインサートモード内での編集／移動 (Really useful)
	<C-U>                             : 挿入したテキストをすべて削除
	<C-W>                             : 最後の単語を削除
	 <HOME><END>                       : 行頭／行末
	<C-LEFTARROW><C-RIGHTARROW>       : 単語移動
	<C-X><C-E>,<C-X><C-Y>             : インサートモードを抜けずにスクロール
	----------------------------------------
	 #暗号化 (使うときは鍵を忘れないように）
	 :X                                : 鍵の入力を促される
	 :h :X
	----------------------------------------
	" モードライン（ファイルを読み込み専用にするなど）は最初/最後の5行以内に無ければならない
	// vim:noai:ts=2:sw=4:readonly:
	 " vim:ft=html:                    : HTML 構文強調を使うように指示
	:h modeline
	----------------------------------------
	" 独自の GUI ツールバーのエントリを作る
	 amenu  Modeline.Insert\ a\ VIM\ modeline <Esc><Esc>ggOvim:ff=unix ts=4 ss=4<CR>vim60:fdm=marker<esc>gg
	 ----------------------------------------
	" カーソル下の単語をファイルに保存する関数
	function! SaveWord()
	   normal yiw
		exe ':!echo '.@0.' >> word.txt'
	endfunction
	map ,p :call SaveWord()
	----------------------------------------
	 " 重複する行を削除する関数
	 function! Del()
	 if getline(".") == getline(line(".") - 1)
	   norm dd
	 endif
	 endfunction

	:g/^/ call Del()
	----------------------------------------
	" 合字 (非アルファベット・数字）
	 :digraphs                         : display table
	:h dig                            : help
	i<C-K>e'                          : enters
	i<C-V>233                         : enters   (Unix)
	 i<C-Q>233                         : enters   (Win32)
	ga                                : View hex value of any character
	# 非アスキー文字を削除する(いくつかは不可視文字)
	:%s/[<C-V>128-<C-V>255]//gi       : Control-v をタイプすること
	 :%s/[ - ]//gi                     : Should see a black square & a dotted y
	:%s/[<C-V>128-<C-V>255<C-V>01-<C-V>31]//gi : All pesky non-asciis
	:exec "norm /[\x00-\x1f\x80-\xff]/"        : same thing
	#Pull a non-ascii character onto search bar
	 yl/<C-R>"                         :
	/[^a-zA-Z0-9_[:space:][:punct:]]  : すべての非アスキーを検索する
	----------------------------------------
	" All file completions grouped (for example main_c.c)
	 :e main_<tab>                     : タブ補完
	gf                                : カーソル下のファイル名を開く  (normal)
	main_<C-X><C-F>                   : ファイル名を挿入 (insert mode)
	----------------------------------------
	 " Complex Vim
	" 2つの単語をスワップする
*	:%s/\<\(on\|off\)\>/\=strpart("offon", 3 * ("off" == submatch(0)), 3)/g
	" swap two words
	 :vnoremap <C-X> <Esc>`.``gvP``P
	----------------------------------------
	" テキストファイルを html に変換する
*	:runtime! syntax/2html.vim        : txt を html に変換する
	 :h 2html
	----------------------------------------
	" vim 内部から grep。（vim7からはvimに組み込みのgrepもある。:h vimgrep）
	:grep some_keyword *.c            : some_keyword を含む .c ファイルのリストを得る
	 :cn                               : 次のヒット場所にジャンプ
	----------------------------------------
	" 拡張子が .pl でないファイルの色づけを強制的に Perl のものにする
	:set syntax=perl
	 " 色づけをやめる (useful for all sorts of reasons)
	:set syntax off
	" カラースキームを変更 (any file in ~vim/vim??/colors)
	:colorscheme blue
	 " モードラインによって html の色づけをさせる
		今回はすでに用意されているカラースキーマを利用することにします。 カラースキーマの場所
		~/vimfiles/colors
		ホームディレクトリにvimfilesディレクトリがない場合は作成します。
		mkdir vimfiles ;mkdir vimfiles/colors
		ウェブで配布されているものもしくは、/usr/share/vim/vim71/colorsにあるカラースキーマを ~/vimfiles/colors内にコピーします。
		今回は、巷で人気のzenburnを設定します。
			(ubuntu-example)
			you@ecolnux:~/vimfiles/colors$ ls /usr/share/vim/vim71/colors/
			README.txt  darkblue.vim  delek.vim   elflord.vim  koehler.vim  murphy.vim  peachpuff.vim  shine.vim  torte.vim
			blue.vim    default.vim   desert.vim  evening.vim  morning.vim  pablo.vim   ron.vim        slate.vim  zellner.vim

			cd ~/vimfiles/colors/
			wget http://slinky.imukuppi.org/zenburn/zenburn.vim
		ファイルを配置したらvimの設定ファイルを開きます。 設定ファイルの一番下に以下を追加します。
		gvim ~/.vimrc
		colorscheme zenburn
	# vim:ft=html:
	" 自動的に色づけを強制する (非標準の拡張子をもつファイルのために）
	au BufRead,BufNewFile */Content.IE?/* setfiletype html
	----------------------------------------
	:set noma (non modifiable)        : ファイルの変更を阻止する
	:set ro (Read Only)               : 意図しないファイルの書き込みを阻止する
	----------------------------------------
	" セッション（ファイルのセットを開く）
	gvim file1.c file2.c lib/lib.h lib/lib2.h : 「セッション」用のファイルを読み込む
	:mksession                        : Session ファイルを作成 (デフォルトでは Session.vim)
	:q
	gvim -S Session.vim               : すべてのファイルを読み直す
	----------------------------------------
	#tags (サブルーチン／関数へジャンプ）
	taglist.vim                       : 人気の高いプラグイン
	:Tlist                            : タグを表示（関数のリスト）
	<C-]>                             : カーソル下の関数へジャンプ
	----------------------------------------
	" columnise a csv file for display only as may crop wide columns
	:let width = 20
	:let fill=' ' | while strlen(fill) < width | let fill=fill.fill | endwhile
	:%s/\([^;]*\);\=/\=strpart(submatch(1).fill, 0, width)/ge
	:%s/\s\+$//ge
	" csv の特定のカラムをハイライト (put in .vimrc)
	function! CSVH(x)
		execute 'match Keyword /^\([^,]*,\)\{'.a:x.'}\zs[^,]*/'
		execute 'normal ^'.a:x.'f,'
	endfunction
	command! -nargs=1 Csv :call CSVH(<args>)
	" call with
	:Csv 5                             : 5番めのカラムをハイライト
	----------------------------------------
	" 折り畳み : hide sections to allow easier comparisons
	zf}                               : モーションを使ってパラグラフを折り畳む
	v}zf                              : ヴィジュアル選択を使ってパラグラフを折り畳む
	zf'a                              : マーク位置までを折り畳む
	zo                                : 折り畳みを開く
	zc                                : 折り畳みをまた閉じる
	----------------------------------------
	" 不可視文字を表示
	:set list
	:h listchars
	----------------------------------------
	" インサートモードに入らずに「ノーマルコマンド」をペーストする方法
	:norm qqy$jq
	----------------------------------------
	" ファイル名操作
*	:h filename-modifiers             : ヘルプ
	:w %                              : 現在のファイル名に書き出す
*	:w %:r.cfm                        : 拡張子を .cfm に変える
	:!echo %:p                        : フルパス＆ファイル名
	:!echo %:p:h                      : フルパスオンリー
	:!echo %:t                        : ファイル名オンリー
*	:reg %                            : ファイル名を表示
*	<C-R>%                            : ファイル名を挿入 (insert mode)
*	"%p                               : ファイル名を挿入 (normal mode)
	/<C-R>%                           : テキスト中からファイル名を検索
	----------------------------------------
	" 無名レジスタに記録せずに削除
	"_d                               : what you've ALWAYS wanted
	"_dw                              : eg delete word (use blackhole)
	----------------------------------------
	" フルパスをペーストバッファにコピー。emailに貼り付けるときなんかに
	nnoremap <F2> :let @*=expand("%:p")<cr> :unix
	nnoremap <F2> :let @*=substitute(expand("%:p"), "/", "\\", "g")<cr> :win32
	----------------------------------------
	" vim を抜けずにファイルをリネームするシェルスクリプト
	$ vim
	:r! ls *.c
	:%s/\(.*\).c/mv & \1.bla
	:w !sh
	:q!
	----------------------------------------
	" ファイル中の単語数を数える
*	g<C-G>
	----------------------------------------
	" 独自のハイライティングを定義する例
	:syn match DoubleSpace "  "
	:hi def DoubleSpace guibg=#e0e0e0
	----------------------------------------
	" 上の行を現在行に単語ごとにコピーする
	imap ]  @@@<ESC>hhkyWjl?@@@<CR>P/@@@<CR>3s
	nmap ] i@@@<ESC>hhkyWjl?@@@<CR>P/@@@<CR>3s
	" Programming keys depending on file type
	:autocmd bufenter *.tex map <F1> :!latex %<CR>
	:autocmd bufenter *.tex map <F2> :!xdvi -hush %<.dvi&<CR>
	----------------------------------------
	" Ms-Word のドキュメントを読む, antiword が必要
	:autocmd BufReadPre *.doc set ro
	:autocmd BufReadPre *.doc set hlsearch!
	:autocmd BufReadPost *.doc %!antiword "%"
	----------------------------------------
	" 折り畳み法
*	vim: filetype=help foldmethod=marker foldmarker=<<<,>>>
	A really big section closed with a tag <<<
	--- remember folds can be nested ---
	Closing tag >>>
	----------------------------------------
	" Just Another Vim Hacker JAVH
	vim -c ":%s%s*%Cyrnfr)fcbafbe[Oenz(Zbbyranne%|:%s)[[()])-)Ig|norm Vg?"
	----------------------------------------

#Tanablog
#[Vim] Vim7 内蔵の grep を使う
	Vim7 内蔵の grep を使うには :vimgrep コマンドを使えばよい。
	:vimgrep /hogehoge/ *.txt

	最初にマッチしたファイルを開かないようにするには j フラグを使う。
	:vimgrep /hogehoge/j *.txt

	再帰的に検索するには **(starstar) を使う。
	:vimgrep /hogehoge/j **/*.txt

	検索結果は Quickfixリストに表示される。:copen で開き :ccl で閉じることができる。詳細は :he quickfix-window。
	:vimgrep /hoge/j **/*.txt | cwin	とやると、copenしなくてもQuickfixが開いてくれて幸せです。
		au QuickfixCmdPost make,grep,grepadd,vimgrep copen	#vimgrepやmake後にQuickFixウィンドウを自動的に開く方法[vim]
	パイプで次に入力したいコマンドを繋げられる。

	vimgrep をデフォルトの grep プログラムとして使用する
	:grep を :vimgrep のエイリアスにするには、gvimrc に以下の行を追加する。
	:set grepprg=internal

	:cn	:cp	vim vimgrepと併用してジャンプに使う cn, cp[vim]


設定関連 オプション一覧 誰か親切な人が ./options に纏めてくれました。
	よく設定ファイルに書くコマンド
	  ? 頭の : は省略してます。
	  ? set ほげほげ系は noほげほげというように頭に no を付ける事でその機能の off/on を行
		います。
		set ignorecase                       検索文字列が小文字の場合は大文字小文字を区別
	検                                       なく検索する
	索  set smartcase                        検索文字列に大文字が含まれている場合は区別し
	関                                       て検索する
	連  set wrapscan                         検索時に最後まで行ったら最初に戻る
		set noincsearch                      検索文字列入力時に順次対象文字列にヒットさせ
											 ない
		set number                           行番号を表示させる
		set nolist                           タブや改行を表示しない（表示する場合は行末が$
											 、TABが^Iで表示される）
		set tabstop=4                        タブ幅を４文字にする
		set shiftwidth=4                     cindentやautoindent時に挿入されるタブの幅（
	装                                       tabstop と揃えておくと良い）
	飾  set showmatch                        括弧入力時の対応する括弧を表示
	関  syntax on                            シンタックスハイライトを有効にする
	連  set hlsearch                         検索結果文字列のハイライトを有効にする
		set laststatus=2                     ステータスラインを常に表示（編集中のファイル
											 名が常に確認できるようになる）
		set showcmd                          入力中のコマンドをステータスに表示する
		set statusline=%<%f\ %m%r%h%w%{'['.  ステータスラインに文字コードと改行文字を表示
		(&fenc!=''?&fenc:&enc).']['.&ff.']'} する
		%=%l,%c%V%8P
	そ                                       編集中の内容を保ったまま別の画面に切替えられ
	の  set hid                              るようにする(デフォルトだと一度保存しないと切
	他                                       り替えられない)

	よく使うマップ定義†

	僕（=KaWaZ）が普段設定しているマップ定義です。

	F2 map <F2> <ESC>:bp<CR> 前のバッファ
	F3 map <F3> <ESC>:bn<CR> 次のバッファ
	F4 map <F4> <ESC>:bw<CR> バッファを削除する
	j  nnoremap j gj         表示行単位で行移動するようにする
	k  nnoremap k gk

	オプション一覧†

	これ以外のオプション一覧は ./options にあります。

	ただし、最新バージョンの全てのオプションを網羅できていないかもしれません。


文字コードの自動認識†
	以下を .vimrc に書いておけば日本語の文字コード識別は多分完璧 :D
	" 文字コードの自動認識
	if &encoding !=# 'utf-8'
	  set encoding=japan
	  set fileencoding=japan
	endif
	if has('iconv')
	  let s:enc_euc = 'euc-jp'
	  let s:enc_jis = 'iso-2022-jp'
	  " iconvがeucJP-msに対応しているかをチェック
	  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
		let s:enc_euc = 'eucjp-ms'
		let s:enc_jis = 'iso-2022-jp-3'
	  " iconvがJISX0213に対応しているかをチェック
	  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
		let s:enc_euc = 'euc-jisx0213'
		let s:enc_jis = 'iso-2022-jp-3'
	  endif
	  " fileencodingsを構築
	  if &encoding ==# 'utf-8'
		let s:fileencodings_default = &fileencodings
		let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
		let &fileencodings = &fileencodings .','. s:fileencodings_default
		unlet s:fileencodings_default
	  else
		let &fileencodings = &fileencodings .','. s:enc_jis
		set fileencodings+=utf-8,ucs-2le,ucs-2
		if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
		  set fileencodings+=cp932
		  set fileencodings-=euc-jp
		  set fileencodings-=euc-jisx0213
		  set fileencodings-=eucjp-ms
		  let &encoding = s:enc_euc
		  let &fileencoding = s:enc_euc
		else
		  let &fileencodings = &fileencodings .','. s:enc_euc
		endif
	  endif
	  " 定数を処分
	  unlet s:enc_euc
	  unlet s:enc_jis
	endif
	" 日本語を含まない場合は fileencoding に encoding を使うようにする
	if has('autocmd')
	  function! AU_ReCheck_FENC()
		if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
		  let &fileencoding=&encoding
		endif
	  endfunction
	  autocmd BufReadPost * call AU_ReCheck_FENC()
	endif
	" 改行コードの自動認識
	set fileformats=unix,dos,mac
	" □とか○の文字があってもカーソル位置がずれないようにする
	if exists('&ambiwidth')
	  set ambiwidth=double
	endif

	vim の文字コード判定の仕組みは以下の通りです。

	  ? fileencodings の設定を前から順に試してはじめにマッチしたものが採用される
	  ? encoding や fileencoding の設定値が途中に発見されるとそこで判定を止めてしまい後の
		設定は無視される
		  □ この動作により、UNIX環境(euc-jpの場合)では euc-jp が fileencodings の前の方に
			設定されていると、cp932 や utf-8 で書いたファイルが文字化けてしまうので気をつ
			ける必要がある。
	  ? encoding に設定される文字コードは fileencodings に見つからなかったときのデフォルト
		値に使われるので fileencodings に設定する必要は無い。

	上記の設定では実行環境に合わせてそれらが吸収できるので windows 環境でも unix 環境でも
	上手く判定できる。

	■追記

	  ? EUC-JPで「～(波線)」が文字化ける問題を修正（eucjp-msが使える場合はそれを使うように
		）した。 2006-10-06 (金) 02:24
	  ? fileencoding=utf-8で編集中、□や○があるとその行でカーソル位置がずれる問題があった
		のだが、解決する設定（ambiwidth=double）を追加した。 2006-11-17 (金) 21:48
	  ? 日本語を含まないファイルを開いたときにfileencodingがiso-2022-jpになってしまう問題
		があったが、日本語の有無を再チェックしてより望ましい値（encodingの値）を
		fileencodingに設定するようにした。 2007-01-10 (水) 11:38


	文字コードを指定してファイルを開きなおす†

	普通は上記の自動認識で問題ないと思うが、それでも文字化けする場合や、わざと違う文字コー
	ドで開いてみたい場合に使う。

	例えば以下のようにするとeuc-jpでファイルを開き直せる。

	:e ++enc=euc-jp


	文字コードを変更して保存する†

	cp932 (Shift-JIS) にするには以下のようにする。

	:set fileencoding=cp932

	この状態だとまだ保存してないので :w してやれば文字コードを変更して保存になる。


改行コードの自動認識†
	以下を .vimrc に書いておけばよい。
	set fileformats=unix,dos,mac
	新規ファイルの場合 fileformats の最初の改行コードが使われるようなので好みにより順番を
	変えます。
	順番を変えても自動判定が失敗することは経験上無いようです。


	改行コードを変更する†

	:set fileformat=改行コードの種類

	ff は fileformat の短い形式なので ff でも良い。
	改行コードの種類で指定できるのは dos, max, unix の３つです。

	例）Windows形式の改行コードに変更するには以下のようにします。

	:set fileformat=dos


	改行コードの見分け方（UNIX環境前提）†

	改行コードが unix でない場合、^M という文字が大量に表示されることがあります。これは
	mac で使われる改行文字です。これを見たらきっと改行コードが違うんだなと思ってください。

	見分け方は以下の通りです。

	 1. 普通に改行されていて特に問題を感じない→改行コードは unix
	  2. 全ての行末に ^M がくっついている→改行コードは dos
	 3. ^M が沢山表示されるうえに全てが1行に表示されてしまう→改行コードは mac

	改行コードが分かったら以下を実行すれば正常に表示されるようになります。(dosと分かった場
	合)

	 :e ++ff=dos


検索語が画面の真ん中に来るようにする† .vimrc に以下のようなキーマッピングを書いておきます。
	nmap n nzz
	nmap N Nzz
	nmap * *zz
	nmap # #zz
	nmap g* g*zz
	 nmap g# g#zz

	解説：zz はカレント行を画面の中心にします。（つまり n で検索語にカーソル移動したら勝手
	に zz でカレント行が画面の真ん中なるようにスクロールされるようになる）


暗号化†

	 vim は単体で PKZIP とかと同じ暗号化アルゴリズムでファイルを暗号化することが出来ます。
	 1. ファイルを暗号化する
		 1. 暗号化したいファイルを以下のように -x オプションを付けて起動します。

			vim -x secret.txt

		 2. 起動すると暗号化に使うパスワードの入力を求められます。確認の為２回聞かれます。
		 3. 開いたら今まで通り普通にファイルの編集画面になります。
		 4. このまま普通に :w などで保存すればファイルは暗号化して保存されます。
	 2. 暗号化されたファイルを編集する
		 1. vim によって暗号化されたファイルを開くには普通に vim で開くだけです。

			vim secret.txt

		 2. 起動時にパスワードを要求するプロンプトが出るので正しいパスワードを入れれば普通
			に開いて編集できます。
		 3. 間違ったパスワードを入れても復号化されますがそれは意味の無い只のバイナリデータ
			に見えるはずです。
	 3. 暗号化を解除する、もしくはパスワードを変更する。
		 1. まずは普通に起動してパスワードを入力してファイルを開きます。
		 2. 以下のコマンドを実行すると新しいパスワードを要求されます。

			:X

		 3. パスワードの変更後は普通に保存すれば新しいパスワードで暗号化されて保存されます
			。
		 4. 暗号化を解除したい場合は :X でパスワードを空（何も入力せずにEnter）にして保存
			するだけです。
	 4. 注意点
		 1. 保存されたファイルは暗号化されますが、スワップファイルは暗号化されません。それ
			を読むことが出来る人はパスワードを知らなくても内容を見ることが出来ます。
			 1. vim の起動時に -n を付けて起動すればスワップファイルは作成されません。


	バイナリ編集†

	vim でバイナリを編集したい場合ですが、よくある16進ダンプとそれのテキスト表示があると便
	利です。

	探してみたところこのサイトで xxd を使ってバイナリ編集をする方法を紹介していたので試し
	てみたところ便利そうなのでメモ。
	但しそのままだと少し問題があった*1 のでそれを修正した版が以下の設定です。

"バイナリ編集(xxd)モード（vim -b での起動、もしくは *.bin ファイルを開くと発動します）
	augroup BinaryXXD
	  autocmd!
	  autocmd BufReadPre  *.bin let &binary =1
	  autocmd BufReadPost * if &binary | silent %!xxd -g 1
	  autocmd BufReadPost * set ft=xxd | endif
	  autocmd BufWritePre * if &binary | %!xxd -r | endif
	  autocmd BufWritePost * if &binary | silent %!xxd -g 1
	  autocmd BufWritePost * set nomod | endif
	augroup END

コメント†
	  ? putty 繋げてリモートでvim使ってるときにIME使うとよくいらつくので、keylay21でキーボードレイアウトを変えると便利。 -- KaWaZ 2003-08-14 (木) 18:15:41
	  ? 文字コード自動認識だが、Fedora Core の日本語環境は UTF-8 な為、その場合も対応できるように修正した。 -- KaWaZ 2004-05-25 (火) 18:21:41
	  ? 「文字コードの自動認識」を使用していますが、EUC-JPのファイルで～を使用すると化けますが、これはUTF-8→EUC-JPの限界ですか？ -- 通りすがり? 2006-10-04 (水) 10:56:36
		  □ 指摘サンクスです。EUC-JPのファイルで～等の文字を使えるようにしました。(iconvがeucjp-msに対応していれば) -- KaWaZ 2006-10-06 (金) 02:32:31
		  □ ついでにencodingがeucjpだった場合の処理が間違ってたのでそれも修正しました。添付の .vimrc も修正してあります。 -- KaWaZ 2006-10-06 (金) 02:32:31
	  ? 文字コードの自動認識で、新規作成は期待通りEUC-JPになるのですが、日本語を含まないファイルを開いた時にISO-2022-JPになってしまうのが困っています。fileencodingsの先頭にEUC-JPを書くと自動認識されなくなってしまいますし、難しいですね。 -- 2006-12-07 (木) 00:20:41
		  □ ISO-2022-JPとして認識した時に本当に日本語が含まれているかどうかをチェックして、日本語が含まれていなかったらencodingの値をfileencodingに使うように修正してみました。これにより日本語を含まないファイルでも eucjp がデフォの環境では eucjpが、utf-8 な環境では utf-8 で開けるようになりました。-- KaWaZ 2007-01-10 (水) 11:23:49
	  ? ++encが何かは分からないのですが:view ++enc=sjisこうゆう事も出きるんですね.見れないファイルがあって参考に成りました. -- en? 2008-08-20 (水) 20:44:46


vimからコマンドを実行し、その結果をバッファに取り込むことが可能です。
	:r!pwd 
	:. 
	:.!date
	:diffsplit を知った。便利だ。 -- KaWaZ 2003-10-30 (木) 18:22:17

	colordiff		diff file1 file2 | vim -vimでdiffをカラフルにして見る方法[vim]
	]c [c	vim vimdiffで差分の場所でジャンプする方法[vim]
	]p	vim インデントの深さに合わせて貼り付けをする方法[vim]
$HOME/.vimrc
	set autochdir
	au QuickfixCmdPost make,grep,grepadd,vimgrep copen	#vimgrepやmake後にQuickFixウィンドウを自動的に開く方法[vim]

	yzis	vimよりもより機能が強力で高速を目指すyzis[vim]

	#VIM CONFIG PARAMETERS:---------------------------------------------
		aleph	初期値：MS-DOSでは128、それ以外では224

		ヘブライ語アルファベットの最初の文字を表すASCIIコード。


		allowrevins	初期値：オフ

		CTRL-_で'revins'オプションをトグルさせる。挿入モードとコマンドラインモードで CTRL-_ を使用可能
		にする。これは既定ではオフになっている。ユーザが間違って SHIFT-_ ではなく CTRL-_ を打ち込み、
		右から左に書いていくモードに入って抜けられなくなる事態を防ぐためである。


		altkeymap	初期値：オフ

		編集モードで CTRL-_ で Farsi と英語のキーボードマップを切り替えられる。


		autoindent	初期値：オフ

		新しい行を開始したときに、新しい行のインデントを現在行と同じ量にする。新しい行で &lt;BS&gt; か
		CTRL-D 以外を打ち込まずに &lt;Esc&gt; か &lt;CR&gt; を打ち込むと、その行のインデントは削除され
		る。オプション 'autoindent' がオンのときは、テキストの整形処理 (コマンド "gq" を使ったり、挿入
		モードで1行の文字数が 'textwidth' に届いたとき) には最初の行のインデントが使われる。オプション
		'smartindent' オプションか 'cindent' がオンのときは、インデントの方法は違ってくる。オプション
		'paste' オプションがオンになると 'autoindent' はオフになる。


		autoread	初期値：オフ

		外部のエディタで編集中のファイルが変更されたら、自動的に読み直す。ファイルが削除された場合は読
		み直さない。


		autowrite	初期値：オフ

		自動的にファイルに保存する。 :next, :rewind, :last, :first, :previous, :stop, :suspend, :tag,
		:! :make, CTRL-], CTRL-^ のコマンドを実行するたび、ファイルが変更されていれば、そのファイルを
		保存する。


		autowriteall	初期値：オフ

		autowriteよりもさらに多くのコマンドで自動保存する。 'autowrite' と同様のオプションだが、さらに
		":edit", ":quit", ":qall"コマンド ":exit", ":xit", ":recover" でも、ファイルが変更されているな
		ら保存する。またVimのウィンドウを閉じる際にも保存する。このオプションをオンにすると、オプショ
		ン 'autowrite' も同時にオンになったようになる。


		background	初期値："dark" または "light"

		見やすい色を表示するようにVimに背景色を教える。 "dark" に設定されていると、Vimは暗い背景によく
		合う色を使おうとする。"light" に設定されていると、Vimは明るい背景によく合う色を使おうとする。
		その他の値は無効である。


		backspace	初期値：""

		バックスペースキーの動作を決定する。

		値     効果
		indent autoindent を超えてバックスペースを働かせる
		eol    改行を超えてバックスペースを働かせる (行を連結する)
		start  挿入区間の始めでバックスペースを働かせるが CTRL-W と CTRL-U は挿入区間の始めでいったん
			   止まる

		値が空のときは、Vi互換のバックスペーシングが使われる。バージョン 5.4 またはそれ以前との互換性
		にはこう設定する:

		値 効果
		0  ""と同じ
		1  "indent,eol"と同じ
		2  "indent,eol,start"と同じ

		backup	初期値：オフ

		ファイルを上書きする前にバックアップファイルを作る。書き込みが成功したらバックアップはそのまま
		置いておく。バックアップをずっと持っていたくはないが、書き込みの最中にはバックアップが欲しいと
		きには、このオプションをオフにしてオプション 'writebackup' をオンにすること (既定ではそうなっ
		ている)。全くバックアップが要らないなら両方をオフにすること (あなたのファイルシステムがほとん
		ど一杯ならこうするとよい)。


		backupcopy	初期値：Viの既定値: "yes" 、それ以外: "auto"

		バックアップファイルの作成方法を決定する。

		オプション  動作
		値
		yes         先にファイルのコピーを作ってバックアップにして、更新した内容は元のファイルに上書き
					する
		no          先に元のファイルをリネームしてバックアップにして、更新した内容は新しいファイルに書
					き出す
		auto        上の2つのどちらかで、適切な方を選ぶ

		オプション値の説明

		オプ
		ショ メリット                                     デメリット
		ン
			 編集したファイルが特別な属性を持っているとき ファイルのコピーに余計な時間がかかる編集した
		yes  (例えばファイルがハードリンクまたはシンボリ  ファイルがリンクのとき、バックアップファイル
			 ックリンクだったり、リソースフォークを持って の名前がリンク先の文書ファイルの名前でなく、
			 いるとき)、全て元のまま保たれる              リンクファイルの名前になってしまう
														  時々、元のファイルの持つ属性を新しいファイル
		no   高速である                                   にコピーしきれないことがある編集したファイル
														  がリンクのとき、新しいファイルはリンクになら
														  ない
			 Vimが副作用なしにリネームの方法が使えると判  Vimが副作用なしにリネームの方法が使えると判
		auto 断したとき (属性がコピーでき、ファイルがリン 断したとき (属性がコピーでき、ファイルがリン
			 クでないとき) は、そちらが使われる。それでは クでないとき) は、そちらが使われる。それでは
			 問題がありそうなときはコピーの方法が使われる 問題がありそうなときはコピーの方法が使われる

		"no" と "auto" では問題が起きる場合がある。プログラムによっては、ファイルを開き、Vimを呼び出し
		てそのファイルを編集させ、(ファイル区別プログラムを使って) そのファイルが変更されたかどうかを
		調べるものがある。そうしたプログラムは新しく書き出されたファイルではなく、バックアップファイル
		の方を調べてしまう。例としては "crontab -e" が挙げられる。


		backupdir	初期値：Amigaでの既定値: ".,t:",Win32は、".,c:/tmp,c:、temp"、Unixでは ".,~/tmp,~/"

		バックアップファイルを作るディレクトリを設定する。値は、バックアップファイルを作るディレクトリ
		を、コンマ区切りのリストにしたもの。

		例：

		set backupdir=$HOME/backup

		バックアップファイルは、リスト内の、使用可能な最初のディレクトリの中に作られる値が空だと、バッ
		クアップファイルは作られない ('patchmode' は使えなくなる!) ディレクトリに "." を指定するのは、
		バックアップファイルを、編集されたファイルと同じディレクトリに作るということであるディレクトリ
		が "./" で (MS-DOSなどでは ".\") 始まるのは、バックアップファイルを作るディレクトリを、編集さ
		れたファイルとの相対的な位置で決めるということである。最初の "." は編集されたファイルのパス名
		で置き換えられる("." がディレクトリ名の内部にあるなら、特別な意味はない) コンマの後の空白は無
		視されるが、他の場所の空白はディレクトリ名の一部として見なされる。ディレクトリ名の先頭に空白を
		使いたいなら、その空白の前にバックスラッシュを置くことディレクトリ名にコンマを使いたいなら、そ
		のコンマの前にバックスラッシュを置くことディレクトリ名は '/' で終わってもよい環境変数は展開さ
		れる '\' には注意すること。空白の前には1個置き、オプションの値に '\' 自身を含めたいなら2個置く


		backupext	初期値："~", VMSでは: "_"

		バックアップファイルの拡張子。バックアップファイルの名前を作る際、元のファイル名の後ろに付け加
		える文字列。既定では普段使いそうもないものに定めてあるが、これは既存のファイルをバックアップフ
		ァイルで上書きするのを避けるためである。".bak" を使いたいかもしれないが、".bak" で終わるファイ
		ルに重要なものがないか確かめること。


		backupskip	初期値："/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*"

		バックアップを作成しないファイル名のパターン。ファイル名に対するパターンのリスト。この中に、書
		き込まれたファイルの名前にマッチするパターンがあれば、そのファイルのバックアップは作られない。
		ファイル名を指定してもよいし、ファイルのフルパスを指定してもよい (C:/temp/* という方法。既定値
		ではこの方法で、一時ファイル用のディレクトリを指定している) 。パターンの指定方法は |:autocmd|
		と同じである。|autocmd-patterns| を参照すること。また、特殊文字に注意するために |
		option-backslash| を参照すること。環境変数の $TMPDIR, $TMP や $TEMP が定義されていないと、既定
		値には使われない。"/tmp/*" はUnixでのみ使われる。


		balloondelay	初期値：600

		バルーン表示が出るまでの時間 (ミリ秒単位) 。


		ballooneval	初期値：オフ

		|balloon-eval| 機能を働かせる。


		binary	初期値：オフ

		バイナリモード。バイナリファイルを編集する前には、このオプションをオンにする。Vimの引数に |-b|
		を付けてもよい。このオプションがオンのときは、いくつかのオプションの設定が変わる: 'textwidth'
		は 0 'wrapmargin' は 0 'modeline' はオフ 'expandtab' はオフ


		bioskey	初期値：オン

		キーボードの入力にBIOSを使うオプション。オンのときは、キーボードの文字を得るためにバイオスが呼
		び出される。これはCTRL-C を認識するためにはよいが、コンソールでしか機能しない。ターミナルをシ
		リアルポートから利用する場合は、オフにすること。|'conskey'| も参照すること。


		bomb	初期値：オフ

		BOMの付加オプション。ファイルを書き込むときに以下の条件が満たされれば、BOM (Byte Order Mark,
		バイト順マーク) がファイル先頭に付けられる:

		  ? このオプションがオンであること-オプション 'binary' がオフであること
		  ? オプション 'fileencoding' が "utf-8", "ucs-2", "ucs-4" であるか、それらとリトルエンディア
			ンとビッグエンディアンの違いを除いて同一のエンコードであること


		breakat	初期値：" ^I!@*-+;:,./?"

		自動改行を行う文字。オプション 'linebreak' がオンのとき、どの文字で自動改行が起きるかを、この
		オプションで指定する。


		browsedir	初期値："last"

		ファイルブラウザにどのディレクトリを使うかを指定する:

		オプション値 動作
		last         前回にファイルブラウザを使ったディレクトリ
		buffer       バッファで開いているファイルのディレクトリ
		current      カレントディレクトリ
		{path}       {path} で指定されたディレクトリ

		bufhidden	初期値：""

		バッファがウィンドウ内に表示されなくなったときの動作を指定する。

		オプシ  動作
		ョン値
		&lt;
		empty&  グローバルなオプションの 'hidden' の値に従う
		gt;
		hide    バッファを隠す (解放しない)。オプション 'hidden' がオンでなくともそうする
		unload  バッファを解放する。オプション 'hidden' がオンであったり、|:hide| コマンドを使ったとき
				でもそうする
		delete  バッファをバッファリストから削除する。'hidden' オプションがオンだったり、|:hide| コマ
				ンドを使ったときでも、|:bdelete| コマンドを使ったときのように、リストからの削除を行う

		buflisted	初期値：オン

		バッファをバッファリストに表示させる。このオプションがオンならば、バッファはバッファリストに表
		示される。オフならば、そのバッファはコマンド ":bnext" コマンドや ":ls" 、バッファメニューなど
		の対象にならない。ファイル名やマークを思い出したりするためだけのバッファでは、このオプションは
		Vimによってオフにされる。ファイルの編集のためにバッファを作ったときは、このオプションはVimによ
		ってオンにされる。しかし ":buffer" コマンドでバッファに移動したときはそうではない。


		buftype	初期値：""

		バッファの種類を指定する。

		オプション値  動作
		&lt;empty&gt; 普通のバッファ
		nofile        ファイルと関連がなく、書き込まれる予定のないバッファ
		nowrite       書き込まれる予定のないバッファ
		quickfix      エラーリスト用の、quickfix バッファ
		help          ヘルプバッファ

		cdpath	初期値：環境変数 $CDPATH または ",,"

		:cdや:lcdコマンドで検索されるディレクトリのリスト。検索されるディレクトリは相対パスで指定する
		ことはできない ("/", "./" や "../" で始まってはいけない)。オプション 'cdpath' の値には、|path|
		オプションと同様の指定方法を使う。|file-searching| も参照すること。既定では、値は環境変数
		$CDPATH から取り込まれるが、カレントディレクトリを最初に探すために "," が先頭に挿入される。
		$CDPATH から取り込まれたものが望ましくないときは、値を上書きするために、次のコマンドを適当に修
		正し、あなたの vimrc ファイルに加えること:

		:let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]','\\\0', 'g'), ':', ',', 'g')

		安全上の理由から、このオプションをモードライン |modeline| から設定することはできない (オプショ
		ン cdpath の値の一部は、ファイル名を展開するためにシェルに渡すことができる)。


		cedit	初期値：Viの既定値: "", Vimの既定値: CTRL-F

		コマンドラインモード Command-line Mode で、コマンドラインウィンドウを開くために使われるキー。
		オプション 'compatible' がオフならば、既定ではCTRL-F である。


		charconvert	初期値：""

		文字エンコーディングの変換に使われる expression を定める。これは読み込まれようとしているファイ
		ルや書き込みをしたファイルのエンコーディングが、望むものと違うときに評価される。オプション
		'charconvert' の値は、内部関数 iconv() がサポートされ、それによる変換が可能ならば使われること
		はない。ずっと高速なため、iconv() の方が好まれる。


		cindent	初期値：オフ

		Cプログラムファイルの自動インデントを始める。挿入モード insert mode で再インデントを引き起こす
		文字列を指定するにはオプション 'cinkeys' を、好みのインデントスタイルを設定するにはオプション
		cinoptions を参照すること。


		cinkeys	初期値："0{,0},0),:,0#,!^F,o,O,e"

		再インデントを行わせる文字のリスト。オプション 'cindent' オプションがオンで、かつ 'indentexpr'
		が空の時のみ使われる。


		cinoptions	初期値：""

		C言語のインデント方法を決定する。このオプション 'cinoptions' は、C言語ソース内の行を 'cindent'
		で再インデントするときの方法に影響を与える。このオプションの値については|cinoptions-values| を
		、一般的なC言語ソースのインデントの情報については |C-indenting| をそれぞれ参照すること。


		cinwords	初期値："if,else,while,do,for,switch"

		行をさらにインデントするキーワード。オプション 'smartindent' オプションか 'cindent' がオンのと
		き、ここに指定したキーワードの次の行は、さらにインデントされる。 'cindent' がオンのときには、
		適切な場所 ({} の内側) でのみ機能する。Noteオプション 'ignorecase' オプションは cinwords の値
		には適用されないので注意すること。大文字か小文字かを区別したくないなら、値に両方を指定すること
		。

		例:

		"if,If,IF"


		clipboard	初期値：X-windowsでは"autoselect,exclude:cons\|linux"それ以外は、””

		クリップボードの動作設定。このオプションには、コンマ区切りのキーワードのリストを指定する。認識
		されるのは、これらのキーワードである:

		オプション値 動作
					 これが含まれると、コピー、削除、変更、ペーストなどの操作で、普通なら無名レジスタ
					 が使われるところで、全てクリップボードレジスタ "*" が使われるようになる。ただしレ
		unnamed      ジスタ名を陽に指定すれば、オプション 'clipboard' に"unnamed" が含まれているかいな
					 いかに関わらず、指定されたレジスタが使われる。またクリップボードレジスタは、"*と
					 いう記法を用いれば常にアクセスできる。
					 オプション 'guioptions' の 'a' フラグのように働く: これが含まれると、Visualモード
					 が開始されるたび、またはVisual選択範囲が変更されるたびに、Vimはウィンドウシステム
					 のグローバルなクリップボードのオーナーになろうとするか、選択されたテキストをクリ
		autoselect   ップボード用レジスタ"*を使ってクリップボードにコピーしようとする。詳細については
					 |guioptions_a| と |quotestar| を参照すること。GUI機能が有効のときはオプション
					 'guioptions' の 'a' フラグが使用され、無効のときはこの"autoselect" フラグが使用さ
					 れる。また、モードレスなセレクションにも適用される。
		autoselectml "autoselect" と似ているが、モードレスセレクションのみに適用される。オプション
					 'guioptions' の 'A' フラグと比較してみること。
					 ターミナルの名前 'term' にマッチするパターンを定義する。パターンがマッチすると、X
					 サーバとの通信がなされなくなる。このオプションは次のようなときに便利である。
					 - Vimをコンソールで使用しているとき。
					 - アプリケーションを別のディスプレイで使うため、環境変数 $DISPLAY が設定されてい
					 るとき。
		exclude:     - コンソールでVimを使用している最中にXサーバが終了させられ、Vimをキルせざるを得な
		{pattern}    いかもしれないとき。
					 Xサーバと全く通信しないようにするには、次のようにする:
					 exclude:.*
					 これは引数 |X| を使用したのと同じ効果を持つ。Note 副作用として、ウィンドウのタイ
					 トルは復元されないので注意すること。オプション 'magic' の値は無視され、 {pattern}
					 はオプション 'magic' がオンのように解釈される。残りのオプションの値は {pattern}
					 に適用される。

		cmdheight	初期値：1

		コマンドラインに使われるスクリーン上の行数。

		|hit-enter| プロンプトの出現を避けるのに役立つ。


		cmdwinheight	初期値：7

		コマンドライン・ウィンドウに使われるスクリーン上の行数。 |cmdwin| を参照すること。


		columns	初期値：80 またはターミナルの幅

		スクリーン上の列幅。普通このオプションはターミナルの初期化の時点で設定され、手動で設定する必要
		はない。VimがGUI環境内やサイズ変更可能なウィンドウ内で実行されているときは、このオプションを変
		更するとウィンドウサイズも変更されるかもしれない。あなたがこのオプションの値を変更したのに、
		Vimがディスプレイの列幅の物理的な値を変更できなかったら、ディスプレイ表示がめちゃめちゃになる
		おそれがある。


		comments	初期値："s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:&gt;,fb:-"

		コメント行の始まりとなる文字列の、コンマ区切りのリスト。 |format-comments| を参照すること。バ
		ックスラッシュを使って、値にスペースを含める方法については、|option-backslash| を参照すること
		。


		commentstring	初期値："/*%s*/"

		コメント用のテンプレート(雛形)。値の中の "%s" はコメントの内容と置き換えられる。現在のところ、
		折り畳み用のマーカを追加するためにのみ使用されている。|fold-marker| を参照すること。


		compatible	初期値：オン、 .vimrc ファイルが発見されたらオフ

		VimをなるべくVi互換にする。このオプションを有効にすると、Vimの便利な機能が使えなくなる。


		complete	初期値：: ".,w,b,u,t,i"

		キーワード補完に使われる単語を探す場所を指定する。このオプションは、CTRL-P コマンドや CTRL-N
		コマンドによるキーワード補完 |ins-completion| の動作を指定する。このオプションは行全体の補完|
		i_CTRL-X_CTRL-L| にも適用される。このオプションは補完の方法と、キーワード検索の対象となる場所
		を示す、コンマ区切りのフラグのリストである。

		オプシ  動作
		ョン値
		.       カレントバッファから検索 (オプション 'wrapscan' の値は無視)
		w       別のウィンドウ内のバッファから検索
		b       バッファリスト内の、現在読み込まれている別のバッファから検索
		u       バッファリスト内の、現在読み込まれていない別のバッファから検索
		U       バッファリストにないバッファから検索
		k       オプション 'dictionary' で指定されたファイルから検索
		k{dict} {dict} で与えられたファイルから検索。 "k" フラグを複数指定してもよい。ファイル名はパタ
				ーンでも指定できる :set cpt=k/usr/dict/*,k~/spanish
		s       オプション 'thesaurus' で指定されたファイルから検索
		s{str}  {str} で与えられたファイルから検索。 "s" フラグを複数指定してもよい。ファイル名はパタ
				ーンでも指定できる。
		i       カレントファイルとインクルードされるファイルから検索
		d       カレントファイルとインクルードされるファイルから、定義された名前またはマクロを検索
		]       タグ補完
		t       "]" と同じ

		confirm	初期値：オフ

		ファイルを保存していない場合に、ファイルの保存を確認するダイアログを出すオプション。オプション
		'confirm' がオンならば、バッファへの変更を保存していないと実行に失敗する操作 (つまり ":q" と
		":e") の際、ダイアログ |dialog| を開いてファイルを保存するかどうか尋ねる。これがオンになってい
		ても、意図的に変更を廃棄したいなら ! を使える。オプション 'confirm' がオフでも、|:confirm| コ
		マンドで個別に確認を求めることができる (これはキーマッピングでとても便利である)。関数 |confirm
		()| とオプション 'guioptions' の 'v' フラグも参照すること。


		conskey	初期値：オフ

		キーボードの文字を受け取るのに直接コンソール出入力が使う。このオプションがオンのとき、キーボー
		ドの文字を受け取るのに直接コンソール出入力が使われる。これはたいていの場合有効である。|
		'bioskey'| も参照すること。合わせて、3種類のコンソール入力が使える:


		cpoptions	初期値：Vimは "aABceFs", Viでは全てのフラグ

		個別の機能をVi互換にする。 1文字のフラグの列で設定する。フラグが設定されると、対応する動作がVi
		互換になる。このオプションは、大部分、またはある程度のVi互換が求められるときに使われる。


		cscopepathcomp	初期値：0

		タグのリストの中でいくつのパスのコンポーネントを表示するかを指定する。 |cscopepathcomp| を参照
		すること。


		cscopeprg	初期値："cscope"

		Cscope を実行するコマンド名を指定する。 |cscopeprg| を参照すること。安全上の理由から、このオプ
		ションをモードライン |modeline| から設定することはできない。


		cscopetag	初期値：オフ

		タグコマンドに cscope を使う。 |cscope-options| を参照すること。NOTE: このオプションはオプショ
		ン 'compatible' がオンに設定されたときにオフに設定されるので注意すること。


		cscopetagorder	初期値：0

		コマンド ":cstag" が検索を行う順番を指定する。 |cscopetagorder| を参照すること。


		cscopeverbose	初期値：オフ

		Cscope のデータベースに情報を追加するときメッセージを表示する。 |cscopeverbose| を参照すること
		。


		debug	初期値：""

		値が "msg" に設定されると、省かれるはずのエラーメッセージも表示されるようになる。これはオプシ
		ョン 'foldexpr' オプションや 'indentexpr' をデバッグするのに便利である。


		define	初期値："^#\s*define"

		マクロ定義を発見するのに使われるパターンを指定する。値はコマンド "/" で使うのと同様の検索パタ
		ーンである。このオプションはコマンド "[i" やコマンド "[d" など |include-search| に使われる。オ
		プション 'isident' はマッチした部分の後の定義された名前を認識するのに使われる:


		delcombine	初期値：オフ

		ユニコードのファイルを編集するときの文字の削除方法。ユニコードのファイルを編集する際にこのオプ
		ションがオンならば、バックスペースとNormalモードのコマンド "x" はそれぞれの文字の上の
		combining character のみを削除する。オフのときは (これが既定値である) combining character と文
		字は同時に削除される。


		dictionary	初期値：""

		キーワード補完コマンドで使われる単語の書かれた辞書ファイル。コンマ区切りのファイル名のリスト。
		キーワード補完コマンド|i_CTRL-X_CTRL-K| 用の単語を探すために使われる。単語のリストからなるファ
		イルを指定する。その中では1行ごとに1語が並べられていてもよいし、1行にキーワードでない文字 (空
		白文字を推奨) で区切られた数語が並んでいてもよい。1行の文字数の最大値は510バイト分である。


		diff	初期値：オフ

		カレントウィンドウをファイル間の差異を示すウィンドウのグループに組み入れる。 |vimdiff| を参照
		すること。


		diffexpr	初期値：""

		2個のファイル間の差異を求める際に、ed形式のdiffファイルを求めるために評価されるexpressionを指
		定する。 |diff-diffexpr| を参照すること。


		diffopt	初期値："filler"

		Diffモード用のオプションを設定する。このオプションの値には、以下の文字列をコンマで区切ったもの
		が設定できる。

				 片方のウィンドウ内のテキストのある位置に行が挿入されていたときに、ウィンドウのスクロ
		filler   ールを同調させるために、埋め立て用の行を表示する。ウィンドウが隣り合っていて、
				 'scrollbind' オプションがオンのときには大抵便利である。
		context: 変更のあった行と、変更がなく折り畳まれている行の間に、{n} 行分の「コンテキスト」を表
		{n}      示する。これが設定されていないと、コンテキストは6行になる。|fold-diff| を参照すること
				 。
		icase    テキストの大文字と小文字の違いを無視する。"a"と "A" は同じものと見なされる。
				 'diffexpr' オプションの値が空なら、コマンド "diff" に "-i" フラグを追加する。
				 空白の数の違いを無視する。'diffexpr' オプションの値が空なら、コマンド "diff" に "-b"
		iwhite   フラグを追加する。これが正確には何を指定しているのかについてはコマンド "diff" のドキ
				 ュメントを参照すること。これは後ろに追加された空白は無視するが、前に追加された空白は
				 無視しないはずである。

		digraph	初期値：オフ

		Insertモードで{char1} &lt;BS&gt; {char2} でダイグラフを入力できるようにする。 |digraphs| を参
		照すること。


		directory	初期値：Amigaでの既定値: ".,t:",Win32は".,c:\tmp,c:\temp"、UNIXは".,~/tmp,/var/tmp,/tmp"

		スワップファイル用のディレクトリ名を、コンマで区切って指定する。

		例

		set directory=$HOME/backup


		display	初期値：""

		テキスト表示の方法を変える。値はフラグのコンマ区切りのリストである:

		オプショ 動作
		ン値
		lastline これが含まれると、ウィンドウの最後の行ができる限りまで表示される。含まれないと、最後
				 の行が収まりきらないならその行は "@" と表示される。
		uhex     印刷できない文字を &lt;xx&gt; という形式で16進数表示し、^C や ~C の形式を使わない。

		eadirection	初期値："both"

		オプション 'equalalways' の動作

		オプション値 動作
		ver          ウィンドウの高さにのみ影響がある
		hor          ウィンドウの幅にのみ影響がある
		both         ウィンドウの高さと幅、両方に影響がある

		edcompatible	初期値：オフ

		edとの互換。コマンド ":substitute" のフラグ 'g' とフラグ 'c' を、次に別の方を指定するまでずっ
		と効力を持つようにする。|complex-change| を参照すること。


		encoding	初期値："latin1"または環境変数 $LANG によって決まる値

		Vimの通常使う文字エンコーディング。 Vim内部で使われる文字エンコーディングを設定する。そのエン
		コーディングはバッファやレジスタ内のテキスト、expression内の文字列、 viminfo ファイル内のテキ
		ストなどに適用される。つまり、このオプションはVimの通常扱う文字の種類を設定する。指定できる値
		については |encoding-names| を参照すること。


		endofline	初期値：オン

		ファイルの最後に&lt;EOL&gt;をつける。ファイルを書き込むときに、このオプションがオフでオプショ
		ン 'binary' がオンならば、ファイルの最終行に &lt;EOL&gt; が書き込まれない。このオプションはフ
		ァイルの編集を始めるときには自動的にオンになる。ただし編集を始めたファイルの最終行に &lt;EOL&
		gt; がないときにはオフになる。普通はユーザがこのオプションを設定する必要はない。オプション
		'binary' がオフのときはこのオプションの値は使われない。オプション 'binary' がオンのときには、
		ファイルの最終行に &lt;EOL&gt; があったかどうかを復元するためにこのオプションが使われる。その
		ため、ユーザがファイルを書き込むときに元のファイルの状態を保つことができる。しかし状態を変更す
		ることもできる。


		equalalways	初期値：オン

		全てのウィンドウのサイズを同じにする。オンのとき、ウィンドウを分割したり閉じたりした後、全ての
		ウィンドウが自動的に同じサイズになる。オフのときは、ウィンドウを分割するとカレントウィンドウの
		サイズだけが減り、他のウィンドウに変化はない。ウィンドウを閉じると、(オプション 'splitbelow'
		と 'splitright' の値に従って) 閉じたウィンドウの隣のウィンドウの行数が増す。水平に分割されたウ
		ィンドウと垂直に分割されたウィンドウが混ざっているときは、サイズの最小値が計算され、いくつかの
		ウィンドウは (余裕があれば)大きくなる。オプション 'eadirection' はサイズの変化する方向を指定す
		る。


		equalprg	初期値：""

		コマンド "=" に使う外部プログラムを指定する。値が空のときは内部関数が整形に使われる (オプショ
		ン 'lisp', 'cindent' または 'indentexpr')。環境変数は展開される |:set_env|。値に空白やバックス
		ラッシュを含めることについては |option-backslash| を参照すること。


		errorbells	初期値：オフ

		エラーメッセージに伴ってベル (ビープ音または画面フラッシュ) を発生させる。このオプションはエラ
		ーメッセージにのみ適用され、メッセージのない多くのエラー (例えばNormalモードで &lt;ESC&gt; を
		打ち込んだとき) についてはベルは常に使用される。ベルをビープ音にしたり、画面フラッシュにしたり
		、無効にしたりするためにはオプション 'visualbell' を参照すること。


		errorfile	初期値：通常は、"errors.err"、Amigaでは"AztecC.Err",

		QuickFixモードで使われるエラーファイルの名前 (|:cf| を参照すること)。コマンドライン引数 "-q"
		が指定されたときは、オプション 'errorfile' の値はそれに続く値に設定される。|-q| を参照すること
		。


		errorformat	初期値：既定値はとても長い

		エラーファイルの内容の書式を、関数 scanf 風に指定する (|errorformat|を参照すること)。


		esckeys	初期値：Vimの既定値: オン, Viの既定値: オフ

		&lt;Esc&gt; で始まるファンクションキーもInsertモードで認識されるようになる。このオプションをオ
		ンに設定すると、&lt;Esc&gt; で始まるファンクションキーもInsertモードで認識されるようになる。こ
		のオプションがオフのときは、カーソルキーとファンクションキーは、&lt; Esc&gt; で始まるなら
		Insertモードで使うことができない。こうすることの利点は、 &lt;Esc&gt; を一回打ち込むだけですぐ
		に認識され、1秒ほど待つ必要がないことだ。このオプションをオフにしなくても、オプション
		'timeoutlen' とオプション 'ttimeoutlen' の値を変更してもいいかもしれない。


		eventignore	初期値：""

		Autocommandのイベント名のうち、無視したいものをリストにして指定する。値が "all" に設定されると
		、全ての autocommand のイベントが無視され、autocommand は実行されなくなる。


		expandtab	初期値：オフ

		Insertモードで: &lt;Tab&gt; を挿入するのに、適切な数の空白を使う。また、コマンド '&gt;' や '&
		lt;' によるインデントや、オプション 'autoindent' がオンのときのインデントでも空白を使う。オプ
		ション 'expandtab' がオンのときに本当のタブを挿入するには、CTRL-V&lt;Tab&gt; を使うこと。
		|:retab| と|ins-expandtab| も参照すること。


		exrc	初期値：オフ

		カレントディレクトリ内のファイル .vimrc, .exrc や .gvimrc などの読み込みを行う。このオプション
		をオンにするなら、オプション 'secure' もオンにするよう検討すること (|initialization| を参照す
		ること)。ファイル.exrc, .vimrc や .gvimrc でローカルなものを用いると潜在的な安全保護の漏れを招
		くので、注意して使うこと！


		fileencoding	初期値：""

		カレントバッファ内のファイルの文字エンコーディングを設定する。オプション 'fileencoding' の値が
		オプション 'encoding' の値と異なるとき、ファイルの読み書きの際に文字エンコーディングの変換が行
		われる。


		fileencodings	初期値："ucs-bom", オプション 'encoding' の値がユニコードに設定されたときは
		"ucs-bom,utf-8,latin1"

		Vimが表示できる文字エンコーディングのリスト。このオプションには、ファイルの編集時に考慮される
		文字エンコーディングのリストを指定する。ファイルが読み込まれたとき、Vimはこのオプションの値の
		先頭の文字エンコーディングを使おうとする。そのときエラーが発見されると、値のリスト内で次に並ん
		でいるエンコーディングが試される。有効なエンコーディングが見つかると、オプション
		'fileencoding' の値がそれに設定される。全て失敗した場合は、オプション 'fileencoding' の値は空
		に設定される。これはオプション 'encoding' の値が使われていることを表す。

		例：

		set fileencodings=iso-2022-jp,cp932,euc-jp,utf-8,utf-16,ucs-2-internal,ucs-2


		fileformat	初期値：MS-DOS, MS-Windows, OS/2 での既定値: "dos", UNIXでは、”unix”, Macintoshは、”mac”

		改行コードの指定。バッファにファイルを読み込んだり、バッファからファイルに書き込んだりするとき
		に使われる &lt;EOL&gt; を、カレントバッファについて設定する。

		オプション値 動作
		dos          &lt;CR&gt;&lt;NL&gt;
		unix         &lt;NL&gt;
		mac          &lt;CR&gt;

		fileformats	初期値：MS-DOS, MS-Windows OS/2: "dos,unix", Unix: "unix,dos", Mac: "mac,unix,dos", Cygwin:
		"unix,dos", others: ""

		Vimが認識できるファイルフォーマットのリスト。

		例：

		set fileformats=unix,dos


		filetype	初期値：""

		開いているファイルのタイプ。このファイルタイプにより、強調表示などがされる。


		fillchars	初期値："vert:|,fold:-"

		ステータスライン、縦のウィンドウスプリッタ、フォールドなどの空白文字を埋める文字。

		例：

		fillchars=vert:|,fold:-,stl:-

		オプション値 動作
		stc:c        アクティブなバッファのステータスライン
		stlnc:c      アクティブではないバッファのステータスライン
		vert:c       縦方向のスプリッタ
		fold:c       フォールド
		diff:c       ディフの削除された行

		fkmap	初期値：オフ

		Farsi用のキーボードマッピングのON/OFF。


		foldclose	初期値：""

		フォールドを自動的にクローズする。 allに設定するとカーソルがフォールドの外にでると、自動的にフ
		ォールドされる。


		foldcolumn	初期値：0

		ウィンドウの端に確保される折畳を示すカラムの幅を指定する数。 0ならば、折畳表示カラムは確保され
		ない。通常は4から5が一般的。使い物になる最小値は2。最大値は12。


		foldenable	初期値：オフ

		フォールドの有効/無効。 :set foldenable でフォールドされる。 :set nofoldenable でフォールドが
		解除される。


		foldexpr	初期値："0"

		フォールドレベルを計算するスクリプト。タブで始まる一連の行範囲を1つの折畳にまとめる:

		:set foldexpr=getline(v:lnum)[0]==\"\\t\"

		折畳レベルを計算するのにVimスクリプトの関数を呼び出す:

		:set foldexpr=MyFoldLevel(v:lnum)

		空行で仕切られた「段落」を折畳とする:

		:set foldexpr=getline(v:lnum)=~'^\\s*$'&&getline(v:lnum+1)=~'\\S'?'<1':1

		同じ事(「段落」を折畳に)をする別の表現:

		:set foldexpr=getline(v:lnum-1)=~'^\\s*$'&&getline(v:lnum)=~'\\S'?'>1':1


		foldignore	初期値："#"

		フォールドのインデントを無視する行の先頭の文字。


		foldlevel	初期値：0

		フォールドするレベル。 'foldlevel'が0の時には、全ての折畳が閉じられる。 'foldlevel'が正の時に
		は、設定値より大きなレベルの折畳が閉じられる。 'foldlevel'が非常に大きい時は、全ての折畳が開か
		れる。 'foldlevel'は変更された時に適用される。その後に手動で折畳を開いたり閉じたりできる。値を
		増やした時には、新しいレベルの値以上の折畳が開かれる。手動で開かれていた折畳は閉じられない。値
		を減らした時には、新しいレベルの値以上の折畳が閉じられる。手動で閉じられていた折畳は開かれない
		。


		foldlevelstart	初期値：-1

		ファイルを開いたときのフォールドレベルの値。ファイルを開いたときに、foldlevelの値をこのオプシ
		ョンの値にする。


		foldmarker	初期値："{{{,}}}"

		フォールドする最初と最後の文字を設定する。 foldmethodがmakerの場合に、このオプションで指定した
		文字をフォールドの開始と終了とする。

		例：

		set foldmaker={{{,}}}
		# {{{1 レベル１の折り畳み
		#
		# レベル１の内容
		#
		# {{{2 レベル２の折り畳み
		#
		# レベル２の内容
		#
		# }}}
		# }}}


		foldmethod	初期値："manual"

		フォールドする種類

		オプシ 動作
		ョン値
		manual 折畳領域を定義するためにコマンドを手動で利用する。これはテキスト中の折畳を行なう箇所を
			   スクリプトにより解析するのに使うこともできる。
		indent 折畳は各行のインデントにより自動的に定義される。
		expr   折畳は"indent"方式のように、折畳レベルによって自動的に定義される。'foldexpr'オプション
			   の値は、各行についてこの折畳レベルを計算するためにスクリプトとして実行される。
		marker 'foldmaker'で指定したマーカの範囲。
		syntax 折畳が"fold"引数を持つ構文要素によって定義される。
			   テキストの変更された箇所とその近辺以外が自動的に折畳として定義される。この方法は現在の
		diff   ウィンドウに対して'diff'オプションが設定されている時にだけ正しく働き、変更点が表示され
			   る。そうでない場合バッファ全体が1つの大きな折畳となる。

		foldminlines	初期値：1

		折り畳む最小行数。 'foldminlines'よりも少ない行数の折畳は常に開いたように表示される。


		foldnestmax	初期値：20

		折り畳むネストの最大値。 foldmetiodをindent, syntaxにしたときの入れ子の最大値。


		foldopen	初期値："block,hor,mark,percent,quickfix,search,tag,undo"

		カーソルが移動したときに自動的に折り畳みを開く

		オプション値 動作
		all          全て
		block        "(", "{", "[[", "[{", etc.
		hor          横への移動 "|", "w", "fx", etc.
		insert       挿入動作
		jump         ジャンプ
		mark         マーク位置へのジャンプ
		percent      %での移動
		quickfix     ":cn", ":crew", ":make", etc.
		search       検索結果にヒットした場合
		tag          タグジャンプ
		undo         アンドゥ

		foldtext	初期値："foldtext()"

		閉じられた折り畳みを示すテキストを得るために実行されるスクリプト

		例

		:set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')

		これは折畳の最初の1行を、"/*" と "*/" を追加し"{{{"を削除して表示する。多めのバックスラッシュ
		(\ 記号)はある文字が":set"コマンドに解釈されてしまうのを避けるために使用されている。これは以下
		のように関数を定義するとより簡単になる:

		:set foldtext=MyFoldText()
		:function MyFoldText()
		:  let line = getline(v:foldstart)
		:  let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
		:  return v:folddashes . sub
		:endfunction


		formatoptions	初期値：Vim : "tcq", Vi : "vt"

		Vimがテキストを整形する方法を決定するオプションのリスト。

		オプション  動作
		値
		t           textwidthを使ってテキストを自動折返しする。
		c           現在のコメント指示を挿入して、textwidthを使ってコメントを自動折返しする。
		r           挿入モードで&lt;return&gt;を打った後に、現在のコメント指示を自動的に挿入する。
		o           ノーマルモードで'o'、'O'を打った後に、現在のコメント指示を自動的に挿入する。
		q           "gq"によるコメントの整形を可能にする。
		2           テキストの整形処理時、段落の最初の行ではなく２番目の行のインデントをそれ以降の行に
					対して使う。
		v           挿入モードでVi互換の自動折返しを使う現在の挿入モードで入力された空白でのみ折返しが
					行われる。
		b           'v'と同じ、ただし空白の入力か折返しマージンの前でのみ自動折返しをする。
		l           挿入モードでは長い行は折り返されない。

		formatprg	初期値：""

		gqコマンドで実行されるプログラム。


		gdefault	初期値：オフ

		:sコマンドで'g'オプションをデフォルトにする。このオプションがONになっていると、 :s/pat/ret/ で
		:s/pat/ret/g と同じ動きになる。


		grepformat	初期値："%f:%l%m,%f %l%m"

		grepの出力形式を指定する。このオプションで指定した形式と、grepの出力が一致しないと、grep結果へ
		のジャンプができなくなる。


		grepprg	初期値："grep -n ",

		:grep で実行されるプログラム。


		guicursor	初期値："n-v-c:block-Cursor/lCursor,

		カーソルの形状をVimに教える以下のように指定する。

		mode-list:argment-list,mode-list:argment-list:mode-list:argment-list・・・

		mode-listには、下表の値を'-'で区切って指定できる。

		オプション値 動作
		n            ノーマルモード
		v            ビジュアルモード
		ve           ビジュアルモード（selectionオプションの値がexclusiveになっている場合）
		o            オペレータ待機モード（dやcを打った後）
		i            挿入モード
		r            置換モード
		c            コマンドラインのノーマルモード
		ci           コマンドラインの挿入モード
		cr           コマンドラインの置換モード
		sm           文字を打ち込んだときに対応する(などを表示したとき
		a            全てのモード

		argment-listには、下表の値を指定できる。

		オプション値 動作
		hor{N}       水平カーソル(縦につぶれた)、Nで高さを％単位で指定できる
		ver{N}       垂直カーソル(横につぶれた)、Nで幅を％単位で指定できる
		block        ブロックカーソル
		blinkwait{N} 点滅するまでの時間をNで指定する
		blinkon{N}   点滅の点灯状態の時間をNで指定する
		blinkoff{N}  点滅の消灯状態の時間をNで指定する

		例：

		set guicursor=n-v-c:blinkwait1000-blinkoff500-blinkon300

		n(ノーマルモード)-v(ビジュアルモード)-c(CUIでのノーマルモード)中は、点滅の開始まで1秒待って、
		点灯時間500ms、消灯時間300msで点滅する。


		guifont	初期値：""

		GUIでのフォント


		guifontset	初期値：""

		使用されるフォントのリスト空でない場合、使用される2つの(あるいはより多くの)フォントを指定しま
		す。１つめは、英語用のフォント、２つ目はあなたの特別の言語用のもの。


		guifontwide	初期値：""

		全角文字のために使用されるフォントのリスト


		guiheadroom	初期値：50

		GUIウィンドウを表示する際に、ディスプレイの大きさから引くピクセル数設定したピクセル数をディス
		プレイの高さから引いてウィンドウを作成する。


		guioptions	初期値："gmrLtT" (MS-Windows),"agimrLtT" (GTK, Motif and Athena)

		GUI用のオプション

		オプショ 動作
		ン値
		a        ビジュアルモードで選択した文字がシステムのクリップボードに入る。他のアプリケーション
				 とクリップボードを共有するオプション。
		A        "a"に似ているが、コマンドラインで選択したときか、CTRL+SHIFTを押しながらマウスで選択し
				 たときに共有のクリップボードを使用する。
		c        簡単な質問をポップアップダイアログではなく、コンソールを使うようにする。
		f        シェルから実行されたときにfork()しない。-fオプションで起動したのと同じ。
		i        Vimのアイコンを使用する。
		m        メニューを表示する。
		M        "$VIMRUNTIME/menu.vim"を読み込まなくする
		g        使用できないメニューをグレー表示する
		t        メニューの切り離しを出来るようにする
		T        ツールバーを表示する
		r        ウィンドウの右側にスクロールバーを表示する
		R        縦に分割されたウィンドウの右側にスクロールバーを表示する
		l        ウィンドウの左にスクロールバーを表示する
		L        縦に分割されたウィンドウの左側にスクロールバーを表示する
		b        水平スクロールバーを表示する
		v        ダイアログのボタンを縦に配置する
		p        ポインタコールバックを使う
		F        メッセージフッターを表示する

		guipty	初期値：オン

		guiでの:shellコマンドで、ptyを使うオプションをはずした場合は、パイプを使用して接続される。


		helpfile	初期値：MSDOSでは"$VIMRUNTIME\doc\help.txt" それ以外は"$VIMRUNTIME/doc/help.txt"

		メインのヘルプファイルを指定する。


		helpheight	初期値：20

		:helpコマンドで表示されるヘルプウィンドウの高さの最低値


		hidden	初期値：オフ

		変更中のファイルでも、保存しないで他のファイルを表示することが出来るようにする。


		highlight	初期値："8:SpecialKey, @:NonText, d:Directory, e:ErrorMsg, i:IncSearch, l:Search, m:MoreMsg,
		M:ModeMsg, n:LineNr, r:Question, s:StatusLine, S:StatusLineNC, c:VertSplit, t:Title, v:Visual,
		w:WarningMsg, W:WildMenu, f:Folded, F:FoldColumn"

		Vimのメッセージのハイライト方法を指定する

		キー 初期グループ 内容
		8    SpecialKey   スペシャルキー、^@など表示できない文字
		@    NonText      EOF以降の~など
		d    Directory    CTRL-Dで表示したディレクトリ
		e    ErrorMsg     エラーメッセージ
		f    Folded       折り畳まれた行
		F    FoldColumn   フォールドコラム
		i    IncSearch    インクリメンタルサーチの結果
		l    Search       最後の検索結果
		m    MoreMsg      -- 継続 -- のようなMoreメッセージ
		M    ModeMsg      -- 挿入 -- などのモードメッセージ
		n    LineNr       行番号
		r    Question     hit-enterやyes/noなどの質問
		s    StatusLine   ステータスライン
		S    StatusLineNC アクティブではないウィンドウのステータスライン
		t    Title        :set allや:autocmdなどで表示される「--- オプション ---」のような文字
		c    VertSplit    縦方向へのスプリットの境界
		v    Visual       ビジュアルモードの選択範囲
		V    VisualNOS    ビジュアルモードの選択範囲(Vimがアクティブではないとき)
		w    WarningMsg   警告メッセージ
		W    WildMenu     ワイルドメニュー

		たとえば、set highlight=n:ErrorMsg とすると、行番号がErrorMsgで指定した色に設定される。


		history	初期値：Vim : 20, Vi : 0

		コロンコマンドを記録する数


		hkmap	初期値：オフ

		ヘブライ語用のキーボードマッピング


		hkmapp	初期値：オフ

		ヘブライ語用の音声用キーボードで有効にする


		hlsearch	初期値：オフ

		検索結果をハイライトする


		icon	初期値：オフ

		アイコンの文字として、gvimという文字の代わりに編集中のファイル名を使う。


		iconstring	初期値：""

		アイコンの文字として表示する文字


		ignorecase	初期値：オフ

		検索で、大文字小文字を区別しない。

		例：ignorecaseオプションを有効にしていないと、

		/abc

		で検索すると abc にヒットするが、AbcやABCにはヒットしなくなる。 ignorecaseオプションを有効にす
		ると、/abcで ABCやAbcなどがヒットするようになる。


		imactivatekey	初期値：""

		Input Method(canna,tamago,xatok,etc...)を有効にするキー操作

		オプション値 動作
		S            シフトキー
		L            ロックキー
		C            コントロールキー
		1            Mod1キー
		2            Mod2キー
		3            Mod3キー
		4            Mod4キー
		5            Mod5キー

		set imactivatekey=SC-space で、Shift+Ctrl+spaceで日本語入力になる。


		imcmdline	初期値：オフ

		コマンドラインで、日本語入力モードにする


		imdisable	初期値：オフ, オン for some systems (SGI)

		日本語入力を使わない


		iminsert	初期値：0, inputメソッドがサポートされていれば、2

		入力モードで自動的に日本語入力を使う

		オプション値 動作
		0            日本語モード(Input Method)OFF
		1            lmapをONにしてIMをOFFにする
		2            lmapをOFFにしてIMをONにする

		imsearch	初期値：0, inputメソッドがサポートされていれば、2

		検索で自動的に日本語入力を使う

		オプション値 動作
		0            日本語モード(Input Method)OFF
		1            lmapをONにしてIMをOFFにする
		2            lmapをOFFにしてIMをONにする

		include	初期値："^#\s*include"

		includeディレクティブと見なす文字列

		:set include=^\s*#\s*include

		のように、正規表現で指定できる。この設定値は、]CTRL-Iや]dなど、インクルードファイルを検索対象
		とするようなコマンドで使用される。


		includeexpr	初期値：""

		includeするファイル名を決定するスクリプト

		:set includeexpr=substitute(v:fname,'h','hpp','g')

		とすると、

		#include "abc.h" ならば、abc.hppがインクルードされていると判断するようになる。 v:fnameに""に囲
		まれたファイル名がセットされている。この設定は、]CTRL-Iや]dなど、インクルードファイルを検索対
		象とするようなコマンドで使用される。


		incsearch	初期値：オフ

		インクリメンタルサーチを行う。検索文字を打っている途中で、目的の単語を見つけたらEnterを押下す
		ればよい。検索をやめたい場合はEscを押下する。


		indentexpr	初期値：""

		インデントする量を返すスクリプトを設定する cindentやsmartindentのインデント量を作成したスクリ
		プトで変更することが出来る。-1を返すと現在のインデントを維持しようとする。


		indentkeys	初期値："0{,0},:,0#,!^F,o,O,e"

		挿入モードで、現在のラインの再インデントを引き起こすキーのリスト


		infercase	初期値：オフ

		挿入モードの単語の補完(Ctrl-P, Ctrl-N)で、小文字で打った単語でも大文字で補完できるようにする。
		動作は、ignorecase や smartcase のオプションに従う。


		insertmode	初期値：オフ

		Vimを挿入モードがデフォルトで動作させる。 Escを押してもViのコマンドモードに移行しなくなる。


		isfname	初期値：MS-DOS, Win32 and OS/2では、"@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=" UNIX,Mac
		では"@,48-57,/,.,-,_,+,,,#,$,%,~,="

		ファイル名として使用できる文字を設定する。 gfなどのコマンドでファイル名の区切りを判断するのに
		用いられる。指定できる文字は下表。

		設定値 意味
		20     文字コード20(10進数)
		a-z    'a'から'z'までの文字
		x      文字'x'
		@      isalpha()で指定される全ての文字
		@-@    文字@
		^a-z   'a'から'z'までの文字以外
		^x     'x'以外

		isident	初期値：MS-DOS, Win32 and OS/2:"@,48-57,_,128-167,224-235"、それ以外は、"@,48-57,_,192-255"

		識別子として使用できる文字を設定する。フォーマットは、isfnameと同じ。


		iskeyword

		 初期値：MS-DOS and Win32:"@,48-57,_,128-167,224-235"、それ以外は、"@,48-57,_,192-255" Viでは
		"@,48-57,_"

		単語に含まれる文字を設定する。 wコマンドなどで、ジャンプする単語を指定できる。たとえば、

		set iskeyword+=-

		とすると、"-"も単語として扱われるため、aaa-bbbのような文字で"w"を押下すると、bbbの後ろの単語に
		ジャンプする。

		 ↑

		isprint

		 初期値：MS-DOS, Win32, OS/2 and Macintosh:"@,~-255" それ以外は、"@,161-255"

		スクリーンに表示することが出来る文字を設定する。設定のフォーマットはisfnameと同じ。


		joinspaces	初期値：オン

		行の連結 "J" で、間にスペースを入れる設定。この設定を有効にすると、"J"を押して行を連結すると最
		後がピリオド(. ! ? etc..)で終わっている行ならば、行と行の間にスペースと追加(結果結合語のスペー
		スが2つになる)する。


		key

		 初期値：""

		暗号化のキーを設定する。


		keymap	初期値：""

		キーボードマッピングを設定する。


		keymodel	初期値：""

		Shift+矢印キーの動作を決める。

		オプション値 動作
		startsel     シフトキー+矢印キーで選択が出来る
		stopsel      選択モード中に矢印キーで選択を終了する

		keywordprg	初期値："man" or "man -s", DOS: "", OS/2: "view /", VMS: "help"

		"K"コマンドで実行するプログラムを変更する。


		langmap	初期値：""

		英語以外のキーボードマッピングを変更する。たとえば、

		set langmap=aj

		とすると、'a'を押下すると'j'の動作になる。


		langmenu	初期値：""

		メニュー翻訳のために使用する言語を設定する。「runtimepath」の中の「lang」ディレクトリーからど
		のファイルがロードされるか伝える。

		例：

		set lm=de.latin1

		とすると、$VIMRUNTIME/lang/menu_de.latin1.vim が読み込まれるようになる。


		laststatus	初期値：1

		ステータスラインを表示するウィンドウを設定する。

		オプション 動作
		値
		0          一番下のウィンドウはステータスラインを表示しない
		1          ウィンドウが1つの時はステータスラインを表示しない 2つ以上ある場合は、ステータスライ
				   ンを表示する
		2          常にステータスラインを表示する

		lazyredraw	初期値：オフ

		スクリプト実行中に画面を描画しない。


		linebreak	初期値：オフ

		入力した行が長い場合に自動的に改行をする。 textwidthで指定した横幅で動作する。


		lines	初期値：24 or ターミナルの高さ

		ウィンドウの高さを行単位で指定する。


		linespace	初期値：0, Win32のGUIなら、1

		行間を設定する。


		lisp	初期値：オフ

		lispモードにする。


		lispwords	初期値：すごく長い

		lispのインデントに使われる単語を指定する


		list	初期値：オフ

		タブ文字、行末など不可視文字を表示する。


		listchars	初期値："eol:$"

		listで表示される文字のフォーマットを指定する。

		オプション値 動作
		eol:c        行末を文字'c'で表す
		tab:xy       タブを最初の1文字を'x'続く文字を'y'で表示する
		trail:c      空白で終わる行の空白文字を'c'で表示する
		extends:c    折り返した行の終わりに文字'c'を表示する
		precedes:c   →にスクロールして、行の先頭を表示し切れていない場合に行の先頭に'c'を表示する

		loadplugins	初期値：オン

		プラグインスクリプトを起動時にロードする。


		magic	初期値：オン

		正規表現に特殊文字を含めるようにする。

		set nomagic

		にすると、正規表現で、"*"を\*と表記するようになる。


		makeef	初期値：""

		makeのエラーやgrep結果を出力するファイル名

		:set makeef=/tmp/make##.err

		のようにファイル名に##を含めると##部分をユニークな番号に変えてくれる。


		makeprg	初期値："make", VMS: "MMS"

		makeを行うプログラムを指定する。


		matchpairs	初期値："(:),{:},[:]"

		%で一致する文字を指定する。

		set matchpairs+=<:>

		とすれば、htmlのタグ&lt;xxx&gt;を%で表示できるようになる。


		matchtime	初期値：5

		matchpairsで指定したペアのマッチを表示する時間。時間は1/10秒単位で指定する。


		maxfuncdepth	初期値：100

		ユーザファンクションでの関数のネストの深さの最大値を設定する。作成した関数で再帰が終了しない場
		合に、この設定値まで繰り返すと終了する。


		maxmapdepth	初期値：1000

		マッピングのネストの最大値を設定する。

		:map x y
		:map y x

		としても、設定した最大値で終了する


		maxmem	初期値：256 から 5120

		1つのバッファで使用できるメモリの最大値を設定する。 KB単位で指定する。


		maxmemtot	初期値：2048 から 10240

		全バッファの総メモリを制限する。 KB単位で指定する。


		menuitems	初期値：25

		メニューの中で使用するアイテムの最大の数。


		modeline	初期値：Vim: オン, Vi: オフ

		モードラインの有効無効。


		modelines	初期値：5

		モードラインを探す行数。ファイルの先頭からと終端から設定した行数を検索する。モードラインとは、
		以下のようにタブストップ、ソフトタブストップ、シフト幅などをコメント内に書くだけで指定できるも
		の。

		/* vi:set ts=8 sts=4 sw=4:
		 *
		 * VIM - Vi IMproved    by Bram Moolenaar
		 *
		 * Do ":help uganda"  in Vim to read copying and usage conditions.
		 * Do ":help credits" in Vim to see a list of people who contributed.
		 * See README.txt for an overview of the Vim source code.
		 */


		modifiable	初期値：オン

		バッファを変更可能にする。

		set nomodifiable

		とすると、バッファの変更が出来なくなる。


		modified	初期値：オフ

		バッファが変更されるとセットされる。自分で設定するものではない。


		more	初期値：Vim : オン, Vi : オフ

		画面に収まらずにスクロールしてしまう出力をmoreで表示する。


		mouse	初期値："", GUIなら"a"

		マウスを有効にするモードを設定する。

		オプション値 動作
		n            ノーマルモード
		v            ビジュアルモード
		i            挿入モード
		c            コマンドライン
		h            上の全てのモード（マウスをクリックしてもカーソルは動かない）
		a            上の全てのモード（マウスをクリックするとカーソルが動く）
		r            hit-enter や more-prompt プロンプト

		mousefocus	初期値：オフ

		マウスのいるウィンドウをアクティブにする。この設定は、1つのVimウィンドウの中のバッファを表示し
		ているウィンドウのアクティブ/非アクティブを切り替えます。


		mousehide	初期値：オン

		入力を開始したらマウスカーソルを隠す。


		mousemodel	初期値："extend", "popup" for MS-DOS and Win32

		マウスの動作を設定する。

		オプション値 動作
		extend       UNIXでよく使うアプリケーション(xterm)のようなマウスの動作
		popup        右クリックでメニューを表示する
		popup_setpos 右クリックでメニューを表示して、Vimのカーソルもクリック位置に移動する

		mouseshape	初期値："i:beam,r:beam,s:updown,sd:cross,m:no,v:rightup-arrow"

		マウスカーソルの形状をVimに教える以下のように指定する。（設定方法はguicursorと同じ）

		mode-list:shape,mode-list:shape:mode-list:shape・・・

		mode-listには、下表の値を'-'で区切って指定できる。

		オプション値 動作
		n            ノーマルモード
		v            ビジュアルモード
		ve           ビジュアルモード（selectionオプションの値がexclusiveになっている場合）
		o            オペレータ待機モード（dやcを打った後）
		i            挿入モード
		r            置換モード
		c            コマンドラインへの文字追加中
		ci           コマンドラインへの文字挿入中
		cr           コマンドラインの文字置換中
		m            'Hit ENTER' か 'More' プロンプト
		e            全てのモード、最後のウィンドウよりも下(コマンドライン)
		s            全てのモード、ステータスライン上のカーソル
		sd           全てのモード、ステータスラインをマウスで移動中
		vs           全てのモード、縦方向のスプリッタの上
		vd           全てのモード、縦方向のスプリッタをマウスで移動中
		a            全てのモード、全ての位置

		shapeには、下表の値を指定できる。

		オプション値   動作
		arrow          通常の矢印形のカーソル
		blank          カーソルの非表示
		beam           縦に長いI型のカーソル
		updown         上下に移動できるようなカーソル
		leftright      左右に移動できるようなカーソル
		busy           砂時計
		no             システム通常の入力できないポインタ
		udsizing       上下のリサイズ
		lrsizing       左右のリサイズ
		crosshair      十字カーソル
		hand1          手１
		hand2          手２
		pencil         鉛筆
		question       ハテナマーク
		rightup-arrow  右肩上がりの矢印形カーソル
		up-arrow       上向きのカーソル
		&lt;number&gt; X11/cursorfont.h で定義されているカーソル

		例：挿入モードでのカーソルの形状を鉛筆にするためには、

		set mouseshape=i:pencil

		とする。


		mousetime	初期値：500

		マルチクリック(ダブルクリック)の間隔(msec単位)


		nrformats	初期値："octal,hex"

		Ctrl+A、Ctrl+Xの加算減算コマンドで認識する基数

		オプション値 動作
		alpha        アルファベット
		octal        8進数
		hex          16進数

		Ctrl+Aで「007」を「008」にするには、

		set nrformats-=octal

		とする。


		number	初期値：オフ

		行番号を表示する。


		osfiletype	初期値：RISC-OS なら: "Text",それ以外は""

		ファイルタイプを保持しているOSが提供するファイルタイプ。


		paragraphs	初期値："IPLPPPQPP LIpplpipbp"

		段落を開始するnroffマクロ。


		paste	初期値：オフ

		ペーストモードにする。 'textwidth' は 0 'wrapmargin' は 0 'autoindent' は reset 'smartindent'
		は reset 'softtabstop' は 0 'revins' は reset 'ruler' は reset 'showmatch' は reset
		'formatoptions' は空のように動作する


		pastetoggle	初期値：""

		ペーストモードをトグルする


		patchexpr	初期値：""

		ファイルにパッチを適用し、かつファイルの新バージョンを生成すると評価されるスクリプト


		patchmode	初期値：""

		パッチモードに移行する。ファイルの保存時に、xxx.txt.orgというようなファイルを生成する。


		path	初期値：Unix: ".,/usr/include,OS/2:".,/emx/include,," それ以外: ".,,"

		自動的に使用するディレクトリを','で区切って指定する。

		set path=.,/usr/include,

		としておくと、カレントディレクトリが/usr/includeでなくても、

		:find ctype.h

		とすれば、/usr/include/ctype.hを開くことが出来るようになる。このpathは「gf」コマンドでも使用す
		ることが出来る。


		previewheight	初期値：12

		プレビューウィンドウの高さを指定する。


		previewwindow	初期値：オフ

		現在のウィンドウをプレビューウィンドウにする。


		printdevice	初期値：empty

		使用されるプリンタの名前。値が空のときは、システムの規定プリンタを使う。


		printexpr	初期値：複雑、help参照

		コマンド ":hardcopy" で生成されるPostScriptファイルを印刷するために評価されるスクリプトを指定
		する。印刷されるファイル名は、v:fname_in ":hardcopy" に対する引数は、v:cmdarg


		printfont	初期値："courier"

		コマンド |:hardcopy| の出力に使われるフォント名。 'guifont' と同じ書式で指定する。


		printheader	初期値："%&lt;%f%h%m%=Page %N"

		コマンド |:hardcopy| の出力のヘッダの書式を定義する。値の設定方法はオプション 'statusline' と
		同様である


		printoptions	初期値：""

		コマンド |:hardcopy| の出力書式。


		readonly	初期値：オフ

		読み込み専用

		:set readonly

		とすることで、編集しているバッファを読み込み専用(書き込むためには:w!としなければならない)にで
		きる。誤ってファイルを変更しないように予防することができる。

		:set noreadonly

		とすることで、読み込み専用を解除することができる。


		remap	初期値：オン

		再帰的マッピングを有効にする。再帰的マッピングとは、

		:map h a

		key 'h' を key 'a' に置き換える→ 'h'を押すと'a'を押したのと同じになる" この状態で

		:map b h

		とすると、'b' が 'h' に置き換えられた後、さらに 'h' が 'a' に置き換えられるため、'b'を押すと
		'a'を押したことと同じになる。これを再帰的マッピングという。特定のマッピングに対して再帰的マッ
		ピングを禁止したいときは、コマンド ":noremap[!]" を使う。


		report	初期値：2

		":"コマンドにより変更された行の数の報告が出る最小値。変更された行の数がオプション'report' より
		大きければ、ほとんどの ":" によるコマンドでメッセージが表示される。必ず報告してほしいなら
		'report' を 0 にすること。ここでいう報告とは、

		:1,3d

		として、3行削除した場合にステータスラインに"3 行削除しました"のように表示されるメッセージのこ
		と。

		:%s/pat/str/

		で更新された場合も'report'の値より多くの置換個所があれば、"1 箇所置換しました (計 1 行内)"と表
		示される。


		restorescreen	初期値：オン

		Vimを終了した後にコンソール画面の内容が復元される。このオプションをONにしておくと、コンソール
		画面がvim起動前と同じになる。 OFFの場合は、コンソール画面にvimが残る。


		revins	初期値：オフ

		挿入モードでの文字の挿入方向を通常と逆向きにする。左から右に向かって文字を入力していた場合は、
		右から左に向かって文字を入力するようになる。


		rightleft	初期値：オフ

		画面表示の方向を右から左にする。ファイルに保存されている文字は右から左の方向へ表示される。この
		オプションを使うと、ヘブライ語やアラビア語のような右から左に向かって書かれる言語によるファイル
		を編集できる。


		ruler	初期値：オフ

		カーソルが何行目の何列目に置かれているかを表示する。オプション 'rulerformat' が設定されている
		ときは、それによってルーラの内容が指定される。


		rulerformat	初期値：empty

		ルーラの内容を指定する。書式は 'statusline' のものと同様。


		runtimepath	初期値：$HOME/.vim、$VIM/vimfiles, $VIMRUNTIME, $VIM/vimfiles/after,$HOME/.vim/after"

		ランタイムファイルが検索されるディレクトリのリスト。 Vimは、このオプションで指定されたディレク
		トリからランタイムファイルを順に検索する。このため、'rumtimepath'の先頭に "~/vimfiles"を置いて
		おけば、システム共通のVim用ディレクトリではなく、自分のHOMEディレクトリ"~/vimfiles"を先に検索
		してくれる。この動作のおかげで、rootに頼まなくても、HOMEディレクトリ内に"~/vimfiles/plugin/"を
		作成しておき、中に自分の使うプラグインを置けばそれを使うことができる。


		scroll	初期値：ウィンドウの高さの半分

		コマンド CTRL-U や CTRL-D でスクロールする行数。 ":set scroll=0" とすると、値はウィンドウ高の
		半分になる。


		scrollbind	初期値：オフ

		他のスクロール同調中ウィンドウと同じだけスクロールする。同時にスクロールさせたいウィンドウのそ
		れぞれで、このオプションをONにすると同時にスクロールするようになる。ファイルの2個のヴァージョ
		ン間の違いを見るのに便利である。


		scrolljump	初期値：1

		カーソルが画面外に出たときにスクロールする行数の最小値。 "j"でカーソルを下にスクロールして行き
		、画面上に表示されていない次の行を表示しようとしたときに、このオプションで指定した行数だけ一気
		にスクロールする。


		scrolloff	初期値：0

		カーソルの上または下に表示する最小限の行数。カーソルの上または下には、最低でもこのオプションに
		指定した数の行が表示される。これにより、編集中の箇所の周辺のテキストを見ることができる。とても
		大きい値 (999等) にすると、カーソルの置かれた行は常にウィンドウの中央に表示される。


		scrollopt	初期値："ver,jump"

		スクロール同調中ウィンドウの動作設定。スクロール同調中ウィンドウの動作を設定するキーワードの、
		コンマ区切りのリスト。指定可能なキーワードは以下の通りである。

		ver  同調中ウィンドウの垂直スクロールを同調させる
		hor  同調中ウィンドウの水平スクロールを同調させる
		jump これは垂直スクロールにおいて、2個のウィンドウ間のoffset に適用される。この offset とは同
			 調中ウィンドウに表示されているテキストの先頭行のずれのことである。

		ウィンドウ内を動き回るときは、別の同調中ウィンドウの表示区域が、バッファの先頭より前またはバッ
		ファの末尾より後ろに達してしまうかもしれない。それでも offset は変更されず、カーソルが戻ってき
		たときは、同調中ウィンドウは可能ならば求められる位置にスクロールしようとする。カレントウィンド
		ウを変更したときは、相対 offset を使って2つのことが行われる。

		 1. 値に "jump" が含まれていないとき、新しくカレントウィンドウになったウィンドウのスクロール位
			置により相対offset が調節される。別のウィンドウに戻ったときは、新しい相対 offset が使われ
			る。
		 2. 値に "jump" が含まれているとき、同じ相対オフセットを保つために他のウィンドウもスクロールす
			る。他のウィンドウに戻ったときも、同じ相対 offset を使う。


		sections	初期値："SHNHH HUnhsh"

		Nroffで使われる章を分けるためのマクロ。


		secure	初期値：オフ

		Vimを安全に使うオンのとき、コマンド ":autocmd" やシェルコマンド、書き込みコマンドがカレントデ
		ィレクトリ内のファイル ".vimrc" や ".exrc" では使用できなくなり、マッピングコマンドも表示され
		るようになる。問題が起きることはないと分かっているときか、オプション 'exrc' がオフのときにのみ
		このオプションをオフにすること。


		selection	初期値："inclusive"

		選択時の動作を設定する。設定可能な値は以下の通り。

		値        行末の後 末尾に操作
		old       X        O
		inclusive O        O
		exclusive O        X

		「行末の後」というのは、カーソルを行末より1文字後ろに置けることを表す。「末尾に操作」というの
		は、選択領域の末尾の文字が操作を受けることを表す。例えば、選択領域の削除に "x" が使われたとき
		などに違いが出る。v$xとするとexclusiveの場合は改行を削除しないが、inclusiveは削除する。


		selectmode	初期値：""

		VisualモードでなくSelectモードを開始する条件。値はキーワードのコンマ区切りのリストをである。キ
		ーワードは領域選択が開始されたときのうち、どの場合でVisualモードでなくSelectモードを開始するか
		を決定する。指定可能なキーワードは以下の通りである。

		mouse マウス使用時
		key   シフトキーと特別なキーの同時押しをしたとき
		cmd   コマンド "v", "V" または CTRL-V の使用時

		sessionoptions	初期値："blank,buffers,curdir,folds,help,options,winsize"

		コマンド |:mksession| の効果の設定コマンド |:mksession| の効果を変更する。値はキーワードのコン
		マ区切りのリストである。キーワードは、ある項目の保存と復元を有効にする。

		キーワード   復元される項目
		blank        空のウィンドウ
		buffers      ウィンドウに表示されたバッファだけでなく、隠れバッファと、リストに載っているだけ
					 で読み込まれていないバッファ
		curdir       カレントディレクトリ
		folds        手動で作られた折り畳み、折り畳みの開閉の区別、折り畳み関連のローカルなオプション
		globals      大文字で始まり、最低1個の小文字を含む名前のグローバル変数
		help         ヘルプウィンドウ
		localoptions ウィンドウまたはバッファに対してローカルなオプションとマッピング (ローカルなオプ
					 ションのグローバルな値ではない)
		options      全てのオプションとマッピング (ローカルなオプションのグローバルな値も)
		resize       Vimのウィンドウのサイズ: 'lines' と 'columns' の値
		sesdir       セッションファイルがおかれているディレクトリが、カレントディレクトリになる (ネッ
					 トワーク越しに、異なったシステムからアクセスを受けるプロジェクトでは便利である)
		slash        ファイル名内の '\' がスラッシュに置換される
		unix         WindowsやDOS上でも、Unix形式の end-of-line (1個の<nl>) を使う
		winpos       Vimのウィンドウ全体の位置
		winsize      ウィンドウサイズ

		shell	初期値：$SHELL or "sh",MS-DOS and Win32: "command.com" or "cmd.exe", OS/2: "cmd"

		シェルの名前を設定する。 "!" や ":!" 等のコマンドで使うシェルの名前。コマンドには引数を与える
		ことができる。例えば "csh -f" である。値に空白や '\' を含めるには、スペースの前に'\'を置いて'\
		'とする。


		shellcmdflag	初期値："-c"

		シェルに渡されるフラグ。例えば、"bash.exe -c ls" や "command.com /c dir" とする。


		shellpipe	初期値："&gt;", "| tee", "|&amp; tee" or "2&gt;&amp;1| tee"

		":make" の出力をエラーファイルに導くために使われる文字列。 AmigaとMS-DOSでの既定値は "&gt;" で
		ある。出力はファイルに直接保存され、スクリーンには表示されない。Unixでの既定値は "| tee" であ
		る。コンパイラからの標準出力がファイルに保存され、画面にも表示される。


		shellquote	初期値：""

		シェルに渡すときに、コマンドを囲む引用符ユーザが必ずこのオプションを設定しなくともよいように、
		既定値は 'shell' に従って設定される。


		shellredir	初期値："&gt;", "&gt;&amp;" or "&gt;%s 2&gt;&amp;1"

		フィルタコマンドの出力をリダイレクトするための文字列。既定値は "&gt;" である。Unixでは、初期化
		の後にオプション 'shell' が"csh", "tcsh" または "zsh" だったときは、既定値は "&gt;&amp;" にな
		る。'shell'が "sh", "ksh" または "bash" だったときは、既定値は "&gt;%s 2&gt;&amp;1" になる。つ
		まり標準エラー出力も含まれる。


		shellslash	初期値：オフ

		ファイル名の展開にスラッシュを使う。これはcommand.com や cmd.exe の代わりにUnix系のシェルを使
		うときに使用する。


		shelltype	初期値：0

		シェルを使う条件を設定する。 0 または 2: "シェル名 'shellcmdflag' コマンド" で外部コマンドを実
		行 1 または 3: "シェル名コマンド" で外部コマンドを実行


		shellxquote	初期値：""; system()を使ったときは"\""

		コマンドをシェルに渡すときに、コマンドを囲む引用符 "!" や ":!" 等のコマンドでコマンドをシェル
		に渡すときに、コマンドを囲む引用符(の列)。リダイレクトの指示もこの中に含む。


		shiftround	初期値：オフ

		インデントをオプション 'shiftwidth' の値の倍数に丸める。コマンド "&gt;"と "&lt;" に適用される
		。Insertモードでの CTRL-T と CTRL-D では、インデントは常に 'shiftwidth' の倍数に丸められる


		shiftwidth	初期値：8

		自動インデントの各段階に使われる空白の数。


		shortmess	初期値：Vim "filnxtToO", Vi : ""

		CTRL-G 等によるファイル関連のメッセージのフォーマット。

		フ
		ラ  効果
		グ
		f   "(file 3 of 5)" の代わりに "(3 of 5)" を表示。
		i   "[最終行が不完全]" の代わりに "[noeol]" を表示。
		l   "999 行, 888 文字" の代わりに "999L, 888C" を表示。
		m   "[変更あり]" の代わりに "[+]" を表示。
		n   "[新ファイル]" の代わりに "[新]" を表示。
		r   "[読込専用]" の代わりに "[読専]" を表示。
		w   書き込みコマンドには "書込み" の代わりに "[w]" を、コマンド ':w &gt;&gt; file' には "追加"
			の代わりに "[a]" を表示。
		x   "[dosフォーマット]" の代わりに "[dos]", "[unixフォーマット]"の代わりに "[unix]", "[マック
			フォーマット]" の代わりに"[マック]" を表示。
		a   上記の省略を全て行う。
		o   ファイルの書き込み時のメッセージを、その後のファイルの読み込み時のメッセージで上書きする
			(":wn" を使うときやオプション'autowrite' がオンのときに便利である)
		O   ファイルの読み込み時のメッセージや Quickfix 関係のメッセージ(例えば ":cn") がその前のメッ
			セージを必ず上書きする。
		s   「下まで検索したので上に戻ります」と「上まで検索したので下に戻ります」というメッセージを表
			示しない。
		t   ファイル間連のメッセージが長すぎてコマンドラインに収まらないときは、先頭を切り詰める。先頭
			には "&lt;" が表示される。Exモードでは無視される。
		T   その他ののメッセージが長すぎてコマンドラインに収まらないときは、中央を切り詰める。中央には
			"..." が表示される。Exモードでは無視される。
		W   ファイルの書き込み時に "書込み" や "[w]" を表示しない。
		A   スワップファイルがすでにあることが発見されたときに「注意」メッセージを表示しない。
		L   Vimの開始時に挨拶メッセージを表示しない |:intro|。

		shortname	初期値：オフ

		ファイル名が8文字に3文字の拡張子を付けたものであると仮定する。


		showbreak	初期値：""

		折り返された行の先頭に表示する文字列。 &lt;Tab&gt;文字とコンマ以外の、printable な文字のみが指
		定できる (将来のヴァージョンでは、行末に表示される部分と行頭に表示される部分の区切りにコンマが
		使われるかもしれない)。


		showcmd	初期値：Vim : オン, UNIXは、オフ, Vi: オフ

		コマンドをステータスラインに表示する。 'd'を入力するとステータスラインに'd'と表示されるように
		なる。ビジュアルモーでは選択文字数や選択行数が表示されるようになる。


		showfulltag	初期値：オフ

		タグファイルから単語補完をするときに1行まるごと補完する。 Insertモードでタグファイルから単語補
		完(CTRL-X CTRL-])をするとき、タグ名と整理された検索パターン (あれば) の両方をマッチする限り表
		示する。そのため、C言語の関数にマッチすれば、どのような引数を必要とするかのテンプレートを見る
		ことができる (コーディングスタイルが適当なものであれば)。


		showmatch	初期値：オフ

		閉じ括弧が入力されたとき、対応する括弧を表示する。マッチした括弧が画面上に見えているときのみジ
		ャンプする。マッチを表示する時間はオプション 'matchtime' で設定できる。 'cpoptions' にフラグ
		'm' が含まれていないときは、ジャンプ中に文字を入力するとカーソルがすぐに元の場所に戻る。マッチ
		の表示時のカーソルの形状や点滅方法については、'guicursor' の"sm" の項目を参照。


		showmode	初期値：Vim : オン, Vi : オフ

		現在のモードを表示する。 Insertモード、ReplaceモードまたはVisualモードで最終行にメッセージを表
		示する。このメッセージの強調表示の設定には、オプション 'highlight' のフラグ 'M' を使うこと。


		sidescroll	初期値：0

		水平スクロールの刻み幅。オプション 'wrap' がオフでカーソルが画面外に出るときのみ使われる。値が
		0 のときはカーソルを画面の中央に置くようにスクロールする。


		sidescrolloff	初期値：0

		カーソルの右または左に、表示する文字数。オプション 'nowrap' がオフのとき、カーソルの右または左
		には、最低でもこの数だけの列が表示される。 'sidescroll' を 1 以上に設定しているときにこのオプ
		ションも 1 以上にすると、水平スクロールをしている周辺のテキストが見えるようになる。とても大き
		い値 (999等) にすると、カーソルの置かれた列は常にウィンドウの中央に表示される。


		smartcase	初期値：オフ

		検索で小文字なら大文字を無視、大文字なら無視しない設定。検索パターンが大文字を含んでいたら大文
		字と小文字を区別して検索するようになる。小文字のみの場合は、大文字と小文字を区別しないで検索す
		る。


		smartindent	初期値：オフ

		新しい行を作ったときに高度な自動インデントを行う。 'cindent' がオンのときは、'smartindent' を
		オンにしても効果はない。


		smarttab	初期値：オフ

		行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする。行頭以外では 'tabstop'
		の数だけ空白が挿入される。オフのときは、&lt;Tab&gt; を打ち込むと常に 'tabstop' の数だけインデ
		ントされる。


		softtabstop	初期値：0

		tabstopを変えずに空白を含めることにより、見た目のtabstopを変える &lt;Tab&gt; の挿入や <bs> の
		使用等の編集操作をするときに、&lt;Tab&gt; が対応する空白の数。&lt;Tab&gt; が挿入される「ように
		思える」が、実は空白と &lt;Tab&gt; の両方が混ざって使われている。


		splitbelow	初期値：オフ

		ウィンドウの横分割で新しいウィンドウをカレントウィンドウの下に開く。水平分割後にアクティブなウ
		ィンドウが現在のウィンドウの下に出来たウィンドウになる。


		splitright	初期値：オフ

		ウィンドウの縦分割で新しいウィンドウをカレントウィンドウの右に開く。垂直分割後にアクティブなウ
		ィンドウが現在のウィンドウの右に出来たウィンドウになる。


		startofline	初期値：オン

		ページアップ、ダウンでカーソル位置を最初の余白に移動する以下のコマンドで移動すると、カーソルは
		行内の最初の余白に移動する。オフのときは、カーソルは (可能ならば) 同じ列に置かれる。適用される
		コマンド: CTRL-D, CTRL-U, CTRL-B, CTRL-F, "G", "H", "M", "L", 行単位で行うときの "d", "&lt;&
		lt;", "&gt;&gt;", カウントを指定したときの "%"、バッファ変更コマンド (CTRL-^, :bnext, :bNext
		等)、行番号のみのExコマンド (例えば ":25" や ":+")。


		statusline	初期値：empty

		ステータス行の表示内容を設定する。値は、普通のテキストに挟まれた関数 printf 形式の項目からなる
		。このオプションが設定されているときは、'ruler'が表示されなくなる。

		欄     意味
		-      その項目を左寄せする。minwid が項目の長さより大きい場合は、既定では右寄せになる。
		0      数値の頭に0を表示する。欄 '-' が優先する。
		minwid 項目の長さの最小値。余白の穴埋めは '-' と '0' で設定する。
			   項目の長さの最大値。文字列の項目の切り詰めでは '&lt;' が左に表示される。数値の項目は
		maxwid maxwid-2 文字に切り詰められ、それに "&gt;数" が続く。ここで "数" は表示されなかった文字
			   数であり、指数表記に似ている。
		item   以下で説明するアルファベット1文字。

		以下は、指定可能なステータス行の item の説明である。"item" の2文字目はその item の種類を表す。

		N 数値
		S 文字列
		F 以下で説明するフラグ
		- 実際に表示されるものではない
		item 意味
		f S  バッファ内のファイルの、カレントディレクトリに対する相対パス。
		F S  バッファ内のファイルのフルパス。
		t S  バッファ内のファイルのファイル名 (パスを除く)。
		m F  修正フラグ。表示されるのは 'modifiable' がオフならば " [+]" または " [-]"
		M F  修正フラグ。表示されるのは ",+" または ",-"。
		r F  読み込み専用フラグ。表示されるのは " [RO]"。
		R F  読み込み専用フラグ。表示されるのは ",RO"。
		h F  ヘルプバッファフラグ。表示されるのは " [ヘルプ]"。
		H F  ヘルプバッファフラグ。表示されるのは ",HLP"。
		w F  プレビューウィンドウフラグ。表示されるのは " [プレビュー]"。
		W F  プレビューウィンドウフラグ。表示されるのは ",PRV"。
		y F  バッファ内のファイルのタイプ。例えば " [vim]"。'filetype' を参照。
		Y F  バッファ内のファイルのタイプ。例えば ",VIM"。'filetype' を参照。{Vi mが |+autocmd| 機能付
			 きでコンパイルされたときのみ有効}
		k S  他言語用マッピング |:lmap| が使われているとき、変数 "b:keymap_name" または 'keymap' を "
			 <keymap>" と表示する。
		n N  バッファ番号。
		b N  カーソル下の文字の文字コードの10進数表現。
		B N  同上、ただし16進数表現。
		o N  カーソル下の文字がファイル内で何バイト目であるか。先頭では1。覚え方: ファイル先頭からの隔
			 たり (に1を足したもの) {Vi mが |+byte_offset| 機能付きでコンパイルされたときのみ有効}
		O N  同上、ただし16進数表現。
		N N  印刷時のページ番号 ('printheader' 内でのみ有効)。
		l N  何行目にカーソルがあるか。
		L N  バッファ内の総行数。
		c N  何列目にカーソルがあるか。
		v N  画面上の何列目にカーソルがあるか。
		V N  画面上の何列目にカーソルがあるか。表示形式は -{num}。値が 'c' と等しければ表示されない。
		p N  現在行がファイル内の何％の位置にあるか (|CTRL-G| と同様)
		P S  現在表示されているウィンドウ内のテキストが、ファイル内の何％の位置にあるか。これは
			 'ruler' で説明されているものに似ている。値は常に3文字である
		a S  既定のタイトルと同様の引数ファイルリストを"({current} of {max})" と表示する。ファイル引数
			 の数が0または1のときは空。
		{ NF '{' と '}' の間の expression を評価し、結果に置き換える。
		( -  項目グループの開始。グループ内の項目全てに対する幅と寄せ方の設定に使える。どこかで %) で
			 閉じられなければならない。
		) -  項目グループの終了。欄 width は指定できない。
		&lt; 行が長すぎるときに切り詰める位置。既定では先頭。欄 width は指定できない。
		-
		= -  左寄せ項目と右寄せ項目の区切り。欄 width は指定できない。
			 使われる強調表示グループを User{N} に設定する。ここで {N} は欄minwid から取られる。例えば
		* -  %1* と設定する。%* や %0* で通常の強調表示を復元する。強調表示グループ User{N} と
			 StatusLine の違いは、非カレントウィンドウのステータス行の強調表示を設定するグループの
			 StatusLineNC に適用される。数 N は 1 以上 9 以下である。|hl-User1..9| を参照。

		suffixes	初期値：".bak,~,.o,.h,.info,.swp,.obj"

		ワイルドカードで表示するときに優先度を低くする拡張子。この拡張子を持つファイルは、ワイルドカー
		ドに複数のファイルがマッチしたときの優先度が低くなる。拡張子はコンマで区切って指定する。


		suffixesadd	初期値：""

		"gf", "[I" 等のコマンドで検索されるファイルの拡張子。値は拡張子のコンマ区切りのリスト。

		例：

		:set suffixesadd=.java


		swapfile	初期値：オン

		スワップファイルを使用する設定。このオプションは、特定のバッファでスワップファイルを使いたくな
		いときにはオフに設定できる。


		swapsync	初期値："fsync"

		書き込みの後にディスク上のスワップファイルの内容を同調する設定。値が空のときは、スワップファイ
		ルの一部はメモリ内のままで、ディスクに書き込まれないかもしれない。システムがクラッシュすると、
		仕事の成果が余計ひどく失われるかもしれない。


		switchbuf	初期値：""

		バッファを切り替えるときの動作を調節する。

		useopen これが含まれたときは、指定されたバッファを開いているウィンドウがあれば、そこにジャンプ
				する。含まれないときは、他のウィンドウを調べない。
		split   これが含まれたときは、カレントウィンドウをバッファの読み込み前に分割する。含まれないと
				きは、ウィンドウを分割せず、カレントウィンドウを使う。

		syntax	初期値：emtpy

		強調表示(色付け)のON/OFF設定。強調表示をする場合は、:set syntax=ON とする。強調表示をしない場
		合は、:set syntax=OFF とする。自動的に適切な色付けがされない場合は、パラメータにファイルタイプ
		を指定することもできる。

		例：

		:set syntax=html


		tabstop	初期値：8

		ファイル内の &lt;Tab&gt; が対応する空白の数。


		tagbsearch	初期値：オン

		高速にタグジャンプする。タグの検索時には、タグファイルの二分探索と線形探索のどちらも可能である
		。このオプションで、二分探索を行うようにできる。二分探索をすると、タグの検索が「大幅に」速くな
		る。


		taglength	初期値：0

		タグ名の長さに上限を持たせる。非0 のときは、タグ名のうち、前からこの値の文字数までが意味を持つ
		。


		tagrelative	初期値：Vim : オン, Vi : オフ

		タグ名を相対的にする。タグファイルを別のディレクトリから使うと、そのタグファイルでのタグ名は、
		タグファイルのあるディレクトリに対して相対的になる。


		tags	初期値："./tags,tags", +emacs_tagsでコンパイルしたら: "./tags,./TAGS,tags,TAGS"

		タグファイルを指定する。タグを使うコマンドで必要とするタグファイルの名前の、空白またはコンマ区
		切りのリスト。ファイル名に空白やコンマを使うときは、'\' を前に置く。


		tagstack	初期値：オン

		タグスタックを使う。タグスタックとは、タグジャンプの履歴を持ち、CTRL-Tによりジャンプ元に戻る機
		能のことオフのときは、引数付きのコマンド ":tag" または ":tselect" は、タグをタグスタックにプッ
		シュしない。


		term	初期値：$TERM

		ターミナルの名前。ターミナル制御文字の選択に使われる。環境変数は展開される。


		termencoding	初期値：""

		ターミナルで使われるエンコーディング名。どの文字エンコーディングをキーボードが生成し、どの文字
		エンコーディングをディスプレイが理解できるかを指定する。


		terse	初期値：オフ

		ファイルの端まで検索してしまったときのメッセージが表示しない。オプション 'shortmess' にフラグ
		's' を追加する (こうするとファイルの端まで検索してしまったときのメッセージが表示されなくなる)
		。オフのときは、オプション 'shortmess' からフラグ 's' を取り除く。


		textauto	初期値：Vim : オン, Vi : オフ

		後方互換性のため残されたオプション、fileformatsを使う。


		textmode	初期値：MS-DOS, Win32 and OS/2: オン, それ以外は、オフ

		後方互換性のため残されたオプション、fileformatsを使う。


		textwidth	初期値：0

		入力されているテキストの最大幅。行がそれより長くなると、この幅を超えないように空白の後で改行さ
		れる。値を 0 に設定すると無効になる。


		thesaurus	初期値：""

		同義語補完コマンドで使われるファイル。同義語補完コマンド |i_CTRL-X_CTRL-T| で単語の検索に使わ
		れるファイルの名前の、コンマ区切りのリスト。そのファイルの各行には、似た意味の単語をキーワード
		を構成しない文字で (空白がよい) 区切ったものが並ぶ。行長の最大値は 510 バイトである。


		tildeop	初期値：オフ

		コマンドをオペレータとして動作させる。オンのとき、ティルデコマンド "~" が operator のように使
		用できる。大文字／小文字を変換するが、このオプションがオンのときは、"d" 等のように範囲を指定さ
		れるまで変換しない。このオプションがオフでも、"g~{motion}" なら範囲を指定できる。


		timeout	初期値：オン

		Vimが入力の確定を待つかを設定する。詳細は、ttimeoutを参照。


		timeoutlen	初期値：1000

		キーコードやマッピングされたキー列が完了するのを待つ時間。単位は、ミリ秒。


		title	初期値：オフ

		ウィンドウのタイトルを変更する設定。ウィンドウのタイトルがオプション 'titlestring' の値になる
		。 titlestringが空の場合は、以下のようになる。 filename [+=-] (path) - VIM

		-  ファイルが変更できない、つまり 'ma' がオフであることを表す
		+  ファイルが変更を受けたことを表す
		=  ファイルが読み込み専用であることを表す
		=+ ファイルが読み込み専用であるが変更を受けたことを表す

		titlelen	初期値：85

		ウィンドウタイトルが占める列の割合。タイトルがこれより長かったときは、パス名の後ろの部分のみが
		表示される。この切り詰めを示すためには、パス名の前に文字 '&lt;' が表示される。


		titleold	初期値："Thanks for flying Vim"

		Vim終了時に復元する元のウィンドウタイトルこのオプションの値は、Vimの終了時に元のウィンドウタイ
		トルが復元できない場合のタイトルに使われる。オプション 'title' がオンであるか'titlestring' が
		空でないときのみ有効である。 cygwinを使っていると、この値がEUCになっているせいで、vim終了後に
		ウィンドウタイトルが崩れてしまう。


		titlestring	初期値：""

		ウィンドウタイトルに使われる文字。空でないとき、ウィンドウタイトルに使われる。オプション
		'title' がオンのときのみ有効。


		toolbar	初期値："icons,tooltips"

		ツールバーの様々な設定。 icons ツールバーのボタンにアイコンが表示される。 text ツールバーのボ
		タンに名前が表示される。 tooltips ツールバーのボタンでツールティップが表示される。


		ttimeout	初期値：オフ

		Vimが入力の確定を待つかを設定する。

		'timeout' 'ttimeout'     動作
		オフ      オフ           タイムアウト (時間切れ) を設けない
		オン      オンまたはオフ マッピングとキーコードにタイムアウトあり
		オフ      オン           キーコードにタイムアウトあり

		待ち時間はオプション'timeoutlen' で設定できる。


		ttimeoutlen	初期値：-1

		キーコードやマッピングされたキー列が完了するのを待つ時間。普通オプション 'timeoutlen' のみが使
		われ、'ttimeoutlen' は -1 に設定される。キーコードに対して異なった待ち時間を設定したいときは、
		'ttimeoutlen' を非負の値に設定すること。

		ttimeoutlen マッピング待ち キーコード待ち
		負          'timeoutlen'   'timeoutlen'
		0以上       'timeoutlen'   'ttimeoutlen'

		ttybuiltin	初期値：オン

		組み込みのtermcapを使う。オンのときは、外部の termcap の前に組み込みの termcap を探す。オフの
		ときは、外部の termcap の後に組み込みの termcap を探す。


		ttyfast	初期値：オフ

		高速ターミナル接続を行う。再描画のとき、行挿入／削除コマンドを使う代わりに、より多くの文字が画
		面に送られる。複数のウィンドウが開かれていたり、ターミナルが部分スクロールをサポートしていない
		とき、再描画が滑らかになる。


		ttymouse	初期値：Termに依存

		ターミナルでマウスを使う設定。

		値      意味
		xterm   xterm 風にマウスを扱う。
		xterm2  "xterm" と動作が似ているが、ドラッグ中もマウス位置を返すような xterm に対して働く。
		netterm NetTerm 風にマウスを扱う。
		dec     DEC terminal 風にマウスを扱う。
		jsbterm JSB term 風にマウスを扱う。
		pterm   QNX pterm 風にマウスを扱う。

		ttyscroll	初期値：999

		画面をスクロールする行数の最大値。この行数以上スクロールするときは、ウィンドウが再描画される。


		ttytype	初期値：$TERM

		オプション'term' の別名。


		undolevels	初期値：100, UNIX,VMS,Win32,OS/2は1000

		アンドゥ可能な変更の最大値。アンドゥをするための情報はメモリに蓄えられるため、大きい数を設定す
		るとメモリの消費量も多くなる。


		updatecount	初期値：200

		スワップファイルの自動保存設定。この回数だけ文字を打ち込むと、スワップファイルがディスクに書き
		込まれる。 0 にすると、スワップファイルは全く作られない


		updatetime	初期値：4000

		スワップファイルの自動保存時間設定。この時間の間 (ミリ秒単位) 入力がなければ、スワップファイル
		がディスクに書き込まれる。


		verbose	初期値：0

		実行中の動作に関するメッセージを表示する。値が 0 より大きいとき、Vimは実行中の動作に関するメッ
		セージを表示する。

		値     意味
		1以上  ファイル viminfo が読み書きされたとき
		2以上  コマンド ":source" でファイルを読み込んだとき
		5以上  検索されたタグファイル全て
		8以上  autocommand のグループが実行されたファイル
		9以上  実行された autocommand 全て
		12以上 実行された関数全て
		15以上 実行された Ex コマンド全て (200 文字から後は切り捨て)

		viewdir	初期値：Amiga, MS-DOS, OS/2 Win32:"$VIM/vimfiles/view", Unix: "~/.vim/view",Macintosh:
		"$VIM:vimfiles:view"

		コマンド |:mkview| によるファイルを格納するディレクトリの名前。コマンド:mkviewにより現在のウィ
		ンドウのプロパティを保存して、後で同じプロパティで開きなおすことができる。この:mkviewが使用す
		るファイルを保存するディレクトリをこのオプションで指定する。


		viewoptions	初期値："folds,options,cursor"

		コマンド |:mkview| の効果を変更する。値はキーワードのコンマ区切りのリスト。

		キーワー 復元される項目
		ド
		cursor   ファイル／ウィンドウ内のカーソル位置
		folds    手動で作られた折り畳み、折り畳みの開閉の区別、折り畳み関連のローカルなオプション
		options  ウィンドウまたはバッファについてローカルなオプションとマッピング (ローカルなオプショ
				 ンのグローバルな値は含めない)
		slash    ファイル名内の '\' がスラッシュに置換される
		unix     WindowsやDOS上でも、Unix形式の end-of-line (1個の) を使う

		viminfo	初期値：Vi : "", Vim MS-DOS,'20,"50,h,rA:,rB:、Amigaは: '20,"50,h,rdf0:,rdf1:,rdf2:それ以外は:
		'20,"50,h

		viminfoファイルの設定。値は指定部のコンマ区切りのリスト

		フ
		ラ 動作
		グ
		!  これが含まれると、アルファベットの大文字で始まり、小文字を含まないグローバル変数を保存・復
		   元する。つまり "KEEPTHIS" と"K_L_M" は保存されるが、"KeepThis" と "_K_L_M" は保存されない。
		   各レジスタで保存される行数の最大値。0 にすると、レジスタは保存されなくなる。指定されないと
		"  きは、すべての行が保存される。文字'"' の前に '\' を置くことを忘れないこと。そうでないと、コ
		   メントの開始と見なされてしまう！
		   これが含まれると、バッファリストを保存・復元する。Vimの起動時にファイル名が引数に含まれてい
		%  ると、バッファリストは復元されない。 Vimの起動時にファイル名が引数に含まれていないと、バッ
		   ファリストが viminfo ファイルから復元される。ファイル名のないバッファとヘルプ用バッファは、
		   viminfo ファイルには書き込まれない。
		   マークが復元されるファイル履歴の最大値。オプション 'viminfo'が空でないときは、常にこれを設
		'  定しなければならない。また、このオプションを設定するとジャンプリスト |jumplist| もviminfo
		   ファイルに蓄えられることになる。
		/  保存される検索パターンの履歴の最大値。非0 の値を指定すると、前回の検索パターンと置換パター
		   ンも保存される。これが含まれないときは、'history' の値が使われる。
		:  保存されるコマンドライン履歴の最大値。これが含まれないときは、'history' の値が使われる。
		@  保存される input-line 履歴の最大値。これが含まれないときは、'history' の値が使われる。
		c  これが含まれると、viminfo ファイル内のテキストを、書き込まれたときのエンコーディングから現
		   在のエンコーディングに変換する。|viminfo-encoding| (訳注: および 'encoding') を参照。
		   ファイルマークを保存するかどうか。0 を指定すると、ファイルマーク ('0 から '9, 'A から 'Z)
		f  は保存されない。これが含まれなかったり、値が非0 のときは、みな保存される。 '0 は (終了時や
		   コマンド ":wviminfo" の実行時の) カーソル位置の保存に使われる。
		h  viminfo ファイルの読み込み時に、'hlsearch' を無効にする。含まれないときは、最後の検索コマン
		   ド以来、コマンド ":nohlsearch"が使われたかどうかによる。
		   これでファイル viminfo の名前を指定する。名前は 'n' のすぐ後に続けて指定する。'viminfo' の
		n  最後に指定しなければならない！Vimの開始時に引数 "-i" が指定されると、それで指定されたファイ
		   ル名がここで指定されたものを上書きする。環境変数は、オプションの設定時ではなく、ファイルの
		   読み込み時に展開される。
		   リムーバブル・メディア (訳注: フロッピ、CD-ROM等の取り外せる記憶装置。この中身は取り替えて
		   しまえば全く変わるので、ファイル履歴の意味がない) の指定。引数は文字列 (次の ',' まで) であ
		r  る。これは複数個指定できる。それぞれがマーク履歴の対象外になるパスの先頭部を指定する。これ
		   はリムーバブル・メディアを避けるためである。 MS-DOSでは "ra:,rb:", Amigaでは
		   "rdf0:,rdf1:,rdf2:" とするとよい。大文字と小文字の区別はない。それぞれの 'r' の引数の最大長
		   は 50 文字である。

		例:

		:set viminfo='50,\"1000,:0,n~/vim/viminfo

		'50
			最近編集した 50 ファイル内のマークは保存される。
		"1000
			レジスタの中身 (それぞれ 1000 行まで) は保存される。
		:0
			コマンドラインの履歴は保存されない。
		n~/vim/viminfo
			使用するファイル名は "~/vim/viminfo" である。
		'/' がない
			'/' が指定されていないので、既定値が使われる。つまり全ての検索履歴や前回の検索パターン、置
			換パターンが保存される。
		'%' がない
			バッファリストは、保存も復元もされない。
		'h' がない
			'hlsearch' による強調表示は復元される。


		virtualedit	初期値：""

		フリーカーソルモードにする。値は、以下のキーワードのコンマ区切りのリストである。

		値     意味
		block  Visual blockモードで仮想編集を有効にする。
		insert Insertモードで仮想編集を有効にする。
		all    全てのモードで仮想編集を有効にする。

		visualbell	初期値：オフ

		エラー音の代わりに画面フラッシュを使う。ビープ音に、実際は音でなくビジュアルベル(画面フラッシ
		ュ) を使う。


		warn	初期値：オン

		警告メッセージの表示設定。バッファが変更される間にシェルコマンドが使われたら、警告メッセージを
		表示する。


		weirdinvert	初期値：オフ

		標準出力で上書きしない。後方互換性のために残されている。termcap オプション 't_xs' と同じ効果を
		持つ。


		whichwrap	初期値：Vim : "b,s", Vi : ""

		カーソルを行頭、行末で止まらないようにする。

		フラグ キー          モード
		b      &lt;BS&gt;    NormalとVisual
		s      &lt;Space&gt; NormalとVisual
		h      "h"           NormalとVisual
		l      "l"           NormalとVisual
		&lt;   &lt;Left&gt;  NormalとVisual
		&gt;   &lt;Right&gt; NormalとVisual
		~      "~"           Normal
		[      &lt;Left&gt;  InsertとReplace
		]      &lt;Right&gt; InsertとReplace

		wildchar	初期値：Vim : &lt;Tab&gt;, Vi : CTRL-E

		ワイルドカード展開に使用する文字。オプション 'wildmode' で指定したようにワイルドカードを展開す
		るために打ち込まなければならない文字。


		wildcharm	初期値：none (0)

		マクロでも使えるワイルドカード展開に使用する文字。


		wildignore	初期値：""

		ファイル/ディレクトリ保管で無視されるファイルパターン。ファイルパターンのリスト。パターンのど
		れかにマッチしたファイルは、ファイル／ディレクトリ名の補完時に無視される。


		wildmenu	初期値：オフ

		補完候補を表示する。コマンドライン補完が拡張モードで行われる。オプション'wildchar' で指定され
		たキー (普通 <tab>) を打ち込むと補完を開始し、コマンドラインのすぐ上に可能性のあるマッチが表示
		され、最初のマッチが強調表示される。


		wildmode	初期値：Vim : "full"

		補完動作の設定。オプション 'wildchar' で指定されたキーで開始する補完モード。

		設定値       意味
					 最初のマッチのみを補完する。
		full         次のマッチを完全に補完する。最後のマッチの次には元の文字列が使われ、その次は再び
					 最初のマッチが補完される。
		longest      共通する最長の文字列までが補完される。それ以上長い文字列を補完できないときは、次
					 の候補に移る。
		longest:full "longest" と似ているが、'wildmenu' が有効ならばそれを開始する。
		list         複数のマッチがあるときは、全てのマッチを羅列する。
		list:full    複数のマッチがあるときは、全てのマッチを羅列し、最初のマッチを補完する。
		list:longest 複数のマッチがあるときは、全てのマッチを羅列し、共通する最長の文字列までが補完さ
					 れる。

		winaltkeys	初期値："menu"

		ALTキーの動作設定。メニューの選択に使うALTキーをマッピングで使えるようにする。

		値   意味
			 ALTキーをメニューに使わない。ALTキーを使った組み合わせはマッピングに使えるが、自動的にメ
		no   ニューの操作に使われることはない。このときメニューの操作は、コマンド |:simalt| で可能であ
			 る。
		yes  ALTキーの扱いはウィンドウシステムに任される。ALTキーとのキーの組み合わせは、マッピングに
			 は使えない。
		menu メニューのショートカットキーになっている文字と組み合わせてALTキーを使うとウィンドウシステ
			 ムが扱うが、他のキーはマッピングに使える。

		winheight	初期値：1

		カレントウィンドウの行数の最小値。カレントウィンドウの行数が指定したものより少ないときは、他の
		ウィンドウの行数を減らしてそれを増やす。


		winminheight	初期値：1

		カレントウィンドウではないウィンドウの高さの最小値。 0 に設定すると、ウィンドウは必要に応じて
		高さゼロに「潰される」 (つまり、ステータス行のみになる)。ウィンドウがアクティブになると、高さ
		は最低 1行にはなる (カーソルの居場所が必要なため)。


		winminwidth	初期値：1

		カレントウィンドウではないウィンドウの幅の最小値。 0 に設定すると、ウィンドウは必要に応じて幅
		ゼロに「潰される」 (つまり、垂直分割の区切りのみになる)。ウィンドウがアクティブになると、幅は
		最低1 列にはなる (カーソルの居場所が必要なため)。


		winwidth	初期値：20

		カレントウィンドウの列数の最小値。カレントウィンドウの列数が指定したものより少ないときは、他の
		ウィンドウの列数を減らしてそれを増やす。


		wrap	初期値：オン

		ウィンドウの幅を超える行の折り返し設定。ウィンドウの幅より長い行は折り返され、次の行に続けて表
		示される。オフのときは、折り返しは行われず、長い行は一部のみが表示される。


		wrapmargin	初期値：0

		行の折り返しをするマージン。ウィンドウの右端からこの文字数だけ離れたところで折り返しが始まる。
		この境界を超えてテキストを入力すると、 <eol> が挿入され、挿入は次行に続く。


		wrapscan	初期値：オン

		検索をファイルの末尾まで検索したら、ファイルの先頭へループする。


		write	初期値：オン

		ファイルの書き込みを有効にする。オフのときは、書き込みができない。


		writeany	初期値：オフ

		書込み保護の無視。いかなるファイルも "!" なしに書き込みができる。


		writebackup	初期値：オフ、+writebackupでコンパイルされたらオンファイルの上書きの前にバックアップを作る。


		writedelay	初期値：0 画面に表示するディレイ時間。打ち込まれた文字が画面に送られるまでの遅延時間を、1万分の1秒単位で指定する。これはデバッグ用のオプションである。


vi
	VI■初期化ファイル.exrcの書き方
		次に、viの起動時に環境設定用として読み込まれる.exrcというファイルを紹介します。これは、次のようなviの動作環境を設定するためのファイルで、通常はユーザーのホームディレクトリに置かれます。
			* タブ幅をカーソル何個分にするか(tabstop)
			* 行番号を表示するか(number)
			* 先頭にタブをつけた行で改行した場合、次行のカーソル位置をタブをつけた位置にするかどうか(autoindent)
			* 文字列挿入モードの表示を行なうか(showmode)
			* 括弧を閉じた時に、これと対になる頭の括弧にカーソルを飛ばすか(showmatch)
	
			showmatchは、ネストが深いルーチンで括弧が確実に閉じられているかどうかを確認することができるので、通常の文書作成時よりもC言語等でプログラムを作成する際に便利です。
		次に私の使っている.exrcの例を示します。
			set tabstop=2
			set showmode
			set autoindent
			set nonumber 
			set showmatch
		例えば、showmode、autoindentをOFFにしたい場合は次のようにします。要はnoをつければいいだけです。ただ、defaultでOFFの設定の場合は、そのエントリを外せば良いです。
			set tabstop=2
			set noshowmode
			set noautoindent
			set nonumber 
			set showmatch
	Vi機能別主要コマンドリファレンス
	起動
	
	% vi
	
		フォアグラウンド起動
	
	% vi <ファイル名>
	
		<ファイル名>のファイルを読み込んで起動
	終了
	
	:q
	
		終了
	
	:wq
	
		保存して終了
	
	:q!
	
		保存せずに強制終了
	
	ZZ
	
		終了（内容が変更された場合は保存して終了）
	モード移行
	
	ESC
	
		コマンドモードへ移行
	
	i
	
		カーソルの左隣へ挿入
	
	a
	
		カーソルの右隣へ挿入
	
	I
	
		カーソル行の先頭に挿入
	
	A
	
		カーソル行の末尾に挿入
	
	O
	
		カーソル行の上に1行空けて挿入
	
	o
	
		カーソル行の下に1行空けて挿入
	カーソル操作
	
	h
	
		1文字左へ
	
	j
	
		1行下へ
	
	k
	
		1行上へ
	
	l
	
		1文字右へ
	
	0
	
		カーソル行の左端へ
	
	^
	
		行頭（行頭が空白の場合は空白部分の右）へ
	
	$
	
		行末へ
	
	-
	
		1行上の左端へ
	
	RETURN
	
		1行下の左端へ
	
	b
	
		左隣の単語の先頭へ
	
	w
	
		右隣の単語の先頭へ
	
	e
	
		単語の末尾へ
	カーソル位置が単語の途中の場合はその単語の末尾
	カーソルが単語末尾なら次の単語の末尾
	カーソルが行末なら次行先頭の単語の末尾
	
	H
	
		画面最上行の左端へ
	
	M
	
		画面中央行の左端へ
	
	L
	
		画面最下行の左端へ
	
	nG
	
		ファイルの先頭からn行目の左端へ
	画面操作
	
	C-f
	
		1ページ分下に画面を移動
	
	C-b
	
		1ページ分上に画面を移動
	
	C-d
	
		半ページ分下に画面を移動
	
	C-u
	
		半ページ分上に画面を移動
	
	C-l
	
		画面を再描画
	
	C-g
	
		行番号を表示
	検索
	
	/<文字列>
	
		<文字列>を順方向に検索
	
	f<文字>
	
		<文字>を順方向に検索
	
	?<文字列>
	
		<文字列>を逆方向に検索
	
	F<文字>
	
		<文字>を逆方向に検索
	
	n
	
		順方向に検索を再実行
	
	N
	
		逆方向に検索を再実行
	削除
	
	x
	
		カーソル上一文字削除
	
	X
	
		カーソル左一文字削除
	
	dd
	
		カーソル行削除
	
	dw
	
		カーソル位置から現単語末尾まで削除
	
	df<文字>
	
		カーソル位置から<文字>の位置まで削除
	
	d^
	
		カーソル位置から左削除
	
	d$
	
		カーソル位置から右削除
	置換
	
	r
	
		カーソル上一文字置換
	
	R
	
		カーソル位置から複数文字置換
	
	s
	
		カーソル上一文字を複数文字に置換
	
	r
	
		カーソル行全体を置換
	
	cc
	
		カーソル行全体を置換
	
	cw
	
		カーソル位置から現単語置換
	
	cf<文字>
	
		カーソル位置から<文字>の位置まで置換
	貼付け
	
	yw
	
		カーソル位置の単語をコピー
	
	yy
	
		カーソル行をコピー
	
	P
	
		カーソル行の上にペースト（xやddで削除したものもペーストできる）
	
	p
	
		カーソル行の下にペースト（xやddで削除したものもペーストできる）
	ファイル操作
	
	:e <ファイル名>
	
		<ファイル名>を読込む
	
	:r <ファイル名>
	
		カーソル行の下に<ファイル名>の内容を挿入
	
	:w
	
		上書保存
	
	:w <ファイル名>
	
		編集中のデータを<ファイル名>のファイルに保存
	その他
	
	 .
	
		直前のコマンド繰返し
	
	u
	
		直前に実行したコマンドの取り消し
	
	U
	
		カーソル行に対して行った変更を全部取消す
	
	:!cmd
	
		シェルコマンドの実行
	
	!!cmd
	
		コマンドを実行し，その結果を挿入
	
	:shell
	
		シェルを呼び出す。exitなどでシェルを抜ければviに戻る
	
	:set number
	
		行番号を表示
	
	:set nonumber
	
		行番号表示を止める
	
	:h
	
		ヘルプ表示
	
	:viusage [<コマンド>]
	
		viコマンドモードのコマンド一覧表示。<コマンド>を付加するとそのコマンドの説明を表示。
	
	:exusage [<コマンド>]
	
		exコマンドモードのコマンド一覧表示。<コマンド>を付加するとそのコマンドの説明を表示。
	
	
	
	
	
	
	1liner
		文字列の置換には、sub、sub!、gsub、gsub!メソッドを使う
			string#sub(置換前パターン,置換後文字列)
				* subは最初のパターンだけを置換。gsubは全てのパターンを置換する。
				* !をつけると、元のインスタンスの内容を変更する。
			ruby -e 'puts File.read("in.txt").gsub(/foo/,"bar")' > out.txt
		
		
よく使うコマンド†
			   h           ←
			   j           ↓
			   k           ↑
			   l           →
			   <C-f>       PageDown
			   <C-b>       PageUp
	カーソル移 gg          ファイルの先頭へ移動
	動         G           ファイルの末尾へ移動
			   ^           行頭へ移動
			   $           行末へ移動
			   H           画面上の１行目へ移動（2Hで２行目へ）
			   M           画面中央行へ移動
			   L           画面上の最下行へ移動（2Lで下から２行目へ）
			   %           対応する括弧へ移動
			   z<enter>    現在のカーソルがページのトップになる
			   x           文字削除
			   dd          行削除
			   D           カーソル位置から行末まで削除
			   J           次の行と連結する（カレント行の改行等削除）
			   ~           カーソル位置の文字の大文字/小文字を切換える (a -> A and A -> a)
			   <C-a>       カーソル位置の数字を１つ増やす(0x100という形なら16進数と見なし
	編集                   てくれる)
			   <C-x>       カーソル位置の数字を１つ減らす
			   >           カーソル位置の行をインデントする
			   <           カーソル位置の行を逆インデントする
						   インデントの体裁を整える。
			   gg=G        ファイルの先頭に移動し(gg)、= によるインデントの修正をG(ファイ
						   ルの末尾)まで行う。
	UNDO       u           UNDO
			   <C-r>       REDO
			   /keyword    keywordを検索する
	検索       n           次のkeywordに移動する
			   N           前のkeywordに移動する
			   :%s/from/to 全行に対してfromをtoに置換する。（gをつけると行中で複数マッチす
	置換       /[g]        る。）
			   :n1,n2s/    n1行目からn2行目の範囲に対してfromをtoに置換する。（nに . を指
			   from/to/[g] 定するとカレント行、$ は最終行の意味になる）
			   qx          レジスタxへコマンドの記録を開始する。（レジスタに利用出来るのは
						   a-z の26文字）
			   qX          レジスタxへコマンドの追記を開始する。（通常レジスタは小文字を使
	レジスタを             うが、大文字への記録は追記になる）
	使う       q（記録中に 記録を終了する。
			   ）
			   @x          レジスタxに記録されたコマンドを再生する。
			   @@          最後に実行したレジスタを再生する。
			   v           カーソルで範囲選択が出来るようになる（y や d で yank や切り取り
						   が出来る）
			   V           行選択モード
						   ボックス選択モード
	ビジュアル
	モード     <C-v>       以下のような３行を行末まで選択するには $ する。
						   ****
						   *******
						   **
			   gv          最後の選択範囲を選択しなおす（間違えてESC押したりして選択範囲が
						   クリアされてしまった時などに使う）
			   :sp         画面を水平に分割する
			   :vsp        画面を垂直に分割する
			   <C-w><C-w>  分割したウィンドウ間を順番に移動する。
			   <C-w>       分割したウィンドウ間を{上,下,左,右}に移動する
			   {h,j,k,l}
			   <C-w>       カーソルのあるウィンドウ位置を一番{上,下,左,右}に移動する
	画面分割   {H,J,K,L}
			   :q          ウィンドウを閉じる。
			   :qall       すべてのウィンドウを閉じて終了する
			   :only       カーソルのあるウィンドウ以外を全部閉じる。
			   <C-w>+      ウィンドウサイズを増やす。
			   <C-w>-      ウィンドウサイズを減らす。
			   <C-w>o      今のウィンドウ以外を閉じる
			   :q[!]       閉じる（保存しないで編集を破棄してでも閉じる）
	ファイル   :w[!]       保存（読み込み専用ファイルでも保存する）
			   ZZ          保存して閉じる
			   :new|edit   fileを開く
			   file
	複数ファイ :ls         バッファ一覧表示
	ル         :bp         前のバッファ
			   :bn         次のバッファ
			   :bd         バッファを消す
	ディレクト :cd path    カレントディレクトリを path に移動する。
	リ移動     :cd %:h     カレントディレクトリを現在編集中のファイルのあるパスへ移動する
						   。
			   :!cmd       cmdを実行してステータスラインの下へ結果を表示(編集中のバッファ
						   には影響しない)
	システムコ :範囲指定!  選択範囲のバッファをcmdの標準入力に流し込み、代わりにcmdの出力
	マンド     cmd         で置換する。
						   例えば :%!sort を実行すればバッファ全行がsortされる。
			   :r!cmd      cmdを実行して標準出力をカーソル位置へ挿入
			   ga          カーソル位置の文字コードの値を調べる。
	その他     :ascii
			   :!cmd       外部プログラムを実行する

#苗字がよくつかうコマンド
	vim -S Session.vim +VE   <---> after closing VE window by "qa", do ":mks[ession]"
	vim -S ~/Session.vim +VE +tabnew +BookmarksPage

	:helptags ++t ~/.vim/doc
	:helptags ++t $VIMRUNTIME/doc
	|CTRL-^|   N   CTRL-^		Edit alternate file N (equivalent to ":e #N").
	|gf|	       gf  or ]f	Edit the file whose name is under the cursor
	|:dig|	   :dig[raphs]		show current list of digraphs
	/////vim
	whereis vim --->  /usr/bin/vim /usr/bin/vim.basic /etc/vim /usr/share/vim /usr/share/man/man1/vim.1.gz
	/usr/share/vim/vim71/plugin

	#keymapping
		F9		(vimrc-customized) reload .vimrc

		C+]	:	rcodetool+fri help 
		\r	:	rcodetool+fri fuzzy help showing andidate
		C-XC-O : omni-completion by vim-ruby (app+gem I/F)
		C-xC-u : user-defined-omini-completion by rcodetool
		F7F8F12:	xmpfilter	

	改行をなくして連結する(各行末に空白なし） g shift + j
	マクロ（記録開始）:qa　aは任意のアルファベット
	マクロ（記録終了）:q
	マクロ（実行）:@a aは記録したマクロのキー
	畳み込み　set fdm=marker
	R		いまのファイルを更新表示（よみなおし）
	zA		toggle curent open/close of folding
	zM		Close all folds: set 'foldlevel' to 0. 'foldenable' will be set.
	zR		Open all folds.  This sets 'foldlevel' to highest fold level.
		 開く. 大文字だと中も再起的に. zo, zO
		 たたむ. 大文字だと外まで再起的に.# zc, zC - close,
		 foldの作成.zf
		 全体的に１段開く(foldlevel+=1). zr
		 全体的に１段閉じる(foldlevel-=1).zm
		そもそもインデントが崩れないようにコピペする:a

		改行をなくして連結する(各行末に空白あり）　shift + j
		コメントアウト（※繰り返すと消えます！ので、注意が必要です）\x
		コメントアウト（確実）　CTRL+Vで矩形選択後SHIFT+i // + ESC これで、ちょっとだけ待つと、矩形全体にコメントが入ります。
		インデント >とか、<
		コピペ対策自動インデント =

	名前つきバッファ("+大文字+ビジュアル選択)と履歴バッファ(:di)の活用
		MacやWindowsの操作を知っている人ならば,"a"から"z"までの26種類の名前のついた「クリップボード」があって,それぞれ自由にコピー,追加コピー,カット, ペーストなどの操作ができるようなものと思えば分かりやすいと思います

		たとえば,現在カーソルがある行全体を名前付きバッファ"a"に覚えておくようにしたいのであれば
		"ayy
		" (バッファ名)(コマンド)

		という形式で…つまり行単位のYankコマンドである yy コマンドの直前に「二重引用符とアルファベット小文字をひとつ」打つようにすると,いつもの yy と違って Yank内容を指定した名前の場所(バッファ)に格納 します

		(コマンド)部分では実際は 「Yank」,「削除」,「変更コマンド」のいずれかを打ちます
			* Yankコマンドならば Yankした領域
			* 削除コマンドならば 削除した領域
			* 変更コマンドならば 変更によって削除された領域

		いくつか例を書きます
		"gdw カーソル位置からカーソルのある単語の末尾までを削除しますその時に実際に削除された文字列は,名前つきバッファ g に入ります
		"by5H 「画面に表示されている上から5行目」からカーソル位置までの領域を, 名前つきバッファ b に入れます
		"ap とすれば,(この例なら) 名前つきバッファ a の内容をカーソル位置の後ろに書き出す ことになります. 通常のPutコマンドと同様に,格納する時に 行単位で入れたのであれば次の行に書き出されるし,文字単位で格納したのであればカーソル文字のすぐ後ろ に書き出されます
		"Ay$ とすれば,行末までのテキストは,今まで"a"に入っていた内容に追加されます
			追加するつもりで間違えて小文字で打ってしまったら,戻せないので気を付けて操作しましょう
		:di または :dis または :display と打つと, 現在使われている バッファの一覧表示 をします
			まず, % には現在の編集対象ファイル名が入っています
			. (ピリオドです)には 最も最近挿入した文字列が入っています. 挿入モード中で CTRL-A や CTRL-@ キーを押した時に書き出される文字列です
			また, : (コロン)には 最も最近打ったコマンド文字列が入っています
			:di コマンドでも表示はされませんが - には「最も最近に一行以内の範囲を 削除した内容」が入ってます. 他にも,マニュアルにも書いてないバッファがあるみたいです
		"3p なら 3番目の履歴内容が書き出されるといった具合に使えます

		また,すでに挿入モードにいる時であれば 挿入モードのまま CTRL-R を押してからバッファ名の文字を押した瞬間に 内容がカーソル位置に書き出されます
		例えば 挿入中に CTRL-R a などという操作で 名前aの内容を書き出すことができます

		普段, 名前をつけないで削除,Yank,変更コマンドを使っている時には 文字列はどこに記録されているのかというと… " という名前(二重引用符一個だけの名前です)で記録されています. これはいわゆる「一時バッファ」の名前 というわけです. よって, 普段 名前を指定せずに使っている p や P コマンドは ""p とか ""P と打つのと全く同じで, 普段打っているコマンドはこれの省略形 のようなものだということです. そしてこの内容は削除やYankや変更コマンドを実行するたびに 内容が書きかわります

	CTRL-Z または :suspend --> {任意のシェルコマンドを実行}a --> fgでresume
	1. Introduction						*tab-page-intro*

		A tab page holds one or more windows.  You can easily switch between tab
		pages, so that you have several collections of windows to work on different
		things.

		Usually you will see a list of labels at the top of the Vim window, one for
		each tab page.  With the mouse you can click on the label to jump to that tab
		page.  There are other ways to move between tab pages, see below.

		Most commands work only in the current tab page.  That includes the |CTRL-W|
		commands, |:windo|, |:all| and |:ball| (when not using the |:tab| modifier).
		The commands that are aware of other tab pages than the current one are
		mentioned below.

		Tabs are also a nice way to edit a buffer temporarily without changing the
		current window layout.  Open a new tab page, do whatever you want to do and
		close the tab page.

		==============================================================================
		2. Commands						*tab-page-commands*

		OPENING A NEW TAB PAGE:

		When starting Vim "vim -p filename ..." opens each file argument in a separate
		tab page (up to 'tabpagemax'). |-p|

		A double click with the mouse in the non-GUI tab pages line opens a new, empty
		tab page.  It is placed left of the position of the click.  The first click
		may select another tab page first, causing an extra screen update.

		This also works in a few GUI versions, esp. Win32 and Motif.  But only when
		clicking right of the labels.

		In the GUI tab pages line you can use the right mouse button to open menu.
		|tabline-menu|.

		:tabe[dit]				*:tabe* *:tabedit* *:tabnew*
		:tabnew		Open a new tab page with an empty window, after the current
				tab page.

		:tabe[dit] [++opt] [+cmd] {file}
		:tabnew [++opt] [+cmd] {file}
				Open a new tab page and edit {file}, like with |:edit|.

		:tabf[ind] [++opt] [+cmd] {file}			*:tabf* *:tabfind*
				Open a new tab page and edit {file} in 'path', like with
				|:find|.
				{not available when the |+file_in_path| feature was disabled
				at compile time}

		:[count]tab {cmd}					*:tab*
				Execute {cmd} and when it opens a new window open a new tab
				page instead.  Doesn't work for |:diffsplit|, |:diffpatch|,
				|:execute| and |:normal|.
				When [count] is omitted the tab page appears after the current
				one.  When [count] is specified the new tab page comes after
				tab page [count].  Use ":0tab cmd" to get the new tab page as
				the first one.  Examples: >
					:tab split	" opens current buffer in new tab page
					:tab help gt	" opens tab page with help for "gt"

		CTRL-W gf	Open a new tab page and edit the file name under the cursor.
				See |CTRL-W_gf|.

		CTRL-W gF	Open a new tab page and edit the file name under the cursor
				and jump to the line number following the file name.
				See |CTRL-W_gF|.

		CLOSING A TAB PAGE:

		Closing the last window of a tab page closes the tab page too, unless there is
		only one tab page.

		Using the mouse: If the tab page line is displayed you can click in the "X" at
		the top right to close the current tab page.  A custom |'tabline'| may show
		something else.

									*:tabc* *:tabclose*
		:tabc[lose][!]	Close current tab page.
				This command fails when:
				- There is only one tab page on the screen.		*E784*
				- When 'hidden' is not set, [!] is not used, a buffer has
				  changes, and there is no other window on this buffer.
				Changes to the buffer are not written and won't get lost, so
				this is a "safe" command.

		:tabc[lose][!] {count}
				Close tab page {count}.  Fails in the same way as ':tabclose"
				above.

									*:tabo* *:tabonly*
		:tabo[nly][!]	Close all other tab pages.
				When the 'hidden' option is set, all buffers in closed windows
				become hidden.
				When 'hidden' is not set, and the 'autowrite' option is set,
				modified buffers are written.  Otherwise, windows that have
				buffers that are modified are not removed, unless the [!] is
				given, then they become hidden.  But modified buffers are
				never abandoned, so changes cannot get lost.


		SWITCHING TO ANOTHER TAB PAGE:

		Using the mouse: If the tab page line is displayed you can click in a tab page
		label to switch to that tab page.  Click where there is no label to go to the
		next tab page.  |'tabline'|

		:tabn[ext]				*:tabn* *:tabnext* *gt*
		<C-PageDown>				*CTRL-<PageDown>* *<C-PageDown>*
		gt					*i_CTRL-<PageDown>* *i_<C-PageDown>*
				Go to the next tab page.  Wraps around from the last to the
				first one.

		:tabn[ext] {count}
		{count}<C-PageDown>
		{count}gt	Go to tab page {count}.  The first tab page has number one.


		:tabp[revious]				*:tabp* *:tabprevious* *gT* *:tabN*
		:tabN[ext]				*:tabNext* *CTRL-<PageUp>*
		<C-PageUp>			 *<C-PageUp>* *i_CTRL-<PageUp>* *i_<C-PageUp>*
		gT		Go to the previous tab page.  Wraps around from the first one
				to the last one.

		:tabp[revious] {count}
		:tabN[ext] {count}
		{count}<C-PageUp>
		{count}gT	Go {count} tab pages back.  Wraps around from the first one
				to the last one.

		:tabr[ewind]			*:tabfir* *:tabfirst* *:tabr* *:tabrewind*
		:tabfir[st]	Go to the first tab page.

									*:tabl* *:tablast*
		:tabl[ast]	Go to the last tab page.


		Other commands:
									*:tabs*
		:tabs		List the tab pages and the windows they contain.
				Shows a ">" for the current window.
				Shows a "+" for modified buffers.


		REORDERING TAB PAGES:

		:tabm[ove] [N]						*:tabm* *:tabmove*
				Move the current tab page to after tab page N.  Use zero to
				make the current tab page the first one.  Without N the tab
				page is made the last one.


		LOOPING OVER TAB PAGES:

									*:tabd* *:tabdo*
		:tabd[o] {cmd}	Execute {cmd} in each tab page.
				It works like doing this: >
					:tabfirst
					:{cmd}
					:tabnext
					:{cmd}
					etc.
		<		This only operates in the current window of each tab page.
				When an error is detected on one tab page, further tab pages
				will not be visited.
				The last tab page (or where an error occurred) becomes the
				current tab page.
				{cmd} can contain '|' to concatenate several commands.
				{cmd} must not open or close tab pages or reorder them.
				{not in Vi} {not available when compiled without the
				|+listcmds| feature}
				Also see |:windo|, |:argdo| and |:bufdo|.

		=	
	gHL	:全角半角スイッチ
	:tabm[ove] [N]						*:tabm* *:tabmove*

ウィンドウの分割
	関係のない２つの違ったファイルを表示したい。１つのファイルの２個所を同時に
	見たい。２つのファイルを横に並べて差分を見てみたい。
	ウィンドウ分割を使えばどれもできてしまいます。

	|08.1| ウィンドウの分割
	|08.2| ウィンドウを分割してファイルを開く
	|08.3| ウィンドウのサイズ
	|08.4| 縦分割
	|08.5| ウィンドウの移動
	|08.6| 全ウィンドウに対するコマンド
	|08.7| vimdiff で差分を表示する
	|08.8| その他
	|08.9| タブページ

	次章: |usr_09.txt| GUI を使う
	前章: |usr_07.txt| 複数のファイルを開く
	目次: |usr_toc.txt|

	==============================================================================
	*08.1* ウィンドウの分割

	新しいウィンドウを開く一番簡単なコマンドはこれです。

	:split

	画面が２つのウィンドウに分割されます。カーソルは上側のウィンドウに置かれます。

	+----------------------------------+
	|/* file one.c */ |
	|~ |
	|~ |
	|one.c=============================|
	|/* file one.c */ |
	|~ |
	|one.c=============================|
	| |
	+----------------------------------+

	二つのウィンドウに同じファイルが表示されています。"====" のラインはステータス
	行です。各ウィンドウの一番下にあってそのウィンドウの情報を表示します。(実際に
	はステータス行は反転表示になります)
	各ウィンドウには同じファイルの違う場所を表示できます。例えば、上側のウィンド
	ウにはプログラムの変数宣言部を表示し、下の方にはその変数を使っている箇所を
	表示させる、といったことができます。

	CTRL-W w コマンドでウィンドウ間をジャンプできます。上側のウィンドウにカーソル
	がある時に CTRL-W w を押すとその下のウィンドウにジャンプします。一番下のウィン
	ドウにカーソルがある時は一番上のウィンドウに戻ります。(CTRL-W CTRL-W も同じ動
	作をするので、CTRL キーを離すのがちょっと遅れても大丈夫です)


	ウィンドウを閉じる
	------------------

	ウィンドウを閉じるのは次のコマンドです。

	:close

	":quit" や "ZZ" のようなファイルを閉じるコマンドでもウィンドウを閉じることがで
	きますが、":close" を使えば、最後のウィンドウを閉じて Vim を終了してしまうよう
	な間違いを防げます。


	他ウィンドウを全部閉じる
	------------------------

	ウィンドウをたくさん開いたときに、どれか一つのウィンドウに集中したいと思った場
	合は、次のコマンドが便利です。

	:only

	カーソルのあるウィンドウを残して全てのウィンドウが閉じます。他のウィンドウに保
	存されていない変更がある場合には、エラーメッセージが表示され、そのウィンドウは
	閉じません。

	==============================================================================
	*08.2* ウィンドウを分割してファイルを開く

	次のコマンドを実行すると、２つ目のウィンドウが開き、指定されたファイルの編集が
	開始されます。

	:split two.c

	例えば、one.c を編集していたなら、結果は次のようになります。

	+----------------------------------+
	|/* file two.c */ |
	|~ |
	|~ |
	|two.c=============================|
	|/* file one.c */ |
	|~ |
	|one.c=============================|
	| |
	+----------------------------------+

	新しいウィンドウに新規ファイルを開くには、次のコマンドを使います。

	:new

	":split" や ":new" コマンドを使って好きなだけウィンドウを作成できます。

	==============================================================================
	*08.3* ウィンドウのサイズ

	":split" コマンドは数値を引数として取れます。その値は新しいウィンドウの高さと
	なります。例えば、次のコマンドは３行分の高さのウィンドウを作成し、alpha.c を開
	きます。

	:3split alpha.c

	ウィンドウのサイズを変更する方法はいくつかあります。マウスが使えれば話は簡単で
	す。ウィンドウを分割しているステータス行にマウスを動かし、上下にドラッグしてく
	ださい。

	ウィンドウを大きくするには次のようにします:

	CTRL-W +

	小さくするには次のようにします:

	CTRL-W -

	どちらのコマンドも数値を引数として取り、その行数分、ウィンドウサイズを増減しま
	す。つまり、"4 CTRL-W +" ならウィンドウが４行分大きくなります。

	ウィンドウの高さを明示的に指定するには次のコマンドを使います:

	{height}CTRL-W _

	{height} に数値を指定し、CTRL-W と _ (アンダースコア) を入力します。
	ウィンドウを最大まで大きくするには、CTRL-W _ コマンドを数値指定なしで実行して
	ください。


	マウスを使う

	Vim では様々なことをキーボードから極めて素早く操作できますが、残念ながら、ウィ
	ンドウサイズを変更するのは少し面倒です。この場合、マウスを使う方が簡単です。マ
	ウスポインタをステータス行に合せてから左ボタンを押してドラッグしてください。ス
	テータス行が動き、片方のウィンドウが大きくなり、もう片方は小さくなります。


	オプション

	'winheight' オプションにはウィンドウの最小の高さ (それ以上は小さくならない) の
	希望値を、'winminheight' には最小の高さの強制値を設定できます。
	同様に、'winwidth' オプションにはウィンドウの最小の幅の希望値を、'winminwidth'
	には最小の幅の強制値を設定できます。
	'equalalways' オプションが設定されていると、ウィンドウを閉じたり開いたりするた
	びに、全てのウィンドウのサイズが同じになります。

	==============================================================================
	*08.4* 縦分割

	":split" コマンドは現在のウィンドウの上側に新しいウィンドウを作ります。ウィン
	ドウを左側に作るには、次のコマンドを使います:

	:vsplit

	あるいは、
	:vsplit two.c

	実行後は次のようになります。

	+--------------------------------------+
	|/* file two.c */ |/* file one.c */ |
	|~ |~ |
	|~ |~ |
	|~ |~ |
	|two.c===============one.c=============|
	| |
	+--------------------------------------+

	中央の縦棒 (|) は実際には反転表示されます。これは縦セパレータと呼ばれ、これに
	よって左右のウィンドウが区切られます。

	ウィンドウを縦分割して新しい空ファイルを作成する ":vnew" コマンドもあります。
	次のコマンドでも同じことができます:

	:vertical new

	":vertical" コマンドは、ウィンドウを分割する他のコマンドにも適用できます。これ
	を指定すると、ウィンドウは横ではなく、縦に分割されるようになります。(ウィンド
	ウを分割しないコマンドの場合は何も変わりません）


	他のウィンドウへの移動

	横でも縦でも好きなようにウィンドウを分割できるので、自在にウィンドウを配置でき
	ます。他のウィンドウへ移動するには次のコマンドを使います。

	CTRL-W h 左側のウィンドウに移動
	CTRL-W j 下側のウィンドウに移動
	CTRL-W k 上側のウィンドウに移動
	CTRL-W l 右側のウィンドウに移動

	CTRL-W t 一番上のウィンドウに移動
	CTRL-W b 一番下のウィンドウに移動

	カーソル移動と同じ文字を使っていることに注目してください。もちろん、矢印キーも
	使うことができます。
	他のウィンドウへ移動するためのコマンドは他にもあります: |Q_wi|

	==============================================================================
	*08.5* ウィンドウの移動

	ウィンドウを分割したが、配置が好ましくなかった場合、ウィンドウをどこか別の場所
	に動かしたいと思うしょう。例えば、次のように三つのウィンドウがあるとします:

	+----------------------------------+
	|/* file two.c */ |
	|~ |
	|~ |
	|two.c=============================|
	|/* file three.c */ |
	|~ |
	|~ |
	|three.c===========================|
	|/* file one.c */ |
	|~ |
	|one.c=============================|
	| |
	+----------------------------------+

	明らかに一番下のウィンドウが一番上にくるべきです。一番下のウィンドウに移動して
	(CTRL-W w を使用)、次のコマンドを入力してください:

	CTRL-W K

	ここでは大文字の K を使います。これを実行すると、ウィンドウが一番上に移動しま
	す。上への移動に K が使われていることに注目してください。
	縦分割しているときに CTRL-W K を使うと、ウィンドウが一番上に移動し、Vim ウィン
	ドウと同じ幅になります。例えば、次のようなレイアウトになっているとします。

	+-------------------------------------------+
	|/* two.c */ |/* three.c */ |/* one.c */ |
	|~ |~ |~ |
	|~ |~ |~ |
	|~ |~ |~ |
	|~ |~ |~ |
	|~ |~ |~ |
	|two.c=========three.c=========one.c========|
	| |
	+-------------------------------------------+

	中央のウィンドウ (three.c) で CTRL-W K を実行すると、次のような結果になります:

	+-------------------------------------------+
	|/* three.c */ |
	|~ |
	|~ |
	|three.c====================================|
	|/* two.c */ |/* one.c */ |
	|~ |~ |
	|two.c==================one.c===============|
	| |
	+-------------------------------------------+

	他に同じようなコマンドが三つあります。(説明する必要はありませんね)

	CTRL-W H ウィンドウを左端に移動
	CTRL-W J ウィンドウを下端に移動
	CTRL-W L ウィンドウを右端に移動

	==============================================================================
	*08.6* 全ウィンドウを対象とするコマンド

	Vim を終了しようと思ったときに、複数のウィンドウが開いていた場合、ウィンドウを
	一つずつ閉じていけば Vim を終了できますが、次のコマンドを使えばもっと速く終了
	できます。:

	:qall

	これは "quit all" (すべて閉じる) という意味です。まだ保存していないファイルが
	ある場合は、Vim は終了しません。保存していないファイルを表示しているウィンドウ
	にカーソルが自動的に移動するので、":write" で保存するか ":quit!" で変更を破棄
	するかしてください。

	未保存のファイルを全て保存するには、次のコマンドを使ってください:

	:wall

	これは "write all" (すべて保存) という意味です。とはいっても、実際に保存される
	のは変更のあったファイルだけです。変更していないファイルを上書きしても意味がな
	いことを Vim はわかってますから。
	":qall" と ":wall" を組み合わせた "write and quit all" (すべて保存して終了) コ
	マンドもあります:

	:wqall

	このコマンドは、変更されたファイルをすべて保存して Vim を終了します。
	最後に、次のコマンドは、すべての変更を破棄して Vim を終了するコマンドです:

	:qall!

	このコマンドはアンドゥできないので、使う時には慎重に！


	引数で指定したすべてのファイルをウィンドウで開く

	それぞれのファイルごとにウィンドウを開くには、起動パラメタに "-o" を指定します。

	vim -o one.txt two.txt three.txt

	結果はこうなります。

	+-------------------------------+
	|file one.txt |
	|~ |
	|one.txt========================|
	|file two.txt |
	|~ |
	|two.txt========================|
	|file three.txt |
	|~ |
	|three.txt======================|
	| |
	+-------------------------------+

	起動パラメタ "-O" を使えば、ウィンドウが縦分割になります。
	Vim が既に起動している場合、":all" コマンドを使うと引数リストの各ファイルごと
	にウィンドウを開くことができます。":vertical all"だと縦分割になります。

	==============================================================================
	*08.7* vimdiff で差分を表示する

	特別な方法で Vim を起動すると、二つのファイルの差分を表示することができます。
	例えば、"main.c" というファイルを開き、どこかの行に文字を挿入したとします。そ
	して、オプション 'backup' を有効にしてファイルを保存しました。バックアップファ
	イル "main.c~" には変更前のファイルが保存されています。
	シェルで (vim上ではありません) 次のコマンドを入力します:

	vimdiff main.c~ main.c

	二つのウィンドウを左右に並べた状態で Vim が起動します。画面には先ほど文字を挿
	入した行とその前後の数行が表示されています。

	VV VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a| <- 折り畳み
	| text | text |
	| text | text |
	| text | text |
	| text | changed text | <- 変更された行
	| text | text |
	| text | ------------------| <- 削除された行
	| text | text |
	| text | text |
	| text | text |
	|+ +--432 lines: text|+ +--432 lines: text| <- 折り畳み
	| ~ | ~ |
	| ~ | ~ |
	|main.c~==============main.c==============|
	| |
	+-----------------------------------------+

	(上の図は強調表示されてないので、ちゃんと見たければ、vimdiff コマンドを実行し
	てみてください)

	変更のない行は一行に折り畳まれて表示されます。これを閉じた折り畳みと呼びます。
	上の図では "<- 折り畳み" とある行がそうです。最初の折り畳みは 123 行を折り畳ん
	でいます。それらの行は両方のファイルで一致しています。
	"<- 変更された行" とある行は強調表示されていて、挿入した文字列が別の色で表示さ
	れています。強調表示されているので、どこが違うのかが一目でわかります。
	削除された行は main.c のウィンドウにあるように "---" と表示されます。上の図の、
	"<- 削除された行" とある行を見てください。実際には、そこに文字はありません。そ
	の行は、main.c を別のウィンドウと同じ行数で表示するために使われています。


	折り畳み表示列

	各ウィンドウの左側に色の違う列があります。上の図では "VV" で示されています。そ
	の列の、閉じた折り畳みのある行に、"+" 記号が表示されています。マウスポインタを
	その "+" 記号に合わせて、左ボタンをクリックしてください。折り畳みが開き、折り
	畳まれていたテキストが表示されます。
	開いた折り畳みは "-" 記号で表示されます。"-" 記号をクリックすると折り畳みは閉
	じます。
	当り前ですが、これはマウスが利用できる場合のみ機能します。キーボードの場合は
	"zo" で折り畳みを開いたり、"zc" で閉じたりできます。


	Vim の中で差分を取る

	Vim の中から差分モードを開始する方法もあります。"main.c" を開いて、ウィンドウ
	を分割し差分を表示するには、次のようにします:

	:edit main.c
	:vertical diffsplit main.c~

	":vertical" コマンドはウィンドウを縦分割するために使用します。使わなかった場合
	は横分割になります。

	パッチ、または diff ファイルがある場合は、三つめの方法で差分モードを開始できま
	す。最初に、パッチを適用するファイルを開き、次に、Vim にパッチファイルの名前を
	教えてやります:

	:edit main.c
	:vertical diffpatch main.c.diff

	警告: パッチファイルは、開いているファイル用のパッチが一つだけ含まれているもの
	でなければなりません。そうでない場合は、大量のエラーメッセージが表示されたり、
	予期せずに、他のファイルにパッチが適用されてしまう場合があります。
	パッチ処理は Vim 内部の、ファイルのコピーに対して実行されます。ハードディスク
	上のファイルは (それを上書きしない限り) 変更されません。


	同期スクロール

	ファイル間の差分がたくさんある場合、通常どおりスクロールすればそれらを表示でき
	ます。もう一方のウィンドウも同じ場所を表示するように自動的にスクロールされるの
	で、簡単に差分を並べて表示できます。
	同期スクロールを無効にするには、次のコマンドを使います:

	:set noscrollbind


	変更された場所にジャンプする

	折り畳みを無効にしている場合、変更された場所を見つけるのは簡単ではありません。
	次のコマンドを使うと、前方の変更にジャンプできます:

	]c

	逆方向にジャンプするには次のコマンドを使います:

	[c

	回数指定を使えば、さらに遠くまでジャンプできます。


	変更を取り除く

	ウィンドウからウィンドウへテキストを移動できます。これによって、差分が増えたり
	減ったりします。強調表示は自動的に更新されません。更新するには次のコマンドを使
	います:

	:diffupdate

	差分を取り除くには、強調表示された範囲のテキストをもう一方のウィンドウに移動し
	ます。上述の "main.c" と "main.c~" の例を使って説明します。左ウィンドウに移動
	して、もう一方のウィンドウでは削除されている行に移動します。そして、次のコマン
	ドを入力します:

	dp

	カレントウィンドウのテキストがもう一方のウィンドウにプットされ、変更がなくなり
	ます。"dp" は "diff put" の意味です。
	別の方法でも同じことができます。右のウィンドウに移動して、"changed" が挿入され
	た行に移動します。そして、次のコマンドを入力します:

	do

	もう一方のファイルからテキストがコピーされ、変更はなくなります。これで変更がな
	くなってしまったので、すべてのテキストが折り畳まれて表示されます。"do" は
	"diff obtain" の意味です。意味的には"dg"の方が良いのですが、それはすでに他で
	使われています ("dgg" でカーソル位置から最初の行まで削除されます)。

	差分モードの詳細は |vimdiff| をご覧ください。

	==============================================================================
	*08.8* その他

	'laststatus' オプションを使うと、最後のウィンドウにステータスラインを表示する
	かどうかを設定できます:

	0 表示しない
	1 分割ウィンドウがある時だけ表示 (初期設定)
	2 常に表示

	ほとんどの、ファイルを開くコマンドには、ウィンドウを分割するバージョンが存在し
	ます。
	Ex コマンドの場合、先頭に "s" が付いています。例えば、":tag" はタグジャンプで
	すが、":stag" はウィンドウを分割してからタグジャンプします。
	ノーマルモードコマンドの場合、CTRL-W を前置します。例えば、CTRL-^ はオルタネー
	トファイルへのジャンプですが、CTRL-W CTRL-^ はウィンドウを分割してからオルタネー
	トファイルを開きます。

	'splitbelow' オプションを設定すると、カレントウィンドウの下に新しいウィンドウ
	が作られるようになります。'splitright' オプションを設定すると、縦分割したとき
	に、カレントウィンドウの右に新しいウィンドウが作られるようになります。

	ウィンドウを分割するときに、次の修飾コマンドを使うと、ウィンドウの位置を指定で
	きます:

	:leftabove {cmd} カレントウィンドウの左、または上
	:aboveleft {cmd} 同上
	:rightbelow {cmd} カレントウィンドウの右、または下
	:belowright {cmd} 同上
	:topleft {cmd} 上、または左の端
	:botright {cmd} 下、または右の端


	==============================================================================
	*08.9* タブページ

	ウィンドウは重ねることができないので、画面がすぐにいっぱいになってしまいます。
	それを解決するために、タブページ、というものが用意されています。

	"thisfile" というファイルを開いているとしましょう。新しいタブページを作成する
	ために次のコマンドを実行します:

	:tabedit thatfile

	"thatfile" が開かれ、Vim ウィンドウ全体を占める大きさのウィンドウに表示されま
	す。そして、上部にバーが表示され、ファイル名が二つ表示されているのが確認できる
	と思います:

	+----------------------------------+
	| thisfile | /thatfile/ __________X| (thatfile は太字)
	|/* thatfile */ |
	|that |
	|that |
	|~ |
	|~ |
	|~ |
	| |
	+----------------------------------+

	これは二つのタブページがある状態です。一つ目のタブページには "thisfile" を開い
	ているウィンドウが、二つ目のタブページには "thatfile" を開いているウィンドウが
	入っています。これは、紙が二枚重なっていて、それぞれの紙にファイル名が書かれた
	ラベルが付いているようなものです。

	マウスを使って "thisfile" をクリックしてみましょう。次のようになります。

	+----------------------------------+
	| /thisfile/ | thatfile __________X| (thisfile は太字)
	|/* thisfile */ |
	|this |
	|this |
	|~ |
	|~ |
	|~ |
	| |
	+----------------------------------+

	上部のラベルをクリックすると、タブページを切替えることができます。マウスがな
	い、あるいは使いたくない場合には、"gt" コマンドでも切替えられます。"gt" は
	Goto Tab の略です。

	次のコマンドを実行し、タブページをもう一つ作成してみましょう:

	:tab split

	ウィンドウを一つもったタブページが作成され、そのウィンドウには、さっきまで開い
	ていたのと同じバッファが表示されています:

	+-------------------------------------+
	| thisfile | /thisfile/ | thatfile __X| (thisfile は太字)
	|/* thisfile */ |
	|this |
	|this |
	|~ |
	|~ |
	|~ |
	| |
	+-------------------------------------+

	":tab" コマンドは、ウィンドウを開く Ex コマンドと組み合わせて使います。そうす
	ると、ウィンドウは新しいタブページで開かれます。もう一つ例をあげます:

	:tab help gt

	このコマンドを実行すると、"gt" についてのヘルプが新しいタブページで開きます。

	タブページの操作には、他にも次のようなものがあります:

	- 上部バーの最後のラベルより右 (ラベルのないとこ) をマウスでクリック
	"gt" と同じように、次のタブページを選択します。

	- 上部右端の "X" をクリック
	現在のタブページを閉じます。ただし、そのタブページ内に未保存の変更があ
	る場合は閉じません。

	- 上部バーをダブルクリック
	新しいタブページを作成します。

	- "tabonly" コマンド
	現在のタブページ以外を閉じます。ただし、それらのタブページ内に未保存の
	変更がある場合は閉じません。

	タブページについての詳細は |tab-page| を参照してください。

	==============================================================================

	次章: |usr_09.txt| GUI を使う

	Copyright: see |manual-copyright| vim:tw=78:ts=8:ft=help:norl:

	------------------------------------------------------------------------------------------------------------------------------------------------

	top - main help file
	Download (not html): vimdoc.zip

	Vim日本語ドキュメント

	苦情は yukihiro.nakadaira@gmail.com まで。



				   {Google} ]> 
				  Google 検索
				  ( ) WWW を検索 (*) vimdoc を検索



	Vim documentation: tabpage
	==========================

	main help file

	------------------------------------------------------------------------------------------------------------------------------------------------

	*tabpage.txt* For Vim バージョン 7.2. Last change: 2007 Mar 11


	VIM REFERENCE MANUAL by Bram Moolenaar


	タブページの使い方 *tab-page* *tabpage*

	タブページを使うために追加されたコマンドについて説明します。複数のタブページを
	開いていると違う働きをするコマンドについても説明します。

	1. はじめに |tab-page-intro|
	2. コマンド |tab-page-commands|
	3. その他 |tab-page-other|
	4. 'tabline' の設定 |setting-tabline|
	5. 'guitablabel' の設定 |setting-guitablabel|

	{Vi にはこれらのコマンドはありません}
	{|+windows| が有効な場合のみ利用できます}

	==============================================================================
	1. はじめに *tab-page-intro*

	タブページは複数のウィンドウを持てます。タブページを使うと、作業別のウィンドウ
	の集合を簡単に切り替えることができます。

	通常、Vim ウィンドウの最上部にタブページを表すラベルの一覧が表示されます。その
	ラベルをマウスでクリックすると、そのタブページにジャンプできます。他の方法でも
	タブページを移動できます。

	ほとんどのコマンドは作業中のタブページ内だけで動作します。|CTRL-W| コマンド
	や、|:tab| を前置しない |:windo|、|:all|、|:ball| なども同様です。カレントタブ
	ページ以外にも作用するコマンドについては以下で説明しています。

	タブページを使うと、一時的なバッファを使用するときに、作業中のウィンドウレイア
	ウトを変更しなくてすみます。新しいタブページを開いて、何か作業をし、そのタブ
	ページを閉じる、という具合です。

	==============================================================================
	2. コマンド *tab-page-commands*

	タブページを開くには:

	Vim を "vim -p filename ..." と起動すると、それぞれのファイルごとに
	('tabpagemax' までの) タブページを開けます。|-p|

	CUI の Vim でタブページラインをダブルクリックすると新しいタブページが作成され
	ます。新しいタブページはクリックした場所の左に作成されます。最初のクリックが他
	のタブページの選択になってしまうときは、スクリーンが余計に更新されます。

	この機能は Win32 と Motif の GUI でも使えます。ただし、ラベルの右をクリックし
	た場合のみです。

	GUI でタブページラインを右クリックするとメニューが表示されます。|tabline-menu|

	:tabe[dit] *:tabe* *:tabedit* *:tabnew*
	:tabnew カレントタブページの後ろに空のウィンドウを持った新しいタブペー
	ジを作成します。

	:tabe[dit] [++opt] [+cmd] {file}
	:tabnew [++opt] [+cmd] {file}
	{file} を新しいタブページで開きます。|:edit| と同じです。

	:tabf[ind] [++opt] [+cmd] {file} *:tabf* *:tabfind*
	'path' 内の {file} を新しいタブページで開きます。|:find| と同
	じです。
	{|+file_in_path| が有効な場合のみ利用できます}

	:[count]tab {cmd} *:tab*
	{cmd} を実行します。そのコマンドが新しいウィンドウを作成すると
	きは、その代わりに新しいタブページを作成します。|:diffsplit|と
	|:diffpatch|, |:execute|, |:normal| に対しては機能しません。
	[count] を省略すると、新しいタブページはカレントタブページの後
	ろに作成されます。
	[count] を指定すると、[count] 番目のタブページの後ろに作成され
	ます。タブページを一番左に作成するには ":0tab cmd" とします。
	例:
	:tab split " opens current buffer in new tab page
	:tab help gt " opens tab page with help for "gt"

	CTRL-W gf カーソル下のファイル名のファイルを新しいタブページで開きます。
	|CTRL-W_gf| を参照してください。

	CTRL-W gF カーソル下のファイル名のファイルを新しいタブページで開きます。
	そして、ファイル名の後ろに指定された行番号にジャンプします。
	|CTRL-W_gF| を参照してください。

	タブページを閉じるには:

	複数のタブページを開いているときは、タブページ内の最後のウィンドウを閉じると、
	そのタブページが閉じられます。

	タブページラインが表示されているときは、右上に表示されている "X" をマウスでク
	リックすると、カレントタブページが閉じます。|'tabline'| を設定しているときは、
	他の何かが表示されているかもしれません。

	*:tabc* *:tabclose*
	:tabc[lose][!] カレントタブページを閉じます。
	このコマンドは次のときに失敗します:
	- タブページが一つしかないとき。 *E784*
	- 'hidden' がオフのときに [!] を使わず、バッファに変更があり、
	そのバッファを表示しているウィンドウが他にない場合。
	バッファの変更はファイルに保存されませんが、失われることもあり
	ません。このコマンドは安全なコマンドです。

	:tabc[lose][!] {count}
	{count} 番目のタブページを閉じます。|:tabclose| と同じ理由で失
	敗することがあります。

	*:tabo* *:tabonly*
	:tabo[nly][!] カレントタブページ以外のすべてのタブページを閉じます。
	オプション 'hidden' がオンのとき、閉じたウィンドウのバッファは
	すべて隠しバッファになります。
	'hidden' がオフ、'autowrite' がオンのときは、変更のあるバッ
	ファはファイルに保存されます。そうでないときは、変更のあるバッ
	ファを表示しているウィンドウは閉じません。[!] を指定した場合
	は、変更のあるバッファは隠しバッファになります。変更のあるバッ
	ファは絶対に破棄されないので、変更を失うことはありません。


	タブページを切り替えるには:

	タブページラインが表示されているときは、タブページラベルをマウスでクリックする
	と、そのタブページに移動できます。ラベルが表示されていない場所をクリックする
	と、次のタブページに移動できます。 |'tabline'|

	:tabn[ext] *:tabn* *:tabnext* *gt*
	<C-PageDown> *CTRL-<PageDown>* *<C-PageDown>*
	gt *i_CTRL-<PageDown>* *i_<C-PageDown>*
	次のタブページに移動します。次のタブページがない場合は、最初の
	タブページに移動します。

	:tabn[ext] {count}
	{count}<C-PageDown>
	{count}gt {count} 番目のタブページに移動します。最初のタブページの番号は
	1 です。


	:tabp[revious] *:tabp* *:tabprevious* *gT* *:tabN*
	:tabN[ext] *:tabNext* *CTRL-<PageUp>*
	<C-PageUp> *<C-PageUp>* *i_CTRL-<PageUp>* *i_<C-PageUp>*
	gT 前のタブページに移動します。前のタブページがない場合は、最後の
	タブページに移動します。

	:tabp[revious] {count}
	:tabN[ext] {count}
	{count}<C-PageUp>
	{count}gT {count} の数だけ前のタブページに移動します。前のタブページがな
	い場合は最後のタブページに移動します。

	:tabr[ewind] *:tabfir* *:tabfirst* *:tabr* *:tabrewind*
	:tabfir[st] 最初のタブページに移動します。

	*:tabl* *:tablast*
	:tabl[ast] 最後のタブページに移動します。


	その他のコマンド:
	*:tabs*
	:tabs タブページと、含まれているウィンドウの一覧を表示します。
	">" と表示されるのはカレントウィンドウです。
	"+" と表示されるのは変更のあるバッファです。


	タブページを並べ替えるには:

	:tabm[ove] [N] *:tabm* *:tabmove*
	カレントタブページを N 番目のタブページの後ろに移動します。カ
	レントタブページを一番目のタブページにするにはゼロを指定します。
	N を省略すると最後に移動します。


	タブページごとにコマンドを実行するには:

	*:tabd* *:tabdo*
	:tabd[o] {cmd} タブページごとにコマンドを実行します。
	これは次のような動作をします:
	:tabfirst
	:{cmd}
	:tabnext
	:{cmd}
	etc.
	このコマンドは各タブページのカレントウィンドウで実行されます。
	いずれかのタブページでエラーが起きたときは、その場で実行を中断
	します。
	最後のタブページ (またはエラーが起きたタブページ) がカレントタ
	ブページになります。
	{cmd} は '|' を使って複数のコマンドを繋げることができます。
	{cmd} はタブページを開いたり閉じたり並べ替えたりしてはいけませ
	ん。
	{Vi にはない機能です}
	{|+listcmds| が有効な場合のみ利用できます}
	|:windo|、|:argdo|、|:bufdo| も参照してください。

	==============================================================================
	3. その他 *tab-page-other*

	*tabline-menu*
	GUI のタブページラインにはポップアップメニューがあります。右クリックで次のメ
	ニューが表示されます:
	Close マウスポインタの下のタブページを閉じます。マウスがラベ
	ルの上にないときは、カレントタブページを閉じます。
	New Tab タブページを新規バッファで開きます。マウスポインタの左
	側に作成されます。
	Open Tab... "New Tab" と同じですが、ファイル選択ダイアログを使っ
	て選択したファイルを新しいタブページで開きます。

	Diff モードはタブページ単位で機能します。一つのタブページ内でファイル間の差分
	を表示できます。そして、他のタブページでは他のファイルとの差分を表示することが
	できます。

	タブページローカル変数は "t:" で始まります。|tabpage-variable|

	現在、タブページローカルなオプションは 'cmdheight' だけです。

	オートコマンドイベントの TabLeave と TabEnter を使って、タブページを切り替える
	ときにコマンドを実行できます。イベントが起きる正確な順番は何をしたかによって変
	わります。新しいタブページを作成したときは、例えば、編集中のバッファを新しい
	ウィンドウで開き、それからそのウィンドウで別のバッファを開いたときと同じような
	動きをします。つまり、":tabnew" では次の順番でイベントが実行されます:
	WinLeave カレントウィンドウから離れる
	TabLeave カレントタブページから離れる
	TabEnter 新しいタブページに入る
	WinEnter 新しいタブページのウィンドウに入る
	BufLeave カレントバッファから離れる
	BufEnter 新しい空のバッファに入る

	タブページを切り替えたときは次の順番です:
	BufLeave
	WinLeave
	TabLeave
	TabEnter
	WinEnter
	BufEnter

	==============================================================================
	4. 'tabline' の設定 *setting-tabline*

	オプション 'tabline' を設定してタブページラベルの表示方法を指定できます。これ
	は CUI の タブページラインで使います。

	オプション 'showtabline' を設定してタブページラインを表示するかどうかを指定で
	きます。表示しない、タブページが複数あるときだけ表示する、常に表示する、から選
	べます。

	タブページラインの強調表示には TabLine、TabLineSel、TabLineFill が使われます。
	|hl-TabLine| |hl-TabLineSel| |hl-TabLineFill|

	変更されているウィンドウを含むタブページには "+" が表示されます。タブページ内
	のウィンドウの個数も表示されます。よって "3+" という表示は3個のウィンドウを含
	む、そのうちの1つが変更されているバッファを含むということを意味します。

	オプション 'tabline' を使って、タブページラベルを好みの表示に設定できます。こ
	れはあまり簡単ではないので、サンプルを用意してあります。

	基本的には 'statusline' を参照してください。同じアイテムが 'tabline' で使用で
	きます。加えて、|tabpagebuflist()|、|tabpagenr()|、|tabpagewinnr()| という関数
	も使えます。

	タブページラベルの数は変化するので、オプションには式を使う必要があります。次の
	ように設定します:
	:set tabline=%!MyTabLine()

	では、関数 MyTabLine() を定義して、すべてのタブページラベルを表示するようにし
	ます。タブページラベル全体の作成と、個々のタブページラベルの作成、という二つの
	段階に分けると簡単です。

	function MyTabLine()
	let s = ''
	for i in range(tabpagenr('$'))
	" 強調表示グループの選択
	if i + 1 == tabpagenr()
	let s .= '%#TabLineSel#'
	else
	let s .= '%#TabLine#'
	endif

	" タブページ番号の設定 (マウスクリック用)
	let s .= '%' . (i + 1) . 'T'

	" ラベルは MyTabLabel() で作成する
	let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
	endfor

	" 最後のタブページの後は TabLineFill で埋め、タブページ番号をリセッ
	" トする
	let s .= '%#TabLineFill#%T'

	" カレントタブページを閉じるボタンのラベルを右添えで作成
	if tabpagenr('$') > 1
	let s .= '%=%#TabLine#%999Xclose'
	endif

	return s
	endfunction

	関数 MyTabLabel() は個々のタブページラベルを得るために呼ばれます。

	function MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	return bufname(buflist[winnr - 1])
	endfunction

	このサンプルは単純なものです。生成されるのは未設定時のタブページラインとほぼ同
	じですが、変更のあるバッファに + が付けたり、名前を切り詰めたりはしません。十
	分な表示領域がない場合など、なんらかのうまい方法でラベルの幅を減らしたいでしょ
	う。利用できる表示領域はオプション 'columns' を確認してください。

	==============================================================================
	5. 'guitablabel' の設定 *setting-guitablabel*

	GUI のタブページラインが表示されているとき、'guitablabel' を設定してタブページ
	ラベルの表示方法を指定できます。'tabline' とは違い、一度にタブページライン全体
	を指定するのではなく、個々のラベルを得るために 'guitablabel' が使われます。

	'guitabtooltip' という良く似たオプションがあります。これはラベルのツールチップ
	を表示するために使われます。ツールチップはマウスポインタがラベルの上に乗ってい
	るときだけ表示されるので、普通は、長い文字を表示します。いくつかのシステムだけ
	サポートされています。

	書式についてはオプション 'statusline' を参照してください。

	"%N" はカレントタブページ番号になります。このオプションを評価するときに、
	|v:lnum| にも同じ番号が設定されます。ファイル名を参照するアイテムにはタブペー
	ジのカレントウィンドウのものが使われます。

	Note: このオプションでは強調表示は使えません。%T と %X は無視されます。

	簡単な例として、次のものはタブページ番号とバッファ名をラベルに表示します:
	:set guitablabel=%N\ %f

	次の例は 'guitablabel' の標準設定の動作と似た動作をします。タブページのウィン
	ドウ数と、変更のあるバッファがあるときには '+' を表示します:

	function GuiTabLabel()
	let label = ''
	let bufnrlist = tabpagebuflist(v:lnum)

	" このタブページに変更のあるバッファがるときには '+' を追加する
	for bufnr in bufnrlist
	if getbufvar(bufnr, "&modified")
	let label = '+'
	break
	endif
	endfor

	" ウィンドウが複数あるときにはその数を追加する
	let wincount = tabpagewinnr(v:lnum, '$')
	if wincount > 1
	let label .= wincount
	endif
	if label != ''
	let label .= ' '
	endif

	" バッファ名を追加する
	return label . bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
	endfunction

	set guitablabel=%{GuiTabLabel()}

	Note: この関数はオプションを設定する前に定義しておく必要があります。そうしない
	と、関数未定義のエラーが表示されてしまいます。

	標準のラベルを使いたい場合は、空文字列を返してください。

	あるタブページに固有の何かを表示したいときは、タブページローカル変数 |t:var|
	が便利です。

	vim:tw=78:ts=8:ft=help:norl:

	------------------------------------------------------------------------------------------------------------------------------------------------

	top - main help file
	Download (not html): vimdoc.zip

	Vim日本語ドキュメント

	苦情は yukihiro.nakadaira@gmail.com まで。






Vim documentation: usr_40
=========================

main help file

------------------------------------------------------------------------------------------------------------------------------------------------

*usr_40.txt* For Vim バージョン 7.2. Last change: 2006 Jun 21

VIM USER MANUAL - by Bram Moolenaar

新しいコマンドを作る


Vim は拡張可能なエディタです。よく使う操作を一つにまとめて新しいコマンドを作成
したり、既存のコマンドを再定義したりできます。自動コマンドを使うと、コマンドを
自動的に実行できます。

|40.1| キーマッピング
|40.2| コマンドラインコマンドを定義する
|40.3| 自動コマンド

次章: |usr_41.txt| Vim スクリプト書法
前章: |usr_32.txt| undo ツリー
目次: |usr_toc.txt|

==============================================================================
*40.1* キーマッピング

|05.3| で簡単なマップを説明しました。マップの原理は、キー操作を他のキー操作に
変換するというものです。単純ですが強力な仕組みです。
典型的な使い方は、一つのキーを複数のキーにマップする方法です。ファンクション
キー (<F1>以外) には機能が割り当てられていないので、それらのキーを使うとよいで
しょう。例:

:map <F2> GoDate: <Esc>:read !date<CR>kJ

このマップでは三つのモードが使われています。"G" で最後の行にジャンプし、"o" で
新しい行を開いてインサートモードを開始、"Date: " というテキストを入力してから
<Esc> でインサートモードを抜けます。
特殊キーを <> で囲んで表記していますが、これは括弧表記というものです。特殊キー
を押すのではなく、見たまま文字どおり入力してください。この表記を使ったマップは
読むのが簡単で、そのままコピー＆ペーストして使うことができます。
さて、":" でコマンドラインモードに入ります。":read !date" コマンドは、"date"
コマンドの出力を読み込んで、現在行の下に追加します。<CR> は ":read" コマンドを
実行するために必要です。
この時点で、テキストは次のようになっています:

Date:
Fri Jun 15 12:54:34 CEST 2001

最後に、"kJ" で上に移動してから二つの行を一行につなげます。
マップするキーを選ぶときは |map-which-keys| を参考にしてください。


マップとモード
--------------

":map" コマンドはノーマルモードのキーマップを定義します。同様に、他のモードの
マップを定義することもできます。例えば ":imap" でインサートモードのマップを定
義できます。次のマップは、カーソルの下に日付を挿入します:

:imap <F2> <CR>Date: <Esc>:read !date<CR>kJ

多少の違いはありますが、ノーマルモードで <F2> にマップしたものと同じです。この
マップを定義してもノーマルモードの <F2> は消えません。このように、同じキーを
モード別にマップすることができます。
このマップはインサートモードの中で開始しますが、実行後はノーマルモードになって
しまいます。インサートモードを継続したい場合はマップの最後に "a" を追加してく
ださい。

マップコマンドはモード別に用意されています:

:map ノーマルモード、ビジュアルモード、オペレータ待機モード
:vmap ビジュアルモード
:nmap ノーマルモード
:omap オペレータ待機モード
:map! インサートモード、コマンドライン
:imap インサートモード
:cmap コマンドライン

オペレータ待機モードとは、"d" や "y" などのオペレータを入力した後、モーション
コマンドやテキストオブジェクトの入力を待機している状態のことです。例えば "dw"
の "w" はオペレータ待機モードでの入力です。

例えば、d<F7> コマンドで C プログラムのブロック ({}で囲まれたテキスト) を削除
できるように、あるいは、y<F7> でブロックをヤンクできるようにしたい場合は、<F7>
をマップしてプログラムブロックを選択できるようにする必要があります。次のように
します:

:omap <F7> a{

オペレータ待機モードで <F7> を押すと "a{" によってブロックが選択されます。この
マップは、{ が押しにくい位置にあるキーボードでは便利です。


マップの一覧を表示する
----------------------

定義されたマップの一覧を確認したい場合は、":map" コマンドを引数なしで実行しま
す。モード別のマップコマンドを使うこともできます。次のような一覧が表示されま
す:

_g :call MyGrep(1)<CR>
v <F2> :s/^/> /<CR>:noh<CR>``
n <F2> :.,$s/^/> /<CR>:noh<CR>``
<xHome> <Home>
<xEnd> <End>


最初の列は、マップが機能するモードを示しています。"n" はノーマルモード、"i" は
インサートモード、などなど。":map" で定義されたマップには空白が使われます。空
白の場合はノーマルモードとビジュアルモードで使えます。
この一覧を見れば、<> 表記で書いた特殊キーが正しく認識されているかを確認できま
す (カラー表示がサポートされている場合に限る)。例えば、<Esc> が色付きで表示さ
れていれば、それはエスケープ文字です。他のテキストと同じ色で表示されている場合
は、それは "<Esc>" という 5 文字の文字列です。


再マップ
--------

マップは他のマップを含むことができます。例えば、上述の <F2> のマップは次のよう
に短くできます:

:map <F2> G<F3>
:imap <F2> <Esc><F3>
:map <F3> oDate: <Esc>:read !date<CR>kJ

ノーマルモードの <F2> は、最後の行に移動して <F3> を押すようにマップされていま
す。インサートモードの <F2> は、<Esc> でインサートモードを停止して <F3> を押す
ようにマップされています。そして、<F3> には目的の機能がマップされています。

例えば、Ex モードはほとんど使わないので "Q" をテキスト整形コマンドとして使える
ようにしたい (昔の Vim はそういう動作でした) 場合は、次のようなマップを定義し
ます:

:map Q gq

しかし、Ex モードが使いたくなることもあるかもしれません。"gQ" を Q にマップし
て、EX モードが使えるようにしましょう:

:map gQ Q

この状態で "gQ" を入力すると "Q" にマップされます。ここまではいいですね。とこ
ろが、さらに "Q" が "gq" にマップされてしまいます。つまり、"gQ" は "gq" に変換
されるので Ex モードを使うことはできないのです。
再マップされないようにするには、":noremap" コマンドを使います:

:noremap gQ Q

これで、マップされた "Q" に対して他のマップが適用されなくなります。同じような
コマンドがモード別に用意されています:

:noremap ノーマルモード、ビジュアルモード、オペレータ待機モード
:vnoremap ビジュアルモード
:nnoremap ノーマルモード
:onoremap オペレータ待機モード
:noremap! インサートモード、コマンドライン
:inoremap インサートモード
:cnoremap コマンドライン


再帰マップ
----------

マップが自分自身を含んでいる場合、そのマップは永遠に動き続けます。これを利用す
れば、コマンドを無限に繰り返すことができます。
例えば、いくつかのファイルがあって、すべてのファイルは一行目にバージョン番号が
書かれているとします。"vim *.txt" でそれらのファイルを開くと、一つ目のファイル
が開いた状態になります。次のマップを定義します:

:map ,, :s/5.1/5.2/<CR>:wnext<CR>,,

そして、",," を入力してマップを実行します。このマップは一行目の "5.1" を "5.2"
に変更し、":wnext" で上書き保存してから次のファイルを開きます。マップの最後は
",," になっているので同じマップが再び適用され、置換と保存が実行されます。
このマップは、何かエラーが発生するまで止まりません。このマップの場合、置換コマ
ンドの実行で "5.1" が見つからなかった場合にエラーが発生します。その場合は、
"5.1" を挿入してから再びマップを実行します。最後のファイルに到達すると、
":wnext" が失敗してマップが停止します。
マップの途中でエラーが発生した場合は、そのマップの残りの部分は無視されます。
マップは CTRL-C で中断できます (MS-WindowsではCTRL-Break)。


マップを削除する
----------------

マップを削除するには ":unmap" コマンドを使います。このコマンドにも、モード別の
ものが用意されています:

:unmap ノーマルモード、ビジュアルモード、オペレータ待機モード
:vunmap ビジュアルモード
:nunmap ノーマルモード
:ounmap オペレータ待機モード
:unmap! インサートモード、コマンドライン
:iunmap インサートモード
:cunmap コマンドライン

例えば、ビジュアルモードを除き、ノーマルモードとオペレータ待機モードだけでマッ
プを定義したいような場合は次のトリックが使えます。最初に三つのモードでマップを
定義し、ビジュアルモードのマップだけを削除します:

:map <C-A> /---><CR>
:vunmap <C-A>

"<C-A>" は CTRL-A キーとして解釈されます。

すべてのマップを削除するには |:mapclear| コマンドを使います。他のコマンドと同
様に、これにもモード別のコマンドが用意されています。マップの削除はアンドゥでき
ないので注意してください。


特殊文字
--------

":map" コマンドの後ろには他のコマンドを続けて書くことができます。その場合は |
文字でコマンドを区切ります。そのため、マップの中では | 文字が使えません。この
文字を使いたい場合は <Bar> (5文字) を使ってください。例:

:map <F8> :write <Bar> !checkin %<CR>

同じ問題は ":unmap" コマンドにもあります。":unmap" の場合はさらに末尾のスペー
スにも注意しなければなりません。以下の二つのコマンドは動作が違います:

:unmap a | unmap b
:unmap a| unmap b

一つ目のコマンドは "a " (スペース付き) のマップを削除します。

マップの中でスペースを使いたい場合は <Space> (7文字) を使ってください:

:map <Space> W

このマップはスペースキーを押すと、次の単語 (空白区切り) に移動します。

マップコマンドの末尾にはコメントを付けられません。なぜなら、" 文字はマップの一
部として処理されてしまうからです。代わりに |" を使ってください。これは、新しい
空のコマンドを開始して、そのコマンドにコメントをつけます。例:

:map <Space> W| " 次の単語に移動するのにスペースバーを使う


マップと短縮入力
----------------

インサートモードのマップは短縮入力とよく似ています。引数は同じ方法で処理されま
す。主な違いは実行されるタイミングです。短縮入力は単語の後で単語以外の文字を入
力したときに実行されます。マップはマップ文字列の最後の文字を入力したときに実行
されます。
違いは他にもあります。短縮入力では入力した文字がすぐに挿入されます。短縮入力が
実行されると元の文字が削除されて指定された文字列に置換されます。マップされた文
字を入力したときは最後の文字を入力してマップが実行されるまで何も挿入されませ
ん。'showcmd' オプションがオンに設定されている場合は、入力途中の文字がウィンド
ウ下部に表示されます。
マップがあいまいな場合は少し違う動作になります。例えば、次の二つのマップがある
とき:

:imap aa foo
:imap aaa bar

"aa" と入力した時点では、一つ目のマップを適用すべきか、それとも二つ目のマップ
を使うべきか、判断できません。その場合は、他の文字が入力されるまで待機状態にな
ります。"a" を入力すると二つ目のマップが適用されて "bar" が挿入されます。他の
文字、例えばスペース、を入力すると一つ目のマップが適用されて "foo" が挿入さ
れ、さらにスペースが挿入されます。


さらに...
---------

<script> キーワードを使うと、スクリプトローカルなマップを定義できます。
|:map-<script>| 参照。

<buffer> キーワードを使うと、バッファローカルなマップを定義できます。
|:map-<buffer>| 参照。

<unique> キーワードを使うと、定義しようとしたマップがすでに定義されていた場合
にコマンドが失敗します。このキーワードを使わない場合は、古いマップが上書き定義
されます。|:map-<unique>| 参照。

何もしないキーを定義したい場合は <Nop> (5文字) を使います。次のコマンドは、
<F7> キーが何もしないように設定しています:

:map <F7> <Nop>| map! <F7> <Nop>

<Nop> の後に空白を入れないでください。

==============================================================================
*40.2* コマンドラインコマンドを定義する

Vim では新しいコマンドを定義することができます。定義したコマンドはコマンドライ
ンモードの他のコマンドと同じように使えます。
コマンドを定義するには ":command" コマンドを使います:

:command DeleteFirst 1delete

":DeleteFirst" コマンドを実行すると、":1delete" が実行され、最初の行が削除され
ます。

Note:
ユーザー定義コマンドの名前は必ず大文字で開始する必要があります。":X"、
":Next"、":Print" を使うことはできません。アンダースコア ("_") も使え
ません。数字は使えますがお勧めしません。

ユーザー定義コマンドの一覧を見るには、次のコマンドを実行します:

:command

組み込みコマンドと同じように、ユーザー定義コマンドも省略できます。他のコマンド
と区別するのに十分な長さの文字を入力するだけでコマンドを実行できます。コマンド
ライン補完を使って完全な名前を得ることもできます。


引数の数
--------

ユーザー定義コマンドは引数を取ることができます。引数の数は -nargs オプションで
指定する必要があります。例えば、上述の :DeleteFirst コマンドは引数を取らないの
で、次のように定義できます:

:command -nargs=0 DeleteFirst 1delete

指定が無ければ 0 が使われるので、わざわざ "-nargs=0" を指定する必要はありませ
ん。-nargs には次の値を指定できます:

-nargs=0 引数なし
-nargs=1 引数 1 個
-nargs=* いくつでも
-nargs=? 引数なし、もしくは 1 個
-nargs=+ 引数 1 個以上


引数の使い方
------------

コマンド定義の中では、<args> キーワードを使って引数を表します。例:

:command -nargs=+ Say :echo "<args>"

次のコマンドを実行すると:

:Say Hello World

"Hello World" と表示されます。引数に引用符 (") が使われると、これはうまく動き
ません。例:

:Say he said "hello"

特殊な文字が含まれているときにそれを適切にエスケープして文字列として使えるよう
にするには "<q-args>" を使います:

:command -nargs=+ Say :echo <q-args>

上記の ":Say" コマンドを実行すると、次のコマンドが実行されます:

:echo "he said \"hello\""

<f-args> キーワードを使うと、引数が関数呼び出しに適した形に展開されます。例:

:command -nargs=* DoIt :call AFunction(<f-args>)
:DoIt a b c

次のコマンドが実行されます:

:call AFunction("a", "b", "c")


範囲指定
--------

いくつかのコマンドは範囲指定を受け付けますが、そのようなコマンドを定義したい場
合は -range オプションを使います。このオプションには次の値を指定できます:

-range 範囲指定を許可。省略時は現在行が選択される。
-range=% 範囲指定を許可。省略時はファイル全体が選択される。
-range={count} 範囲指定を許可。範囲指定の最後の数値だけを使う。省略時
は {count} が使われる。

範囲指定を使う場合は、<line1> キーワードと <line2> キーワードを使って範囲の最
初と最後の行を取得できます。例えば、次のコマンドは、指定された範囲のテキストを
"save_file" に保存するコマンドを定義しています:

:command -range=% SaveIt :<line1>,<line2>write! save_file


他のオプション
--------------

使用できるオプションやキーワードは他にもあります:

-count={number} カウント指定を受け付ける。省略時は {number}。
カウント指定は <count> キーワードで取得できま
す。
-bang ! の指定を受け付ける。! が使われた場合は
<bang> キーワードが ! に置き換わります。
-register レジスタの指定を受け付ける。(省略時は無名レジ
スタ。)
指定されたレジスタは <reg> (または <register>)
で取得できます。
-complete={type} コマンドライン補完の種類を指定する。使用できる
補完の種類は |:command-completion| を参照。
-bar コマンドの後ろに | を使って他のコマンド (ある
いはコメント) を続けて書くことを許可する。
-buffer カレントバッファでのみ使用できるコマンドを定義
する。

最後に <lt> キーワードを説明します。これは文字 "<" を意味します。<> 表記をエス
ケープして、特殊な意味を消すために使います。


再定義と削除
------------

同じ名前のコマンドを再定義したい場合は ! を使います:

:command -nargs=+ Say :echo "<args>"
:command! -nargs=+ Say :echo <q-args>

コマンドを削除したい場合は ":delcommand" を使います。削除したいコマンドの名前
を引数に指定してください。例:

:delcommand SaveIt

次のコマンドですべてのユーザー定義コマンドを削除できます:

:comclear

コマンドの削除はアンドゥできないので注意してください。

ユーザー定義コマンドについての詳細はリファレンスマニュアルを参照してください。
|user-commands|。

==============================================================================
*40.3* 自動コマンド

自動コマンドとは、さまざまなイベントに応じて自動的に実行されるコマンドのことで
す。ファイルを読み書きしたり、バッファを切り替えたりしたときに実行されます。例
えば、|gzip|プラグインは、圧縮ファイルを開くために自動コマンドを使っています。
自動コマンドは非常に強力です。適切に使えばいろんな手間を省くことができます。し
かし、不適切な使い方をすればさまざまなトラブルの原因になります。

例えば、ファイルを保存するときに、保存した日付をファイル末尾に書き込んでみま
しょう。まず、次の関数を定義します:

:function DateInsert()
: $delete
: read !date
:endfunction

ファイルを保存する直前にこの関数を実行したいわけです。次のコマンドで設定しま
す:

:autocmd FileWritePre * call DateInsert()

"FileWritePre" は自動コマンドが実行されるイベントです。このイベントはファイル
を保存する直前に発行されます。"*" の部分はファイル名にマッチするパターンです。
"*" はすべてのファイルにマッチします。
この自動コマンドが設定された状態で ":write" を実行すると、ファイル名にマッチし
たすべての FileWritePre 自動コマンドが実行されてから、ファイルが保存されます。
:autocmd の正式な書式は次のとおりです:

:autocmd [group] {events} {file_pattern} [nested] {command}

[group] は省略可能です。コマンドを管理したり呼び出したりしたい場合に使います
(後述)。{events} はコマンドを実行するイベントのリストです (カンマ区切り)。
{file_pattern} はファイル名です。ワイルドカードが使えます。例えば、"*.txt" な
ら ".txt" で終わるファイルに対してコマンドが実行されます。 [nested] は省略可能
です。自動コマンドを再帰的に呼び出したい場合に指定します (下記参照)。そして、
実行したいコマンドを {command} に指定します。


イベント
--------

BufReadPost は最も便利なイベントの一つです。これは新しいファイルを開いたときに
発行されます。普通はオプションを設定したりするのに使われます。例えば、"*.gsm"
というファイルを GNU アセンブリ言語のファイルとして扱いたい場合は、次のように
設定します:

:autocmd BufReadPost *.gsm set filetype=asm

ファイルの種類が検出されて、'filetype' オプションが設定されると、Filetype イベ
ントが発行されます。このイベントはファイルの種類に応じて何かを実行したい場合に
使います。例えば、テキストファイルを開いたときに短縮入力の定義を読み込むには次
のようにします:

:autocmd Filetype text source ~/.vim/abbrevs.vim

新しいファイルを作成したときにスケルトンを挿入することもできます:

:autocmd BufNewFile *.[ch] 0read ~/skeletons/skel.c

イベントの一覧は |autocmd-events| を参照してください。


パターン
--------

{file_pattern} 引数には複数のパターンをカンマ区切りで指定できます。例えば、
"*.c,*.h" なら、末尾が ".c" と ".h" のファイルにマッチします。
パターンには一般的なワイルドカードが使えます。次のようなものがよく使われます:

* 何かの文字が何文字でも
? 何かの文字が 1 つ
[abc] a か b か c
. ドット
a{b,c} ab か ac

パターンにスラッシュ (/) が含まれている場合は、ディレクトリ名と比較されます。
スラッシュが含まれていない場合は、ファイル名のみが使われます。例えば、
"/home/biep/readme.txt" には "*.txt" がマッチします。"/home/biep/*" も同様に
マッチします。しかし、"home/foo/*.txt" はマッチしません。
スラッシュが含まれているときは、ファイルの絶対パス ("/home/biep/readme.txt")
と相対パス (例えば "biep/readme.txt") の両方が比較されます。

Note:
MS-Windows のように、ディレクトリの区切りにバックスラッシュを使うよう
なシステムでもスラッシュを使ってパターンを指定することができます。
バックスラッシュはエスケープする必要があるので、スラッシュを使ったほう
が簡単です。自動コマンドの移植性もあがります。


自動コマンドを削除する
----------------------

自動コマンドの削除には、定義と同じコマンドを使います。ただし、削除するときは !
を使い、{command} は指定しません。例:

:autocmd! FileWritePre *

"FileWritePre" イベントの、"*" パターンを使っている自動コマンドがすべて削除さ
れます。


一覧表示する
------------

定義されている自動コマンドの一覧を見るには次のようにします:

:autocmd

とても長い出力が表示されます。ファイルタイプの認識が有効になっている場合は特に
長くなります。一部のコマンドだけを表示したい場合は、グループ、イベント、パター
ンのどれかを指定してください。例えば、次のコマンドで BufNewFile に設定された自
動コマンドを表示できます:

:autocmd BufNewFile

"*.c" に対する自動コマンドを表示したい場合は次のようにします:

:autocmd * *.c

イベントに "*" を指定すると、すべてのイベントが表示されます。cprograms グルー
プの自動コマンドを表示したい場合は次のようにします:

:autocmd cprograms


グループ
--------

自動コマンドを定義するとき、{group} を指定することで、関連した自動コマンドをグ
ループ化できます。例えば、特定のグループの自動コマンドをまとめて削除したりでき
ます。
自動コマンドをグループ化するには、":augroup" コマンドを使います。例えば、C 言
語用の自動コマンドを定義してみましょう:

:augroup cprograms
: autocmd BufReadPost *.c,*.h :set sw=4 sts=4
: autocmd BufReadPost *.cpp :set sw=3 sts=3
:augroup END

次のように書くこともできます:

:autocmd cprograms BufReadPost *.c,*.h :set sw=4 sts=4
:autocmd cprograms BufReadPost *.cpp :set sw=3 sts=3

"cprograms" グループのすべての自動コマンドを削除するには、次のようにします:

:autocmd! cprograms


ネスト
------

通常は、自動コマンドの中で実行されたコマンドによってイベントが発行されることは
ありません。例えば、FileChangedShell イベントの中でファイルを読み込んでも、シ
ンタックスを設定するための自動コマンドは実行されません。イベントを発行させたい
場合は "nested" 引数を指定してください:

:autocmd FileChangedShell * nested edit


自動コマンドを実行する
----------------------

擬似的にイベントを発行して、自動コマンドを実行することができます。自動コマンド
の中から他の自動コマンドを実行するような場合に便利です。例:

:autocmd BufReadPost *.new execute "doautocmd BufReadPost " . expand("<afile>:r")

新しいファイルが開かれたときに実行される自動コマンドを定義しています。ファイル
名の末尾が ".new" になっているものが対象です。":execute" コマンドは、引数を評
価した結果をコマンドとして実行します。例えば、"tryout.c.new" を開くと、次のコ
マンドが実行されます:

:doautocmd BufReadPost tryout.c

expand() 関数に指定された "<afile>" が自動コマンドで使われたファイル名に展開さ
れ、":r" によって、そのルート部分 (訳注: .newを除いた部分) が使われます。

":doautocmd" はカレントバッファの上で実行されます。":doautoall" コマンドは、
":doautocmd" と同じ操作をすべてのバッファに対して実行します。


ノーマルモードコマンドを使う
----------------------------

自動コマンドで使用できるのはコマンドラインコマンドです。ノーマルモードコマンド
を使いたい場合は ":normal" コマンドを使ってください。例:

:autocmd BufReadPost *.log normal G

*.log ファイルを開くと、ファイル末尾にカーソルがジャンプします。
":normal" コマンドは少し複雑です。指定するコマンドは完結していなければなりませ
ん。例えば、"i" でインサートモードに入ったら、<Esc> でモードを抜ける必要があり
ます。"/" で検索する場合は、<CR> で検索を実行する必要があります。
":normal" コマンドはすべてのテキストを引数として解釈するので、| を使って他のコ
マンドを続けて書くことはできません。それが必要な場合は ":execute" コマンドの中
で ":normal" コマンドを実行してください。":execute" を使うと、特殊文字を指定す
るのが簡単になります。例:

:autocmd BufReadPost *.chg execute "normal ONew entry:\<Esc>" |
\ 1read !date

長いコマンドを見やすくするために、バックスラッシュを使って複数行に分けていま
す。この方法はスクリプトファイルの中だけで使えます (コマンドラインで入力すると
きは使えません)。

自動コマンドの中で複雑なことを実行すると、必然的にカーソルの位置が変わってしま
います。それを元に戻す方法については |restore-position| を参照してください。


イベントの無効化
----------------

自動コマンドを実行して欲しくないときは、'eventignore' オプションに無視したいイ
ベントを設定してください。例えば、次のように設定すると、他のウィンドウに移動し
たときのイベントが無視されます:

:set eventignore=WinEnter,WinLeave

すべてのイベントを無視するには、次のように設定します:

:set eventignore=all

通常の状態に戻すには、'eventignore' を空に設定します:

:set eventignore=

==============================================================================

次章: |usr_41.txt| Vim スクリプト書法

Copyright: see |manual-copyright| vim:tw=78:ts=8:ft=help:norl:

------------------------------------------------------------------------------------------------------------------------------------------------

top - main help file
Download (not html): vimdoc.zip

Vim日本語ドキュメント

苦情は yukihiro.nakadaira@gmail.com まで。



               {Google} ]> 
              Google 検索
              ( ) WWW を検索 (*) vimdoc を検索



Vim documentation: usr_41
=========================

main help file

------------------------------------------------------------------------------------------------------------------------------------------------

*usr_41.txt* For Vim バージョン 7.2. Last change: 2008 Jun 21

VIM USER MANUAL - by Bram Moolenaar

Vim スクリプト書法


Vim スクリプト言語は vimrc ファイルや構文ファイルなど、さまざまな目的に使われ
ます。この章では Vim スクリプトの書き方を説明します。説明することがたくさんあ
るので大きな章になってます。

|41.1| はじめに
|41.2| 変数
|41.3| 式
|41.4| 条件式
|41.5| 式を実行する
|41.6| 関数を使う
|41.7| 関数を定義する
|41.8| リストと辞書
|41.9| 例外
|41.10| 注意事項
|41.11| プラグインを書く
|41.12| ファイルタイププラグインを書く
|41.13| コンパイラプラグインを書く
|41.14| プラグインを書く (高速ロード版)
|41.15| ライブラリスクリプトを書く
|41.16| Vim スクリプトを配布する

次章: |usr_42.txt| 新しいメニューを追加する
前章: |usr_40.txt| 新しいコマンドを作る
目次: |usr_toc.txt|

==============================================================================
*42.1* はじめに *vim-script-intro* *script*

誰もが最初に触れる Vim スクリプトは vimrc ファイルです。Vim が起動するときに読
み込まれ、書かれているコマンドが実行されます。それにより好きなように設定を変更
できます。vimrc の中ではすべてのコロンコマンドが使えます (":" で始まるコマンド
のこと。Ex コマンドやコマンドラインコマンドと呼ばれることもある)。
シンタックスファイルも Vim スクリプトです。シンタックスファイルは、ファイルタ
イプ別にオプションを設定するファイルの一種です。複雑なマクロ定義を別ファイルに
分けて保存しておくこともできます。このように、いろいろな使用方法が考えられま
す。

簡単な例から始めましょう:

:let i = 1
:while i < 5
: echo "count is" i
: let i += 1
:endwhile

Note:
実際には ":" を書く必要はありません。":" が必要なのはコマンドラインで
入力するときだけです。Vim スクリプトファイルを書くときは省略できます。
このヘルプでは、コロンコマンドであることを強調し、ノーマルモードと区別
するためにコロンを表記しています。
Note:
例文をヤンクして :@" コマンドで実際に実行できます。

出力は次のようになります:

count is 1
count is 2
count is 3
count is 4

一行目では ":let" コマンドで変数に値を代入しています。書式は次のとおりです:

:let {変数名} = {式}

例では、変数名が "i"、式が 1 です。
":while" コマンドでループを開始します。書式は次のとおりです:

:while {条件式}
: {ステートメント}
:endwhile

条件式が真である間、ステートメントが実行されます。例では、条件式は "i < 5" で
す。これは、i が 5 より小さい場合に真になります。
Note:
何かのミスで while ループが止まらなかった場合は、CTRL-C を押せば中断で
きます (MS-Windows では CTRL-Break)。

":echo" コマンドは引数を出力します。例では、"count is" という文字列と、変数 i
の値を出力しています。i が 1 なら、次のように表示されます:

count is 1

":let i += 1" は ":let i = i + 1" と同じ意味です。変数 i に 1 を加算し、新しい
値を同じ変数に代入します。

上述の例は、実際にはもっと簡潔に書くことができます:

:for i in range(1, 4)
: echo "count is" i
:endfor

|:for| と |range()| の説明はもっと先です。すぐに知りたい人はリンク先にジャンプ
してください。


三種類の数値
------------

数値は10進数、16進数、8進数のいずれかで表記します。16進数は "0x" か "0X" で開
始します。例えば "0x1f" は10進数の 31 です。8進数は "0" で開始します。例えば
"017" は10進数の 15 です。注意: 10進数で書くときは先頭に "0" を付けないでくだ
さい。8進数として扱われてしまいます。
":echo" コマンドは常に10進数で出力します。例:

:echo 0x7f 036
127 30

数値にマイナス記号を付けると負数になります。8進数や16進数も負数にできます。マ
イナス記号は減算記号としても使われます。次の例を上の例と比べてみてください:

:echo 0x7f -036
97

式の途中にある空白は無視されますが、可読性を高めるために、適切に空白で区切るこ
とをお勧めします。例えば上記の数値が負数であると勘違いしてしまわないように、マ
イナス記号と数値の間に空白をいれましょう:

:echo 0x7f - 036

==============================================================================
*41.2* 変数

変数名にはアルファベット、数字、アンダースコアが使えます。変数名を数字で開始す
ることはできません。次のような変数名が使えます:

counter
_aap3
very_long_variable_name_with_underscores
FuncLength
LENGTH

"foo+var" や "6var" のような名前は使えません。
例に挙げた変数はグローバル変数です。定義されている変数の一覧を見るのは次のコマ
ンドを使います:

:let

グローバル変数はどこでも使えます。そのため、あるスクリプトファイルで "count"
という変数を使ったとき、その変数は他のスクリプトでも使われている可能性がありま
す。これは混乱を招きますし、トラブルの元です。それを避けるには "s:" を付けてス
クリプトローカル変数を使います。例えば、次のように使います:

:let s:count = 1
:while s:count < 5
: source other.vim
: let s:count += 1
:endwhile

"s:count" はスクリプトローカル変数なので、他のスクリプトファイルによって変更さ
れる心配はありません。他のスクリプトファイルで "s:count" 変数が使われていたと
しても、それは別の変数です。スクリプトローカル変数についての詳細は
|script-variable| を参照してください。

変数の種類は他にもあります。|internal-variables| 参照。次の変数がよく使われま
す:

b:name バッファローカル変数
w:name ウィンドウローカル変数
g:name グローバル変数 (関数内では g: 必須)
v:name Vim が定義する変数


変数の削除
----------

変数はメモリを消費します。":let" コマンドの出力にも表示されます。変数を削除す
るには ":unlet" コマンドを使います。例:

:unlet s:count

スクリプトローカル変数の "s:count" が削除され、使用されていたメモリが開放され
ます。変数が存在しない場合でもエラーを起こしたくない場合は ! を付けてください:

:unlet! s:count

スクリプトの実行が終了したとき、ローカル変数は自動的には削除されません。次に同
じスクリプトを実行したときにその変数を使うことができます。例:

:if !exists("s:call_count")
: let s:call_count = 0
:endif
:let s:call_count = s:call_count + 1
:echo "called" s:call_count "times"

"exists()" 関数は変数が定義されているかどうかをチェックします。引数に調べたい
変数の名前を指定します。変数自体を指定するのではありません。例えば:

:if !exists(s:call_count)

これは、s:call_count の値を変数名として exists() 関数を呼び出しているので、意
味が違ってしまいます。
感嘆符 (! 記号) は値を反転します。値が真なら偽になり、偽なら真になります。この
記号は "not" と読むことができます。つまり、"if !exists()" は "if not exists()"
と読むことができます。
Vim では、0 以外の値はすべて真です。0 は偽です。
Note:
数値が必要なところで文字列を使ったとき、文字列は自動的に数値に変換され
ます。文字列の先頭が数字ではなかった場合は 0 に変換されます。つまり:
:if "true"
"true" は 0 に変換されるので偽になります。


文字列変数と定数
----------------

ここまでは変数の値に数値だけを使っていましたが、文字列を使うこともできます。
Vim は数値と文字列を基本型としてサポートしています。変数は動的に型付けされま
す。型は ":let" コマンドで変数に値を代入するたびに変化します。詳しくは|41.8|
を参照してください。
変数に文字列を代入するには文字列定数を使う必要があります。文字列定数には二つの
種類があります。一つはダブルクオート文字列です:

:let name = "peter"
:echo name
peter

文字列の中でダブルクオートを使いたい場合は、バックスラッシュを前置してくださ
い:

:let name = "\"peter\""
:echo name
"peter"

バックスラッシュを使いたくない場合はシングルクオート文字列を使ってください:

:let name = '"peter"'
:echo name
"peter"

シングルクオート文字列の中ではすべての文字がそのまま使われます。ただし、シング
ルクオートだけは特別で、一つのシングルクオートを表すためには二つのシングルク
オートを書く必要があります。バックスラッシュはそのまま使われるので、特殊文字は
使えません。
ダブルクオート文字列の中では特殊文字が使えます。次のようなものがあります:

\t <Tab>
\n <NL>, 改行
\r <CR>, <Enter>
\e <Esc>
\b <BS>, バックスペース
\" "
\\ \, バックスラッシュ
\<Esc> <Esc>
\<C-W> CTRL-W

最後の二つはただの一例です。"\<name>" 形式で "name" という特殊キーを使うことが
できます。
文字列で使える特殊表記については |expr-quote| を参照してください。

==============================================================================
*41.3* 式

Vim の式は高機能でシンプルです。式の定義については |expression-syntax| を参照
してください。ここでは基本的なことだけを説明します。
数値と文字列と変数はそれ自体が式です。つまり、式が必要なところでは数値でも文字
列でも変数でも使えます。他にも次のようなものが使えます:

$NAME 環境変数
&name オプション
@r レジスタ

例:

:echo "The value of 'tabstop' is" &ts
:echo "Your home directory is" $HOME
:if @a > 5

&name 形式を使うと、オプションを保存し、別の値に設定し、何かを実行して、オプ
ションを元に戻す、というようなことができます。例:

:let save_ic = &ic
:set noic
:/The Start/,$delete
:let &ic = save_ic

'ignorecase' オプションをオフにしてから "The Start" パターンを検索しています。
しかし設定は変更されません。(パターンに "\C" を加える方法でも同じことができま
す。|/C| 参照。)


数値計算
--------

基本的な要素を組み合わせると面白くなってきます。まずは数値計算です:

a + b 加算
a - b 減算
a * b 乗算
a / b 除算
a % b 剰余演算(余りを得る)

演算子の優先順位は一般的な規則と同じです:

:echo 10 + 5 * 2
20

カッコを使って優先順位を変更できます:

:echo (10 + 5) * 2
30

文字列は "." で連結できます:

:echo "foo" . "bar"
foobar

":echo" コマンドに複数の引数を指定すると、スペースで区切られて表示されます。こ
れらの例では一つの式しか使われていないので、スペースは挿入されていません。

C 言語と同じ条件演算子も使えます:

a ? b : c

"a" が真なら "b" が使われ、そうでなければ "c" が使われます。例:

:let i = 4
:echo i > 5 ? "i is big" : "i is small"
i is small

被演算子の部分は優先的に評価されるので、次のように見なすことができます:

(a) ? (b) : (c)

==============================================================================
*41.4* 条件式

":if" コマンドは条件が真の場合に ":endif" までのステートメントを実行します。書
式は次のとおり:

:if {condition}
{statements}
:endif

{condition} を評価した結果が真 (0以外) であれば、{statements} の内容が実行され
ます。{statements} は正しく記述されている必要があります。不正な記述があると
":endif" までたどり着けません。
":else" を使うこともできます。書式は次のとおり:

:if {condition}
{statements}
:else
{statements}
:endif

二つ目の {statements} は条件が偽の場合にだけ実行されます。
":elseif" を使うこともできます:

:if {condition}
{statements}
:elseif {condition}
{statements}
:endif

これは ":else" に続けて "if" 文を使うのと同じ動作ですが、余計な ":endif" を使
わなくて済みます。
vimrc ファイルで便利に使える例を示しましょう。'term' オプションの値を調べ、そ
の値に応じて処理を分けます:

:if &term == "xterm"
: " xterm 用の設定
:elseif &term == "vt100"
: " vt100 端末用の設定
:else
: " その他の端末用の設定
:endif


論理演算子
----------

今までの説明で既に論理演算子を使いました。次の演算子がよく使われます:

a == b 等しい
a != b 等しくない
a > b より大きい
a >= b より大きいか等しい
a < b より小さい
a <= b より小さいか等しい

条件が成立するなら 1、そうでなければ 0 が返ります。例:

:if v:version >= 700
: echo "おめでとう"
:else
: echo "古いバージョンを使っています。更新してね!"
:endif

"v:version" は Vim によって定義されている変数で、Vim のバージョンが入っていま
す。バージョン 6.0 なら 600、バージョン 6.1 なら 601 です。これは複数のバー
ジョンに対応するスクリプトを書くときに便利です。|v:version|

論理演算子は数値でも文字列でも扱えます。文字列どうしを比較するときは数学的な差
が比較されます。文字のバイト値を比較するので、一部の言語では正しい結果にならな
いかもしれません。
文字列と数値を比較するときは、文字列を数値に変換します。文字列が数字ではなかっ
たときは 0 になるので注意してください。例:

:if 0 == "one"
: echo "yes"
:endif

これは "yes" と表示されます。"one" は数字ではないので 0 に変換されるのです。

文字列にはさらに二つの論理演算子があります:

a =~ b パターンにマッチする
a !~ b パターンにマッチしない

左辺の "a" は文字列として扱われます。右辺の "b" は検索パターンとして扱われま
す。例:

:if str =~ " "
: echo "str にはスペースが含まれている"
:endif
:if str !~ '\.$'
: echo "str の末尾はピリオドではない"
:endif

パターンを指定するのにシングルクオート文字列を使うのがコツです。ダブルクオート
文字列ではバックスラッシュを二重に書く必要があり、そして、検索パターンではバッ
クスラッシュをよく使うので、バックスラッシュだらけになってしまいます。

文字列を比較するときは 'ignorecase' オプションが使われます。大文字小文字の区別
を明示的に指定したい場合は比較演算子に "#" (区別する) または "?" (区別しない)
をつけます。大文字小文字を区別せずに等しいかどうかを比較したい場合は "==?" を
使います。"!~#" ならパターンにマッチしないことを、大文字と小文字を区別して確認
できます。演算子の一覧は |expr-==| を参照してください。


他のループコマンド
------------------

":while" コマンドは既に説明しました。":while" ループの中では二つのステートメン
トが使えます:

:continue ループの先頭にジャンプしてループを継続する。
:break ":endwhile" までジャンプしてループを脱ける。

例：

:while counter < 40
: call do_something()
: if skip_flag
: continue
: endif
: if finished_flag
: break
: endif
: sleep 50m
:endwhile

":sleep" コマンドは Vim を一定時間停止します。"50m" は 50 ミリ秒です。
":sleep 4" なら 4 秒間スリープします。

":for" コマンドを使ってループすることもできます。|41.8|を参照。

==============================================================================
*41.5* 式を実行する

今まではコマンドを直接書いてきました。":execute" コマンドを使うと、式の評価結
果をコマンドとして実行できます。これによってコマンドを動的に生成することができ
ます。
例えば、変数に格納された文字列を使ってタグジャンプするには次のようにします:

:execute "tag " . tag_name

文字列 "tag " と変数 "tag_name" の値を "." で連結しています。仮に "tag_name"
の値が "get_cmd" だった場合、次のコマンドが実行されることになります:

:tag get_cmd

":execute" コマンドはコロンコマンドのみ実行できます。":normal" コマンドでノー
マルモードコマンドを実行できますが、このコマンドの引数は文字がそのまま使われ、
式としては評価されません。例:

:normal gg=G

このコマンドは一行目にジャンプしてから "=" オペレータですべての行を整形しま
す。
":normal" コマンドで式の値を使いたい場合は ":execute" と組み合わせてください。
例:

:execute "normal " . normal_commands

変数 "normal_commands" にはノーマルモードコマンドを入れておく必要があります。
":normal" には完結したコマンドを指定するようにしてください。引数が最後まで実行
された段階でコマンドは中断されます。例えば、インサートモードを開始した場合はイ
ンサートモードを終了しなくてはなりません。次のコマンドは正しく動作します:

:execute "normal Inew text \<Esc>"

これは現在行に "new text" を挿入します。特殊キー "\<ESC>" を使っていることに注
目してください。これによりスクリプトの中で本物の <Esc> 文字を使わないですみま
す。

文字列を実行するのではなく、その式の値を得たい場合は、eval() 関数を使います:

:let optname = "path"
:let optval = eval('&' . optname)

文字 "&" と "path" を連結しているので eval() の引数は "&path" になります。返り
値は 'path' オプションの値です。
次のようにすることもできます:
:exe 'let optval = &' . optname

==============================================================================
*41.6* 関数を使う

たくさんの関数があらかじめ定義され、豊富な機能が提供されています。このセクショ
ンの説明にもいくつか登場します。関数の一覧は |functions| を参照してください。

関数は ":call" コマンドで呼び出します。引数はカッコで囲み、それぞれをカンマで
区切ります。例:

:call search("Date: ", "W")

これは "Date: " と "W" を引数にして search() 関数を呼び出しています。search()
関数は一つ目の引数を検索パターンとして使い、二つ目の引数をフラグとして使いま
す。"W" フラグを指定するとファイル末尾で検索が終了します (折り返さない)。

関数は式の中で使うこともできます。例:

:let line = getline(".")
:let repl = substitute(line, '\a', "*", "g")
:call setline(".", repl)

getline() 関数はカレントバッファから行を取得する関数です。引数には行番号を指定
します。この例では "." ですが、これはカーソルのある行を示します。
substitute() 関数は ":substitute" コマンドとほぼ同じです。最初の引数は置換対象
の文字列、二つ目の引数はパターン、三つ目は置き換え文字列、最後はフラグです。
setline() 関数は行の内容を置き換えます。最初の引数は行番号、二つ目の引数は置き
換える文字列です。この例では、substitute() の結果で現在行を置き換えています。
上記の三行のコマンドは次のコマンドと同じことをしています:

:substitute/\a/*/g

substitute() コマンドの前後にいろいろな処理を入れたりすると、もっと面白いこと
ができるようになります。


関数一覧 *function-list*
--------

たくさんの関数があります。ここでは機能別に分類して紹介します。アルファベット順
の一覧は |functions| を参照してください。関数の名前の上で CTRL-] を押すと、詳
細な説明にジャンプできます。

文字列繰作:
nr2char() ASCII値から文字を得る
char2nr() 文字のASCII値を得る
str2nr() 文字列を数値に変換する
str2float() 文字列を浮動小数点数に変換する
printf() 書式付き文字列を整形する
escape() 文字列の特定の文字を '\' でエスケープ
shellescape() シェルコマンドで使えるように文字列をエスケープ
fnameescape() Vim コマンド用にファイル名をエスケープ
tr() ある文字の集合から別の文字の集合へ置換する
strtrans() 文字列を印刷可能な状態とする
tolower() 文字列を小文字にする
toupper() 文字列を大文字にする
match() 文字列の中でパターンにマッチした位置
matchend() 文字列の中でパターンにマッチした末尾の位置
matchstr() 文字列の中でパターンにマッチした文字列
matchlist() matchstr()と同様だが、部分マッチも返す
stridx() 文字列の中で部分文字列が見つかった最初の位置
strridx() 文字列の中で部分文字列が見つかった最後の位置
strlen() 文字列の長さ
substitute() パターンにマッチする文字列を置換
submatch() ":substitute" の中で部分マッチを得る
strpart() 文字列の一部分を得る
expand() 特殊キーワードを展開する
iconv() テキストのエンコーディングを変換する
byteidx() 文字列中の文字のバイトインデックス
repeat() 文字列を複数回繰り返す
eval() 文字列を式として評価する

リスト操作:
get() 要素を取得。存在しないインデックスでもエラーを
出さない
len() リスト中の要素の個数
empty() リストが空であるか判定する
insert() リストの任意の位置に要素を挿入する
add() リストに要素を追加する
extend() リストにリストを連結する
remove() リストから1個以上の要素を取り除く
copy() リストの浅いコピーを作成する
deepcopy() リストの完全なコピーを作成する
filter() リストから選択された要素を取り除く
map() リストの各要素を変換する
sort() リストをソートする
reverse() リストの並び順を反転させる
split() 文字列を分割し、リストにする
join() リストの要素を連結し、文字列にする
range() 数列リストを返す
string() リストの文字列表現
call() リストを引数として関数を呼ぶ
index() リスト中の要素のインデックス
max() リスト中の最大値
min() リスト中の最小値
count() ある要素がリスト中に出現する回数を返す
repeat() リストを複数回繰り返す

辞書操作:
get() 辞書の要素を返す。存在しないキーでもエラーを出
さない
len() 辞書の要素の個数
has_key() あるキーが辞書に含まれているか判定する
empty() 辞書が空であるか判定する
remove() 辞書から要素を取り除く
extend() ある辞書の要素をすべて別の辞書に追加する
filter() 辞書から選択された要素を取り除く
map() 辞書の各要素を変換する
keys() 辞書の全キーのリストを取得する
values() 辞書の全値のリストを取得する
items() 辞書の全キー・値のペアを取得する
copy() 辞書の浅いコピーを作成する
deepcopy() 辞書の完全なコピーを作成する
string() 辞書の文字列表現
max() 辞書中の最大値
min() 辞書中の最小値
count() ある値が出現する回数を返す

浮動小数点数の計算:
float2nr() Float を Number に変換
abs() 絶対値 (Numberも処理可能)
round() 丸め
ceil() 切り上げ
floor() 切り下げ
trunc() 少数切り捨て
log10() 10 を底とする対数
pow() x の y 乗
sqrt() 平方根
sin() sine (サイン)
cos() cosine (コサイン)
atan() arc tangent (アークタンジェント)

変数:
type() 変数の型
islocked() 変数がロックされているか判定する
function() 関数名からFuncrefを取得する
getbufvar() 指定バッファの変数値を得る
setbufvar() 指定バッファに変数を設定する
getwinvar() 指定ウィンドウの変数値を得る
gettabwinvar() 指定ウィンドウ・タブページから変数値を取得する
setwinvar() 指定ウィンドウに変数を設定する
settabwinvar() 指定ウィンドウ・タブページに変数を設定する
garbagecollect() 開放可能なメモリを解放する

カーソルとマークの位置:
col() カーソルやマークの列番号を得る
virtcol() カーソルやマークの画面上の列番号を得る
line() カーソルやマークの行番号を得る
wincol() カーソルのウィンドウでの列番号
winline() カーソルのウィンドウでの行番号
cursor() カーソルを指定した位置に移動させる
getpos() カーソルやマークなどの位置を取得する
setpos() カーソルやマークなどの位置を設定する
byte2line() 指定のバイト位置の行番号を得る
line2byte() 指定の行のバイト位置を得る
diff_filler() ある行より上の詰め行の数を取得する

カレントバッファで動作するもの:
getline() バッファから行を得る
setline() バッファの行を置き換える
append() 行または行のリストをバッファに追加する
indent() 行のインデントを得る
cindent() C 言語におけるインデントを得る
lispindent() Lisp 言語におけるインデントを得る
nextnonblank() 次の非空行を探す
prevnonblank() 前の非空行を探す
search() パターンにマッチする場所を探す
searchpos() パターンにマッチする場所を探す
searchpair() start/skip/end の対を探す
searchpairpos() start/skip/end の対を探す
searchdecl() 名前が宣言されている場所を探す

システム関数とファイル繰作:
glob() ワイルドカードを展開する
globpath() 複数のディレクトリを対象にワイルドカードを展開
findfile() 複数のディレクトリからファイルを探す
finddir() 複数のディレクトリからディレクトリを探す
resolve() ショートカットのリンク先を得る
fnamemodify() ファイル名を修飾する
pathshorten() パス中のディレクトリ名を短くする
simplify() パスの意味を変えずに簡略化する
executable() 実行形式ファイルかどうかをチェックする
filereadable() ファイルが読み込み可能かどうかをチェックする
filewritable() ファイルが書き込み可能かどうかをチェックする
getfperm() ファイルのパーミッションを得る
getftype() ファイルの種類を得る
isdirectory() ディレクトリの存在をチェックする
getfsize() ファイルのサイズを得る
getcwd() カレントディレクトリを得る
tempname() 一時ファイルの名前を得る
mkdir() ディレクトリを作成する
delete() ファイルを削除する
rename() ファイルの名前を変更する
system() シェルコマンドを実行し、その結果を得る
hostname() システムの名称を得る
readfile() ファイルを読み込み、行のリストを得る
writefile() 行のリストをファイルに書き込む

日付と時刻:
getftime() ファイルの最終更新日時を得る
localtime() 現在時刻を秒単位で得る
strftime() 時刻を文字列に変換する
reltime() 現在時刻または経過時間を正確に取得する
reltimestr() reltime()の結果を文字列に変換する

バッファ、ウィンドウ、引数リスト:
argc() 引数リストの大きさ
argidx() 引数リスト中の現在の位置
argv() 引数リストの中身を得る
bufexists() バッファの存在をチェックする
buflisted() バッファが存在し、リストされているかどうか
bufloaded() バッファが存在し、ロードされているかどうか
bufname() バッファの名前を得る
bufnr() バッファの番号を得る
tabpagebuflist() タブページ中のバッファのリストを返す
tabpagenr() タブページの番号を取得する
tabpagewinnr() タブページを対象にwinnr()と同様
winnr() カレントウィンドウの番号を得る
bufwinnr() バッファのウィンドウ番号を得る
winbufnr() ウィンドウのバッファ番号を得る
getbufline() バッファの行のリストを得る

コマンドライン:
getcmdline() 現在のコマンドラインを取得
getcmdpos() コマンドラインにおけるカーソル位置を取得
setcmdpos() コマンドラインにおけるカーソル位置を設定
getcmdtype() 現在のコマンドラインの種類を返す

Quickfixとロケーションリスト:
getqflist() quickfixエラーのリスト
setqflist() quickfixを変更する
getloclist() ロケーションリストの項目のリスト
setloclist() ロケーションリストを変更する

インサートモード補完:
complete() 補完候補を設定する
complete_add() 補完候補を追加する
complete_check() 補完処理を終えるべきかどうかをチェックする
pumvisible() ポップアップメニューが表示されているかチェック

折り畳み:
foldclosed() 行が折り畳まれているかどうかをチェックする
foldclosedend() foldclosed()と同様。折り畳み末尾の行番号を返す
foldlevel() 行の折り畳みレベルを得る
foldtext() 閉じた折り畳みを代替表示するテキストを生成
foldtextresult() 閉じた折り畳みを代替表示するテキストを得る

シンタックスハイライト:
clearmatches() |matchadd()|と|:match|コマンドで定義されたマッ
チをクリアする
getmatches() |matchadd()|と|:match|コマンドで定義されたすべ
てのマッチを得る
hlexists() ハイライトグループの存在をチェック
hlID() ハイライトグループのIDを得る
synID() 指定位置のシンタックスIDを得る
synIDattr() シンタックスIDから指定の属性を得る
synIDtrans() 変換したシンタックスIDを得る
diff_hlID() diffモードの指定位置のシンタックスIDを得る
matchadd() 強調表示するパターンを定義する
matcharg() |:match|の引数の情報を得る
matchdelete() |matchadd()|と|:match|コマンドで定義されたマッ
チを削除する
setmatches() |getmatches()|で得たマッチを使って復元する

スペリング:
spellbadword() カーソル位置以降のスペルミスを探す
spellsuggest() スペル訂正の候補を返す
soundfold() 単語の同音等値(sound-a-like equivalent)を返す

履歴:
histadd() 履歴に項目を追加
histdel() 履歴から項目を削除
histget() 履歴の項目を得る
histnr() 履歴リストの最大インデックスを得る

対話インターフェース:
browse() ファイル選択ダイアログを開く
browsedir() ディレクトリ選択ダイアログを開く
confirm() ユーザーに選択をさせる
getchar() ユーザーが入力した文字を得る
getcharmod() 最後に入力した文字の修飾子(modifier)を得る
feedkeys() 先行入力キューに文字を入れる
input() ユーザーが入力した行を得る
inputlist() ユーザーにリストから項目を選択させる
inputsecret() ユーザーが入力した行を得る。ただし表示はしない
inputdialog() ダイアログを使ってユーザーが入力した行を得る
inputsave() 先行入力キューを保存して空にする
inputrestore() inputsave()で保存した状態に戻す

GUI:
getfontname() 現在使われているフォントの名前を取得
getwinposx() GUIのVimウィンドウのX座標
getwinposy() GUIのVimウィンドウのY座標

Vimサーバ:
serverlist() サーバ名のリストを返す
remote_send() Vimサーバにコマンド文字を送る
remote_expr() Vimサーバで式を評価する
server2client() Vimサーバのクライアントに応答を返す
remote_peek() Vimサーバから返信があったかどうかをチェック
remote_read() Vimサーバからの返信を読む
foreground() Vimのウィンドウを前面に持ってくる
remote_foreground() Vimサーバのウィンドウを前面に持ってくる

ウィンドウサイズと位置:
winheight() ウィンドウの高さを取得
winwidth() ウィンドウの幅を取得
winrestcmd() ウィンドウサイズを復元するコマンドを返す
winsaveview() カレントウィンドウのビューを取得
winrestview() カレントウィンドウのビューを復元

その他:
mode() 現在の編集モードを得る
visualmode() 最後に使われたビジュアルモードの種類
hasmapto() マップの存在をチェック
mapcheck() マッチするマップの存在をチェック
maparg() マップのrhs(展開結果)を得る
exists() 変数、関数の存在をチェック
has() 機能がサポートされているかをチェック
changenr() 最近の変更番号を返す
cscope_connection() cscope接続をチェック
did_filetype() FileTypeオートコマンドが使用されたかどうか
eventhandler() イベントハンドラによって起動されたかどうか
getpid() Vim のプロセスIDを得る

libcall() 外部ライブラリの関数を呼ぶ
libcallnr() 同上、数値を返す

getreg() レジスタの値を得る
getregtype() レジスタのタイプを得る
setreg() レジスタの値を設定する

taglist() マッチするタグのリストを取得
tagfiles() タグファイルのリストを取得

==============================================================================
*41.7* 関数を定義する

自分で関数を定義することができます。基本的な関数定義は次のとおり:

:function {name}({var1}, {var2}, ...)
: {body}
:endfunction

Note:
関数名は大文字で開始する必要があります。

小さな関数を定義してみましょう。二つの数値のうち小さい方を返す関数を作ります。
関数は次のような行で始まります:

:function Min(num1, num2)

関数の名前が "Min" であり、二つの引数 ("num1"と"num2") を取る、ということを表
しています。
最初にしなければならないのは、どちらの数値が小さいかをチェックすることです:

: if a:num1 < a:num2

"a:" は特殊なプレフィクスで、この変数が関数の引数であることを示します。小さい
方の値を変数 "smaller" に代入しましょう:

: if a:num1 < a:num2
: let smaller = a:num1
: else
: let smaller = a:num2
: endif

変数 "smaller" はローカル変数です。関数の中で使われた変数はローカル変数になり
ます。ただし、"g:"、"a:"、"s:" などのプレフィクスを付けた場合は別です。

Note:
関数の内からグローバル変数にアクセスするには "g:" を付ける必要がありま
す。つまり、関数内では "g:today" はグローバル変数 "today" を示し、
"today" ならそれとは別の変数、すなわちローカル変数になります。

":return" ステートメントを使って、小さい方の値を呼び出し元に返しましょう。そし
て、関数を閉じます:

: return smaller
:endfunction

関数定義の全体は次のようになります:

:function Min(num1, num2)
: if a:num1 < a:num2
: let smaller = a:num1
: else
: let smaller = a:num2
: endif
: return smaller
:endfunction

関数を短く書きたい場合は、次のようにもできます:

:function Min(num1, num2)
: if a:num1 < a:num2
: return a:num1
: endif
: return a:num2
:endfunction

ユーザー定義関数は組み込み関数とまったく同じ方法で呼び出すことができます。違う
のは名前だけです。Min 関数は次のように使用できます:

:echo Min(5, 8)

関数が実行され、関数の中身が Vim によって解釈されます。未定義の変数や関数を使
うなどの間違いがあったときは、エラーメッセージが表示されます。関数定義の時点で
はそれらのエラーは検出されません。

関数が ":endfunction" まで実行されたとき、あるいは引数無しで ":return" を使っ
たときは 0 が返ります。

既存の関数を再定義したい場合は ":function" コマンドに "!" を付けてください:

:function! Min(num1, num2, num3)


範囲指定を使う
--------------

":call" コマンドは行範囲を受け取ることができます。範囲指定の使用方法は二つあり
ます。関数を定義するときに "range" キーワードを使った場合は、関数自身が範囲指
定を処理します。
関数には "a:firstline" と "a:lastline" という二つの変数が暗黙的に渡されます。
この二つの変数には範囲指定された行番号が代入されています。例:

:function Count_words() range
: let lnum = a:firstline
: let n = 0
: while lnum <= a:lastline
: let n = n + len(split(getline(lnum)))
: let lnum = lnum + 1
: endwhile
: echo "found " . n . " words"
:endfunction

この関数は次のように呼び出すことができます:

:10,30call Count_words()

関数が一度だけ実行され、単語の数が表示されます。
関数を定義するときに "range" キーワードを使わなかった場合は、指定された範囲の
それぞれの行に対して関数が呼ばれます (カーソルはその行の上)。例:

:function Number()
: echo "line " . line(".") . " contains: " . getline(".")
:endfunction

次のように実行すると:

:10,15call Number()

関数は 6 回実行されます。


可変長引数
----------

可変個の引数を取る関数を定義できます。例えば、次の関数は、必ず 1 つの引数
(start) を取り、最大で 20 個までの引数を取ることができます:

:function Show(start, ...)

変数 "a:1" に 1 つ目のオプション引数が代入されます。2 つ目が "a:2" で、3 つ目
が "a:3" です。"a:0" にはオプション引数の数が入ります。
例:

:function Show(start, ...)
: echohl Title
: echo "Show is " . a:start
: echohl None
: let index = 1
: while index <= a:0
: echon " Arg " . index . " is " . a:{index}
: let index = index + 1
: endwhile
: echo ""
:endfunction

この関数は ":echohl" を使って ":echo" の出力に色を付けています。":echohl None"
で色付けをやめます。":echon" コマンドは ":echo" と同じ機能ですが、改行を出力し
ません。

変数 a:000 を使うこともできます。これは "..." 引数がすべて入ったリストです。
|a:000|を参照。


関数の一覧
----------

":function" コマンドでユーザー定義関数の一覧を表示できます:

:function
function Show(start, ...)
function GetVimIndent()
function SetSyn(name)

関数の中身を見たいときは関数名を指定してください:

:function SetSyn
1 if &syntax == ''
2 let &syntax = a:name
3 endif
endfunction


デバッグ
--------

エラーメッセージが表示されたとき、あるいはデバッグ中に、行番号が表示されると便
利です。デバッグモードについては |debug-scripts| を参照してください。
'verbose' オプションに 12 以上の値を設定すると、すべての関数呼び出しが表示され
ます。15 以上にすると、実行されたすべての行が表示されます。


関数の削除
----------

例えば Show() 関数を削除するのは次のようにします:

:delfunction Show

関数が存在しない場合はエラーになります。


関数への参照
------------

変数に関数を代入できると便利なことがあります。それには function() 関数を使いま
す。function() は関数の名前を受け取り、関数への参照を返します:

:let result = 0 " or 1
:function! Right()
: return 'Right!'
:endfunc
:function! Wrong()
: return 'Wrong!'
:endfunc
:
:if result == 1
: let Afunc = function('Right')
:else
: let Afunc = function('Wrong')
:endif
:echo call(Afunc, [])
Wrong!

Note 関数への参照を保持する変数の名前は大文字で始めなければなりません。そうで
ないと組み込み関数の名前と紛らわしくなります。
変数が参照している関数を呼び出すには call() 関数を使います。call() 関数の最初
の引数は関数への参照で、2 番目の引数は引数のリストです。

関数への参照は、次節で説明される辞書と組み合わせたときもっとも役に立ちます。

==============================================================================
*41.8* リストと辞書

ここまでは基本型(文字列と数値)を扱ってきました。Vim は二つの複合型、リストと辞
書もサポートしています。

リストとは、要素を順番に並べたものです。要素はどのような型でも構いません。数値
のリスト、リストのリスト、あるいは複数の型が混在したリストでも作れます。例え
ば、3 個の文字列からなるリストを作るには次のようにします:

:let alist = ['aap', 'mies', 'noot']

リストの要素は角括弧で囲み、コンマで区切ります。空のリストを作るには次のように
します:

:let alist = []

関数add()を使うとリストに要素を追加することができます:

:let alist = []
:call add(alist, 'foo')
:call add(alist, 'bar')
:echo alist
['foo', 'bar']

リストの連結には + を使います:

:echo alist + ['foo', 'bar']
['foo', 'bar', 'foo', 'bar']

直接リストを拡張するには次のようにします:

:let alist = ['one']
:call extend(alist, ['two', 'three'])
:echo alist
['one', 'two', 'three']

add()とは効果が異なることに注意してください:

:let alist = ['one']
:call add(alist, ['two', 'three'])
:echo alist
['one', ['two', 'three']]

add()の第二引数は1つの要素として追加されます。


FOR ループ
----------

リストを使ってできる素晴らしいことの1つが、リストに対する繰り返しです:

:let alist = ['one', 'two', 'three']
:for n in alist
: echo n
:endfor
one
two
three

上の例は、リスト"alist"の各要素に対して、その値を変数"n"に代入しながらループを
行います。forループの書式は次の通りです:

:for {varname} in {listexpression}
: {commands}
:endfor

ある回数だけループするには、その長さのリストを使います。関数range()を使うと、
そのようなリストを作成できます:

:for a in range(3)
: echo a
:endfor
0
1
2

range()が生成するリストの最初の要素は0であることに注意してください。そのため、
最後の要素はリストの長さより1小さい値になります。
最大値、ステップ幅を指定することもでき、逆方向に進むこともできます:

:for a in range(8, 4, -2)
: echo a
:endfor
8
6
4

より有用な例として、バッファ中の行に対するループ:

:for line in getline(1, 20)
: if line =~ "Date: "
: echo matchstr(line, 'Date: \zs.*')
: endif
:endfor

1行目から20行目(両端を含む)を調べ、そこに含まれる日付を全て表示しています。


辞書
-----

辞書はキーと値のペアを保持します。キーを指定することで高速に値を検索できます。
辞書は波括弧で作ります:

:let uk2nl = {'one': 'een', 'two': 'twee', 'three': 'drie'}

そして角括弧の中にキーを書くことで単語を検索します:

:echo uk2nl['two']
twee

辞書の定義の書式は次の通りです:

{<key> : <value>, ...}

空の辞書とは、どんなキーも持たない辞書のことです:

{}

辞書にはいろいろな使い道があります。辞書を扱う関数もたくさんあります。例えば、
キーのリストを取得してそれに対してループするには次のようにします:

:for key in keys(uk2nl)
: echo key
:endfor
three
one
two

キーはソートされていません。特定の順序に並べるにはリストをソートします:

:for key in sort(keys(uk2nl))
: echo key
:endfor
one
three
two

要素が定義された順序を得ることはできません。そのような目的にはリストを使ってく
ださい。リストは順序を保って要素を保持します。


辞書の関数
----------

辞書の要素は角括弧でインデックスを指定して取得します:

:echo uk2nl['one']
een

記号を使わない方法もあります:

:echo uk2nl.one
een

この方法はキーがアルファベット、数字、アンダースコアなどの ASCII 文字だけで構
成されている場合に使えます。この方法で値を代入することもできます:

:let uk2nl.four = 'vier'
:echo uk2nl
{'three': 'drie', 'four': 'vier', 'one': 'een', 'two': 'twee'}

関数の定義と辞書への代入を同時に記述することができます:

:function uk2nl.translate(line) dict
: return join(map(split(a:line), 'get(self, v:val, "???")'))
:endfunction

これを実行してみましょう:

:echo uk2nl.translate('three two five one')
drie twee ??? een

":function" の行の末尾に "dict" と書かれています。これは、その関数が辞書から使
われることを示します。ローカル変数 "self" がその辞書を指すようになります。
次に、複雑なreturnコマンドを分解してみましょう:

split(a:line)

関数split()は文字列を空白文字で区切り、リストにして返します。そのため、この例
での戻り値は次のようになります:

:echo split('three two five one')
['three', 'two', 'five', 'one']

このリストがmap()関数の第一引数になります。map()はリストの各要素を "v:val" に
代入した状態で第二引数を評価します。これによりforループより短いコードが書けま
す。このコードは:

:let alist = map(split(a:line), 'get(self, v:val, "???")')

次のコードと同じです:

:let alist = split(a:line)
:for idx in range(len(alist))
: let alist[idx] = get(self, alist[idx], "???")
:endfor

関数get()はそのキーが辞書に入っているかをチェックします。入っていればその値を
返します。入っていなければデフォルト値(この例では'???')を返します。キーが入っ
ていなくてもエラーを起こしたくないような場合に便利です。

関数join()はsplit()の逆の処理をします。つまり単語のリストをスペースでつなげま
す。
split()、map()、join() を組み合わせると、単語からなる行を簡潔に処理することが
できます。


オブジェクト指向プログラミング
------------------------------

辞書には値と関数を入れることができるので、辞書をオブジェクトとして使うことがで
きます。
上述の例ではオランダ語から英語に翻訳するために辞書を使いました。同じことが他の
言語でもできると面白いかもしれませんね。まず翻訳関数を持ったオブジェクト (つま
り辞書) を作ります。翻訳する単語はまだ定義しません:

:let transdict = {}
:function transdict.translate(line) dict
: return join(map(split(a:line), 'get(self.words, v:val, "???")'))
:endfunction

単語を翻訳するのに 'self.words' を使う点が上述の例と少し違います。しかし、
self.words はまだありません。よって、これは抽象クラスと呼ぶことができます。

オランダ語を翻訳するオブジェクトをインスタンス化してみましょう:

:let uk2nl = copy(transdict)
:let uk2nl.words = {'one': 'een', 'two': 'twee', 'three': 'drie'}
:echo uk2nl.translate('three one')
drie een

さらにドイツ語の翻訳機を作ります:

:let uk2de = copy(transdict)
:let uk2de.words = {'one': 'ein', 'two': 'zwei', 'three': 'drei'}
:echo uk2de.translate('three one')
drei ein

copy() 関数を使って "transdict" 辞書をコピーし、そのコピーに対して単語を追加し
ています。元の辞書はもちろん変更されません。

さらに一歩進んで、適切な言語を選択できるようにしてみます:

:if $LANG =~ "de"
: let trans = uk2de
:else
: let trans = uk2nl
:endif
:echo trans.translate('one two three')
een twee drie

"trans"は2つのオブジェクト(辞書)のうちどちらか1つを参照します。コピーは作られ
ていません。リストと辞書の同一性についてのより詳しい情報は|list-identity|と
|dict-identity|にあります。

未対応の言語を使う場合は、translate() 関数を上書きして何もしないようにするとい
いかもしれません:

:let uk2uk = copy(transdict)
:function! uk2uk.translate(line)
: return a:line
:endfunction
:echo uk2uk.translate('three one wladiwostok')
three one wladiwostok

! を使って既に存在している関数への参照を上書きしています。続いて、未対応の言語
に対して "uk2uk" を使うように変更します:

:if $LANG =~ "de"
: let trans = uk2de
:elseif $LANG =~ "nl"
: let trans = uk2nl
:else
: let trans = uk2uk
:endif
:echo trans.translate('one two three')
one two three

さらなる情報については|List|と|Dictionaries|を参照してください。

==============================================================================
*41.9* 例外

まずは例題を見てください:

:try
: read ~/templates/pascal.tmpl
:catch /E484:/
: echo "パスカル用のテンプレートファイルは見つかりませんでした。"
:endtry

":read" コマンドはファイルがなければ失敗します。そのエラーをキャッチして、エ
ラーメッセージの代わりにより親切なメッセージを表示しています。

":try" と ":endtry" の間で起きたエラーは例外に変わります。例外は文字列です。エ
ラーが例外に変わったとき、文字列にはエラーメッセージが含まれます。また、全ての
エラーメッセージは番号を持っています。例題では "E484:" を含んだエラーをキャッ
チしています。この番号は変わらないことが保証されています (テキストは翻訳される
などして変わるかもしれません)。

":read" コマンドが他のエラーを起こした場合、"E484:" というパターンはマッチしな
いでしょう。したがって、その例外はキャッチされず、通常のエラーメッセージが表示
されます。

次のように書くこともできます:

:try
: read ~/templates/pascal.tmpl
:catch
: echo "パスカル用のテンプレートファイルは見つかりませんでした。"
:endtry

全ての例外がキャッチされます。しかしこれでは "E21: Cannot make changes,
'modifiable' is off" のような有効なエラーに気づくことができません。

":finally" という便利なコマンドもあります:

:let tmp = tempname()
:try
: exe ".,$write " . tmp
: exe "!filter " . tmp
: .,$delete
: exe "$read " . tmp
:finally
: call delete(tmp)
:endtry

カーソル行からファイル末尾までを "filter" コマンド (ファイル名を引数に取るコマ
ンド) でフィルタ処理しています。":try" と ":finally" の間で問題が起きても、
ユーザーが CTRL-C を押して操作をキャンセルしても、"call delete(tmp)" は必ず呼
ばれます。一時ファイルが残ってしまう心配はありません。

例外についてさらに詳しい情報はリファレンスマニュアルの|exception-handling|を
参照してください。

==============================================================================
*41.10* 注意事項

Vim スクリプトにおいて注意すべきことの概要を簡単に説明します。他の場所にも同じ
ような説明はありますが、手頃なチェックリストに使えるでしょう。

改行記号はシステムによって異なります。Unix では <NL> 文字が使われますが、
MS-DOS 、Windows、OS/2 などでは <CR><LF> が使われます。末尾が <CR> になってい
るマップを使うときは注意してください。|:source_crnl| 参照。


空白
-----

空の行はあっても構いません。無視されます。

行頭の空白 (スペースとTAB) は常に無視されます。引数と引数の間には空白がいくつ
あっても構いません (例えば下記の 'set' と 'cpoptions' の間) 。空白は一つのス
ペースにまとめられ、セパレータの役目をします。最後の文字より後ろにある空白文字
は状況によって無視されたりされなかったりします。下記参照。

":set" コマンドで "=" 記号を使うとき:

:set cpoptions =aABceFst

"=" の直前にある空白は無視されます。しかし、"=" の後ろに空白をはさむことはでき
ません。

オプション値に空白を含めるときは、バックスラッシュ ("\") でエスケープする必要
があります:

:set tags=my\ nice\ file

次のように書くと:

:set tags=my nice file

これはエラーになります。このコマンドは次のように解釈されてしまいます:

:set tags=my
:set nice
:set file


コメント
--------

コメントは " (ダブルクオート) 記号で開始します。行末までのすべての文字がコメン
トとして解釈され、無視されます。ただし、コメントを書くことができないコマンドも
あります (以下に例を示します)。コメントは行のどこからでも開始できます。

コメントとして簡単な注釈を付けたとします。例:

:abbrev dev development " shorthand
:map <F3> o#include " insert include
:execute cmd " do it
:!ls *.c " list C files

短縮形 'dev' は 'development " shorthand' に展開されます。<F3> には 'o#
....' から '" insert include' までの全部がマップされます。"execute" コマンドは
エラーを起こします。"!" コマンドはすべての文字をシェルに渡すので、" 記号が閉じ
られていないことでエラーが起こります。
":map"、":abbreviate"、":execute"、"!" などのコマンドはその後ろにコメントを書
くことができません (そのようなコマンドは他にもあります)。ただし、無理やりコメ
ントを書く方法もあります:

:abbrev dev development|" shorthand
:map <F3> o#include|" insert include
:execute cmd |" do it

'|' 文字でコマンドを区切り、次のコマンドを書くことができます。この例では二つ目
のコマンドはコメントのみです。"!" の場合は |:execute| と '|' を使わなければな
りません:
:exe '!ls *.c' |" list C files

":map" と ":abbreviate" の場合は '|' の前に空白を置かないように注意してくださ
い。これらのコマンドは行末か '|' までのすべての文字を使います。そのため、意図
せずに末尾に空白を入れてしまうかもしれません:

:map <F4> o#include

vimrc を編集するときに 'list' オプションをオンに設定しておくと、この問題が発見
しやすくなります。

Unix では特別なコメント書式を使って Vim スクリプトを実行形式にすることができま
す:
#!/usr/bin/env vim -S
echo "this is a Vim script"
quit

"#" コマンドは行を行番号付きで表示しますが、'!' をつけると何もしなくなります。
よってファイルを実行するためのシェルコマンドを記述することができます。
|:#!| |-S|


落とし穴
--------

次の例には大きな問題があります:

:map ,ab o#include
:unmap ,ab

この unmap コマンドはうまく動きません。なぜなら ",ab " を unmap しようとしてい
るからです。そのようなマップは存在しません。エラーが表示されますが、スペースは
目に見えないので、エラーの原因を見つけるのは困難です。

":unmap" コマンドの後にコメントを書いた場合も同様です:

:unmap ,ab " comment

コメントは無視されますが、Vim は ',ab ' を unmap しようとします。次のよう
に書いてください:

:unmap ,ab| " comment


ビューの復元
------------

何らかの変更を加えてから、カーソルのあった場所に戻りたい時があります。そのとき
に、画面に表示されていた行範囲も復元されるとすてきです。
次の例は、現在行をヤンクしてファイルの先頭にプットし、ビューを復元します:

map ,p ma"aYHmbgg"aP`bzt`a

これは次のことをしています:
ma"aYHmbgg"aP`bzt`a
ma 現在のカーソル位置にマーク a を設定
"aY 現在行をレジスタ a にヤンク
Hmb ウィンドウの一行目に移動してマーク b を設定
gg ファイルの一行目に移動
"aP ヤンクした行をその上にプット
`b ウィンドウの一行目に戻る
zt ウィンドウの表示範囲を以前と同じにする
`a 保存しておいたカーソル位置に移動


パッケージング
--------------

関数の名前が他の人の関数とかぶらないように、次の方法を使ってください:
- ユニークな文字列を名前の前に付ける。私はよく略語を使います。例えば、オプショ
ンウィンドウ (option window) のための関数なら "OW_" などです。
- 関数を一つのファイルにまとめて、関数がロードされているかどうかを示すグローバ
ル変数を設定する。ファイルが二回目に読み込まれたとき、最初にそれらの関数をア
ンロードする。
例:

" This is the XXX package

if exists("XXX_loaded")
delfun XXX_one
delfun XXX_two
endif

function XXX_one(a)
... body of function ...
endfun

function XXX_two(b)
... body of function ...
endfun

let XXX_loaded = 1

==============================================================================
*41.11* プラグインを書く *write-plugin*

Vim スクリプトを書いて、それを多くの人に使ってもらうことができます。そのような
スクリプトはプラグインと呼ばれます。Vim ユーザーはあなたのスクリプトをプラグイ
ンディレクトリにコピーするだけで、すぐにその機能を使うことができます。
|add-plugin| 参照。

プラグインには二種類あります:

グローバルプラグイン : すべてのファイルで共通
ファイルタイププラグイン : ファイルの種類別

この節ではグローバルプラグインについて説明します。ほとんどの説明はファイルタイ
ププラグインに対してもあてはまります。ファイルタイププラグイン特有の説明は次節
にあります |write-filetype-plugin|。


名前
-----

最初にプラグインの名前を決めなければなりません。プラグインが提供する機能が名前
から分かるようにしてください。また、他の人が作ったプラグインと名前がかぶらない
ようにしてください。古い Windows システムでの問題を避けるため、名前は 8 文字以
内にしてください。

例えばタイプミス (type mistake) を修正 (correct) するためのスクリプトなら
"typecorr.vim" という名前を付けたりします。ここではこれを例題として使います。

プラグインが誰でも使えるようにするため、いくつかのガイドラインに従ってくださ
い。ガイドラインは段階的に説明していきます。例題プラグインの完全なソースは最後
に示します。


ボディ
------

まずはプラグインの本体部分を見てみましょう。行番号は実際の番号です:

14 iabbrev teh the
15 iabbrev otehr other
16 iabbrev wnat want
17 iabbrev synchronisation
18 \ synchronization
19 let s:count = 4

もちろん、実際のスクリプトはもっと巨大です。

行番号は説明のために追加したものです。プラグインを書くときは行番号を付けないで
ください。


へッダ
------

新しい単語を追加していくと、プラグインには複数のバージョンが存在することになり
ます。ファイルを配布したとき、それを使った人は、誰がこの素晴らしいプラグインを
書いたのかを知りたいと思うでしょうし、感想を伝えたいと思うかもしれません。
というわけで、次のようなヘッダをプラグインに書いてください:

1 " Vim global plugin for correcting typing mistakes
2 " Last Change: 2000 Oct 15
3 " Maintainer: Bram Moolenaar <Bram@vim.org>

著作権とライセンスについて: プラグインがとても便利で、そして再配布を制限するほ
どのものでない場合は、パブリックドメインか Vim ライセンス (|license|) の適用を
検討してみてください。次の短い宣言をプラグインの先頭付近に書いておくだけで十分
です:

4 " License: This file is placed in the public domain.


行連結、副作用の回避 *use-cpo-save*
--------------------

上の例の 18 行目では行連結 (|line-continuation|) が使われています。ユーザーの
環境で 'compatible' オプションがオンに設定されていると、この行でエラーが発生し
ます。'compatible' オプションの設定には副作用があるので、勝手に設定をオフにす
ることはできません。問題を避けるには、一時的に 'cpoptions' の値を Vim の初期値
に設定し、後で元に戻します。そうすれば、行連結を使うことができ、スクリプトはほ
とんどの環境で動作するようになります。設定の変更は次のようにします:

11 let s:save_cpo = &cpo
12 set cpo&vim
..
42 let &cpo = s:save_cpo

最初に 'cpoptions' の値を s:save_cpo 変数に保存します。プラグインの最後でオプ
ションの値を元に戻します。

スクリプトローカル変数 (|s:var|) を使っていることに注目してください。グローバ
ル変数は他の場所で使われている可能性があります。スクリプトの中だけで使う場合は
スクリプトローカル変数を使ってください。


ロードしない
------------

ユーザーが常にプラグインをロードしたいと思うとは限りません。また、システム管理
者がシステムのプラグインディレクトリにプラグインを入れたが、ユーザーは自分で入
れたプラグインを使いたいということもあります。したがって、指定したプラグインだ
けを無効にできる必要があります。次のようにします:

6 if exists("loaded_typecorr")
7 finish
8 endif
9 let loaded_typecorr = 1

これはスクリプトの二重ロードを避ける効果もあります。スクリプトを二重にロードす
ると、関数の再定義エラーが発生したり、自動コマンドが二重に追加されることでトラ
ブルが起きたりします。


マップ
------

さて、プラグインをもっと魅力あるものに仕上げましょう。マップを追加して、カーソ
ルの下の単語に対する修正を追加できるようにします。単純にキーを選んでマップを設
定することもできますが、そのキーは既にユーザーが使っているかもしれません。マッ
プに使用するキーをユーザーが選択できるようにするには、<Leader> を使います:

22 map <unique> <Leader>a <Plug>TypecorrAdd

"<Plug>TypecorrAdd" は目的の動作をします。詳しくは後で説明します。

使用したいキーを "mapleader" 変数に設定することで、マップの最初のキーを設定で
きます。例えば、次のように設定すると:

let mapleader = "_"

マップは "_a" と定義されます。変数が設定されていない場合は初期設定 (バックス
ラッシュ) が使われます。つまり "\a" というマップが定義されます。

Note: 上記のコマンドでは <unique> が使われています。これは、同じマップが既に定
義されていた場合にエラーを表示します。|:map-<unique>|

マップするキーをユーザーが自分で定義できるようにするには、次のようにします:

21 if !hasmapto('<Plug>TypecorrAdd')
22 map <unique> <Leader>a <Plug>TypecorrAdd
23 endif

"<Plug>TypecorrAdd" に対するマップが既にあるかどうかを調べ、無い場合のみ
"<Leader>a" にマップを定義します。ユーザーは自分の vimrc ファイルの中でマップ
を定義することができます:

map ,c <Plug>TypecorrAdd

すると、マップのキーとして ",c" が使われます。"_a" や "\a" は使われません。


ピース
------

スクリプトが大きくなると、それを部品ごとに分けたくなります。それには関数やマッ
プを使います。しかし、そうすると関数やマップが他のスクリプトのものと衝突する可
能性があります。例えば、Add() という関数を追加したとき、他のスクリプトでも同じ
名前の関数が定義されているかもしれません。そのような場合は、名前の前に "s:" を
付けて、スクリプトの中だけで使える関数を定義します。

新しい修正を追加するための関数を定義します:

30 function s:Add(from, correct)
31 let to = input("type the correction for " . a:from . ": ")
32 exe ":iabbrev " . a:from . " " . to
..
36 endfunction

s:Add() 関数は同じスクリプトの中から呼び出すことができます。他のスクリプトが
s:Add() を定義していた場合、それはそのスクリプトにローカルであり、関数が定義さ
れたスクリプトの中からのみ呼び出すことができます。さらにグローバルの Add() 関
数 ("s:"無し) を定義することもでき、それはまた別の関数になります。

マップ定義では <SID> が使えます。これは、現在のスクリプトを識別するためのスク
リプト ID を生成します。私たちの入力修正プラグインでは <SID> を次のように使い
ます:

24 noremap <unique> <script> <Plug>TypecorrAdd <SID>Add
..
28 noremap <SID>Add :call <SID>Add(expand("<cword>"), 1)<CR>

ユーザーが "\a" と入力すると、次の手順でキー入力が呼び出されます:

\a -> <Plug>TypecorrAdd -> <SID>Add -> :call <SID>Add()

他のスクリプトで <SID>Add をマップすると、別のスクリプト ID が使われ、別のマッ
プが生成されます。

Note: s:Add() ではなく <SID>Add() と書いていることに注意してください。マップは
スクリプトの外側でユーザーが入力するものだからです。<SID> はスクリプト ID に変
換され、どのスクリプトの Add() 関数を呼べばいいのかわかるようになっています。

これは少し複雑ですが、複数のプラグインを同時に使用するためには必要なことです。
基本的なルールとしては、マップの中では <SID>Add() を使い、他の場所 (スクリプト
の中、自動コマンド、ユーザー定義コマンド) では s:Add() を使います。

マップと同じ方法で、メニューを追加することもできます:

26 noremenu <script> Plugin.Add\ Correction <SID>Add

プラグインのメニューを追加する場合は "Plugin" メニューの下に登録することが推奨
されています。この例ではメニューが一つだけですが、複数のメニューを追加する場合
は、サブメニューの使用が推奨されています。例えば、"Plugin.CVS" 以下に
"Plugin.CVS.checkin" や "Plugin.CVS.checkout" などの CVS の操作を登録します。

Note: 28 行目では ":noremap" を使って、他のマップでトラブルが起きないようにし
ています。例えば、誰かが ":call" をマップしているかもしれないからです。24 行目
でも ":noremap" を使っていますが、ここでは "<SID>Add" を再マップして欲しいの
で、"<script>" を使っています。これを使うとスクリプトローカルなマップだけが再
マップされます |:map-<script>|。26 行目でも ":noremenu" で同様のことをしていま
す |:menu-<script>|。


<SID> と <Plug> *using-<Plug>*
---------------

<SID> と <Plug> は、入力したキーに対するマップと、他のマップの中だけで使われる
マップが干渉しないようにするために使われます。<SID> と <Plug> の違いに注意して
ください:

<Plug> これはスクリプトの外側からも見えます。ユーザーが自分でプラグインの機能
をマップできるようにするような場合に使います。<Plug> は特殊なコード
で、キーボードから入力されることはありません。
キー列が他のプラグインとかぶらないように、<Plug> スクリプト名 マップ
名、という形式で使ってください。
我々の例では、スクリプト名が "Typecorr"、マップ名が "Add" なので、
"<Plug>TypecorrAdd" というキー列になります。スクリプト名とマップ名の最
初の文字だけを大文字にして、どこがマップ名なのかわかるようにします。

<SID> これはスクリプト ID (スクリプト固有の識別子) です。
Vim は内部で <SID> を "<SNR>123_" に変換します ("123"の部分はいろいろ
な数字が入ります)。つまり、関数 "<SID>Add()" は、あるスクリプトでは
"<SNR>11_Add()" という名前になり、別のスクリプトでは "<SNR>22_Add()"
になります。これは ":function" コマンドで関数一覧を表示すると確認する
ことができます。<SID> の変換はマップの中でも同様におこなわれるので、
マップの中からスクリプトローカル関数を呼び出すことができます。


ユーザ定義コマンド
------------------

修正を追加するためのユーザー定義コマンドを追加します:

38 if !exists(":Correct")
39 command -nargs=1 Correct :call s:Add(<q-args>, 0)
40 endif

ユーザー定義コマンドは、同じ名前のコマンドがまだない場合のみ定義できます。既に
定義されている場合はエラーになります。":command!" を使ってユーザー定義関数を上
書きするのは良いアイデアとは言えません。ユーザーは、自分が定義したコマンドがな
ぜ動かないのか不思議に思うでしょう。|:command|


スクリプト変数
--------------

先頭に "s:" が付いた変数はスクリプト変数です。これはスクリプトの中だけで使えま
す。スクリプトの外からは見えません。同じ名前の変数を複数のスクリプトで使ってし
まうようなトラブルを避けることができます。Vim が実行されている間、変数は保持さ
れます。そして、同じスクリプトが再読み込みされると、再び同じ変数が使われます。
|s:var|

スクリプト変数は、同じスクリプトの中で定義された関数、自動コマンド、ユーザー定
義コマンドでも使えます。我々の例に、修正の数を数えるための数行のコードを追加し
ます:

19 let s:count = 4
..
30 function s:Add(from, correct)
..
34 let s:count = s:count + 1
35 echo s:count . " corrections now"
36 endfunction

最初に s:count はスクリプトの中で 4 で初期化されます。その後、s:Add() 関数が呼
び出されると、s:count が増加します。関数がどこから呼ばれたかに関わらず、関数が
定義されたスクリプトのローカル変数が使われます。


まとめ
------

例題の完成形は以下のようになります:

1 " Vim global plugin for correcting typing mistakes
2 " Last Change: 2000 Oct 15
3 " Maintainer: Bram Moolenaar <Bram@vim.org>
4 " License: This file is placed in the public domain.
5
6 if exists("loaded_typecorr")
7 finish
8 endif
9 let loaded_typecorr = 1
10
11 let s:save_cpo = &cpo
12 set cpo&vim
13
14 iabbrev teh the
15 iabbrev otehr other
16 iabbrev wnat want
17 iabbrev synchronisation
18 \ synchronization
19 let s:count = 4
20
21 if !hasmapto('<Plug>TypecorrAdd')
22 map <unique> <Leader>a <Plug>TypecorrAdd
23 endif
24 noremap <unique> <script> <Plug>TypecorrAdd <SID>Add
25
26 noremenu <script> Plugin.Add\ Correction <SID>Add
27
28 noremap <SID>Add :call <SID>Add(expand("<cword>"), 1)<CR>
29
30 function s:Add(from, correct)
31 let to = input("type the correction for " . a:from . ": ")
32 exe ":iabbrev " . a:from . " " . to
33 if a:correct | exe "normal viws\<C-R>\" \b\e" | endif
34 let s:count = s:count + 1
35 echo s:count . " corrections now"
36 endfunction
37
38 if !exists(":Correct")
39 command -nargs=1 Correct :call s:Add(<q-args>, 0)
40 endif
41
42 let &cpo = s:save_cpo

33 行目は説明がまだでした。これは、新しい修正をカーソルの下の単語に適用しま
す。|:normal| コマンドを使って新しい略語を適用しています。Note: マップと略語は
その場で展開されます。":noremap" で定義されたマップから関数が呼び出されたとし
ても動作は同じです。

'fileformat' オプションを "unix" に設定することが推奨されています。そうすれ
ば、Vim スクリプトはどこでも動作します。'fileformat' が "dos" に設定されたスク
リプトは Unix では動作しません。|:source_crnl| も参照。設定が正しいことを確実
にするため、ファイルを保存する前に次のコマンドを実行してください:

:set fileformat=unix


ドキュメント *write-local-help*
------------

プラグインのドキュメントを書くのは良いアイデアです。ユーザーが動作を変更できる
ような場合には特に重要です。|add-local-help| ではどのようにしてドキュメントが
インストールされるか説明されています。

プラグインヘルプファイルの例を示します ("typecorr.txt"):

1 *typecorr.txt* Plugin for correcting typing mistakes
2
3 If you make typing mistakes, this plugin will have them corrected
4 automatically.
5
6 There are currently only a few corrections. Add your own if you like.
7
8 Mappings:
9 <Leader>a or <Plug>TypecorrAdd
10 Add a correction for the word under the cursor.
11
12 Commands:
13 :Correct {word}
14 Add a correction for {word}.
15
16 *typecorr-settings*
17 This plugin doesn't have any settings.

書式に気をつけなければならないのは一行目だけです。一行目はコピーされ、help.txt
の "LOCAL ADDITIONS:" の項に埋め込まれます |local-additions|。最初の "*" は一
行目の一桁目に書いてください。ヘルプを追加したら ":help" を実行して項目が追加
されたことを確認してください。

ヘルプの中で ** で文字を囲むとタグを追加することができます。ただし、既存のヘル
プタグと同じものを使わないでください。"typecorr-settings" のように、プラグイン
の名前を使ってタグを作るといいかもしれません。

ヘルプの他の部分を参照するときは || で囲みます。そうすれば、ユーザーは簡単にヘ
ルプの関連した部分を参照することができます。


ファイルタイプの認識 *plugin-filetype*
--------------------

ファイルタイプが Vim によって認識されない場合は、別ファイルにファイルタイプを
認識するためにコードを作成する必要があります。通常は、自動コマンドを使って、
ファイル名がパターンにマッチしたときにファイルタイプを設定します。例:

au BufNewFile,BufRead *.foo set filetype=foofoo

この一行を 'runtimepath' の最初のディレクトリの "ftdetect/foofoo.vim" に書き
込みます。例えば、Unix なら "~/.vim/ftdetect/foofoo.vim" などです。ファイルタ
イプとスクリプトファイルの名前を同じにする決まりになっています。

必要ならより複雑な処理をすることもできます。例えば、ファイルの中身を見て言語を
判定したりできます。|new-filetype| も参照。


要約 *plugin-special*
-----

プラグインで使用する特有事項の要約を示します:

s:name スクリプトローカル変数。

<SID> スクリプトID。マップや関数をスクリプトローカルにする
のに使う。

hasmapto() スクリプトが提供している機能に対して、ユーザーが既に
マップを定義したかどうかをチェックする関数。

<Leader> "mapleader" の値。ユーザーがその変数にキーを設定するこ
とで、プラグインのマップの開始キーを指定できる。

:map <unique> マップが既に定義されているなら警告を発する。

:noremap <script> スクリプトローカルマップだけを使う。グローバルマップは
使わない。

exists(":Cmd") ユーザー定義コマンドが既にあるかどうかをチェックする。

==============================================================================
*41.12* ファイルタイププラグインを書く *write-filetype-plugin* *ftplugin*

ファイルタイププラグインはグローバルプラグインと似ていますが、カレントバッファ
のマップやオプションだけを設定します。ファイルタイププラグインの使用方法につい
ては |add-filetype-plugin| を参照してください。

先に |41.10| 節のグローバルプラグインの項を読んでください。そこで説明されてい
ることはすべてファイルタイププラグインにもあてはまります。この節ではファイルタ
イププラグイン特有の事項だけを説明します。ファイルタイププラグインはカレント
バッファに対してのみ機能するということが最も大切です。


無効化
------

ファイルタイププラグインを書いて多くの人に使ってもらおうとするなら、プラグイン
を無効化できるようにしておく必要があります。プラグインの先頭に次のような記述を
追加してください:

" このバッファに対してまだ実行されていない場合のみ処理を実行する
if exists("b:did_ftplugin")
finish
endif
let b:did_ftplugin = 1

これは同じプラグインが同じバッファで二重にロードされるのを防ぐためにも必要です
(":edit"コマンドを引数なしで実行したときに発生します)。

ユーザーは、次の一行だけを書いたファイルタイププラグインを作成することで、標準
プラグインのロードを無効化できます:

let b:did_ftplugin = 1

ただし、そのファイルを保存したファイルタイププラグインディレクトリが、
'runtimepath' の中で $VIMRUNTIME よりも前にある必要があります。

標準プラグインを使いつつ、その設定を一つだけ変更したいという場合は、スクリプト
の中で設定を変更することができます:

setlocal textwidth=70

このファイルを "after" ディレクトリに保存すると、(例えば filetype=vim なら) 標
準配布の "vim.vim" が読み込まれた後に、保存したファイルが読み込まれるようにな
ります |after-directory|。Unix ならファイルのパスは
"~/.vim/after/ftplugin/vim.vim" です。Note: 標準プラグインは "b:did_ftplugin"
を設定しますが、ここではそれを無視しています。


オプション
----------

ファイルタイププラグインでは、カレントバッファの設定だけを変更するため、次のコ
マンドを使ってオプションを設定してください:

:setlocal

そして、バッファローカルなオプションだけを設定してください (どのオプションがそ
うなのかはヘルプで確認してください)。|:setlocal| コマンドでグローバルオプショ
ンやウィンドウローカルオプションを設定すると、たくさんのバッファの設定が変更さ
れます。ファイルタイププラグインはそのような動作をすべきではありません。

オプションの値がフラグや設定項目のリストなら、"+=" や "-=" を使うことで既存の
設定を維持することができます。ユーザーがそのオプションの設定を変更している可能
性もあるので注意してください。最初に初期設定に戻してから設定を変更するといいか
もしれません。例:

:setlocal formatoptions& formatoptions+=ro


マップ
------

カレントバッファの中だけで機能するマップを作るには次のコマンドを使います:

:map <buffer>

上述したように、マップは二段階に分けて作る必要があります。ファイルタイププラグ
インで機能を定義する例を示します:

if !hasmapto('<Plug>JavaImport')
map <buffer> <unique> <LocalLeader>i <Plug>JavaImport
endif
noremap <buffer> <unique> <Plug>JavaImport oimport ""<Left><Esc>

|hasmapto()| を使って、ユーザーが既に <Plug>JavaImport に対してマップを定義し
ているかどうかを調べます。未定義ならファイルタイププラグインの標準のマップを定
義します。マップは <LocalLeader> で開始します。そうすることで、ファイルタイプ
プラグインのマップを開始するキーをユーザーが選択できます。初期設定はバックス
ラッシュです。
"<unique>" を使って、マップが既に存在したとき、あるいは既存のマップと重複した
ときにエラーメッセージが表示されるようにします。
|:noremap| を使って、ユーザーが定義した他のマップの影響を受けないようにしま
す。":noremap <script>" を使うと、スクリプトの中で定義した <SID> で始まるマッ
プだけが再マップされます。

ユーザーがファイルタイププラグインのマップを無効化できる仕組みを提供しなければ
なりません。例えば、"mail" ファイルタイプのプラグインなら次のようにします:

" マップを追加する。ユーザーが望まない場合は追加しない。
if !exists("no_plugin_maps") && !exists("no_mail_maps")
" "> " を挿入して引用する
if !hasmapto('<Plug>MailQuote')
vmap <buffer> <LocalLeader>q <Plug>MailQuote
nmap <buffer> <LocalLeader>q <Plug>MailQuote
endif
vnoremap <buffer> <Plug>MailQuote :s/^/> /<CR>
nnoremap <buffer> <Plug>MailQuote :.,$s/^/> /<CR>
endif

ここでは二つのグローバル変数が使われています:
no_plugin_maps すべてのファイルタイププラグインのマップを無効化
no_mail_maps 特定のファイルタイププラグインのマップを無効化


ユーザー定義コマンド
--------------------

ファイルタイプ用のユーザー定義コマンドを追加して、それを一つのバッファの中だけ
で使えるようにするには、|:command| の引数に "-buffer" を指定します。例:

:command -buffer Make make %:r.s


変数
-----

ファイルタイププラグインは対応するすべてのバッファに対して実行されます。スクリ
プトローカル変数 |s:var| はすべての実行で共有されます。バッファごとの変数を使
いたい場合はバッファローカル変数 |b:var| を使ってください。


関数
-----

関数は一度だけ定義すれば十分です。しかし、ファイルタイププラグインは対応する
ファイルが開かれるたびに読み込まれます。次のようにすると関数が一度だけ定義され
るようになります:

:if !exists("*s:Func")
: function s:Func(arg)
: ...
: endfunction
:endif


アンドゥ *undo_ftplugin*
--------

ユーザーが ":setfiletype xyz" としたとき、それ以前のファイルタイプの効果は無効
になるべきです。b:undo_ftplugin 変数にコマンドを設定し、ファイルタイププラグイ
ンの設定をアンドゥするようにしてください。例:

let b:undo_ftplugin = "setlocal fo< com< tw< commentstring<"
\ . "| unlet b:match_ignorecase b:match_words b:match_skip"

":setlocal" でオプション名の後に "<" を付けると、そのオプションをグローバルな
値でリセットします。オプションをリセットするにはこの方法が一番です。

このように行継続を使うには 'cpoptions' から "C" フラグを取り除く必要がありま
す。上述の |use-cpo-save| を参照してください。


ファイル名
----------

ファイルタイププラグインのファイル名にはファイルタイプ名が含まれていなければな
りません |ftplugin-name|。次の三つのうちのどれかにしてください:

.../ftplugin/stuff.vim
.../ftplugin/stuff_foo.vim
.../ftplugin/stuff/bar.vim

"stuff" はファイルタイプ名、"foo" と "bar" は任意の名前です。


要約 *ftplugin-special*
-----

ファイルタイププラグインの特有事項を要約します:

<LocalLeader> "maplocalleader" の値。ユーザーがその変数にキーを設定
することで、ファイルタイププラグインのマップの開始キー
を指定できる。

:map <buffer> バッファローカルなマップを定義する。

:noremap <script> 同スクリプトで定義している <SID> で始まるマップだけを
再マップする。

:setlocal カレントバッファのオプションのみ設定する。

:command -buffer バッファローカルなユーザー定義コマンドを定義する。

exists("*s:Func") 関数が定義済かどうかをチェックする。

プラグイン全般に関する事項は |plugin-special| を参照してください。

==============================================================================
*41.13* コンパイラプラグインを書く *write-compiler-plugin*

コンパイラプラグインは特定のコンパイラを使うためのオプションを設定します。ユー
ザーは |:compiler| コマンドでその設定を読み込むことができます。設定されるオプ
ションは主に 'errorformat' と 'makeprg' です。

百聞は一見に如かず。次のコマンドですべての標準コンパイラプラグインを開くことが
できます:

:next $VIMRUNTIME/compiler/*.vim

|:next| を使って次のプラグインファイルに移動してください。

これらのファイルには二つの特有事項があります。一つは、標準ファイルに対して設定
を追加したり上書きしたりできる仕組みです。標準ファイルの先頭は次のようになって
います:

:if exists("current_compiler")
: finish
:endif
:let current_compiler = "mine"

コンパイラファイルを書いて、それを個人用のランタイムディレクトリ (例えば Unix
なら ~/.vim/compiler) に置いたとき、"current_compiler" 変数を設定することで標
準ファイルの設定をスキップすることができます。
*:CompilerSet*
二つ目は、":compiler!" が使われたときは ":set" を使い、":compiler" が使われた
ときは ":setlocal" を使う仕組みです。Vim はそのために ":CompilerSet" という
ユーザーコマンドを定義します。古い Vim はそれを定義しないので、プラグインの中
で定義してください。例:

if exists(":CompilerSet") != 2
command -nargs=* CompilerSet setlocal <args>
endif
CompilerSet errorformat& " use the dfault 'errorformat'
CompilerSet makeprg=nmake

コンパイラプラグインを書いて、それを Vim の配布物に含めたり、システムのランタ
イムディレクトリに入れたりする場合は、上記の方法を使ってください。
"current_compiler" がユーザープラグインで設定された場合は何も実行しないように
します。

コンパイラプラグインを書いて標準プラグインの設定を上書きする場合は
"current_compiler" をチェックしないようにします。そのプラグインは最後に読み込
まれないといけないので、'runtimepath' の最後にあるディレクトリに置きます。例え
ば、Unix なら ~/.vim/after/compiler などです。

==============================================================================
*41.14* プラグインを書く (高速ロード版) *write-plugin-quickload*

プラグインが成長し、とても大きくなることがあります。すると、起動速度は遅くなっ
てきます。例えそのプラグインをたまにしか使わないとしても遅くなります。そういう
ときはクイックロードプラグインの出番です。

基本的なアイデアはプラグインを二回に分けて読み込むということです。一回目はユー
ザー定義コマンドやマップを定義して機能を提供します。二回目は機能を実装する関数
を定義します。

スクリプトを二回読み込むことがクイックロードだというと驚かれるかもしれません。
この手法の意味は、一回目は高速に読み込み、スクリプトの重い部分は二回目に後回し
にするということです。二回目の読み込みは、ユーザが実際にその機能を使用したとき
に発生します。あなたがその機能を常に使うなら、これは逆に遅くなってしまいます。

Note Vim 7 以降では代わりの方法があります。|41.15| で説明されている |autoload|
機能を使う方法です。

次に例を示します:

" クイックロードのデモ用のグローバルプラグイン
" Last Change: 2005 Feb 25
" Maintainer: Bram Moolenaar <Bram@vim.org>
" License: This file is placed in the public domain.

if !exists("s:did_load")
command -nargs=* BNRead call BufNetRead(<f-args>)
map <F19> :call BufNetWrite('something')<CR>

let s:did_load = 1
exe 'au FuncUndefined BufNet* source ' . expand('<sfile>')
finish
endif

function BufNetRead(...)
echo 'BufNetRead(' . string(a:000) . ')'
" read 機能をここに書く
endfunction

function BufNetWrite(...)
echo 'BufNetWrite(' . string(a:000) . ')'
" write 機能をここに書く
endfunction

このスクリプトが最初に読み込まれたとき、"s:did_load" は設定されていません。
"if" と "endif" の間のコマンドが実行されます。|:finish| コマンドによって終了
し、スクリプトの残りの部分は実行されません。

二回目に読み込まれたときは "s:did_load" が存在するので、"endif" 以降のコマンド
が実行されます。この部分では (長くなる可能性のある) BufNetRead() 関数と
BufNetWrite() 関数を定義します。

このスクリプトをプラグインディレクトリに置くと、Vim の起動時に実行されます。処
理の流れは次のようになります:

1. 起動時にスクリプトが読み込まれる。"BNRead" コマンドが定義され、<F19> キーに
マップが設定される。自動コマンドの |FuncUndefined| が定義される。":finish"
コマンドによってスクリプトが終了する。

2. ユーザーが BNRead コマンド実行する、または <F19> キーを押す。BufNetRead()
関数か BufNetWrite() 関数が呼び出される。

3. Vim はその関数を見つけることができず、自動コマンドの |FuncUndefined| イベン
トを発行する。関数名が "BufNet*" というパターンにマッチするので、"source
fname" コマンドが実行される。"fname" はスクリプトの名前になります。スクリプ
トがどこに保存されていても、"<sfile>" が展開されてファイル名になります
(|expand()|参照)。

4. スクリプトが再び読み込まれる。"s:did_load" 変数が存在するので関数が定義され
る。

遅延ロードされる関数の名前が |FuncUndefined| 自動コマンドのパターンにマッチし
ていることに注意してください。他のプラグインがこのパターンにマッチする関数を定
義しているとうまく動きません。

==============================================================================
*41.15* ライブラリスクリプトを書く *write-library-script*

いろいろな場所で同じ機能が必要になることがあります。コードが二、三行以上になる
場合は、それを一つのスクリプトに入れて、他のスクリプトから使えるようにしたくな
ると思います。そのようなスクリプトをライブラリスクリプトと呼びます。

自分でライブラリスクリプトを読み込むことは可能ですが、同じスクリプトを二重に読
み込まないようにする必要があります。それには |exists()| 関数を使います。例:

if !exists('*MyLibFunction')
runtime library/mylibscript.vim
endif
call MyLibFunction(arg)

'runtimepath' に設定されたディレクトリの中の "library/mylibscript.vim" の中で
MyLibFunction() が定義されている必要があります。

これをより簡単にするために、Vim には autoload という仕組みがあります。同じこと
を次のように書くことができます:

call mylib#myfunction(arg)

この方がずっと簡単でしょう？ Vim は関数の名前を見て、それが未定義なら、
'runtimepath' の中から "autoload/mylib.vim" を探します。そのスクリプトは関数
"mylib#myfunction()" を定義していなければなりません。

mylib.vim には他の関数も入れられます。ライブラリスクリプトの中では自由に関数を
作ることができます。ただし、関数名の '#' より前の部分はスクリプトの名前と同じ
にする必要があります。そうしないと Vim はどのスクリプトを読み込めばいいのかわ
かりません。

ライブラリスクリプトをたくさん書く場合は、サブディレクトリを使うといいかもしれ
ません。例:

call netlib#ftp#read('somefile')

Unix では、このライブラリスクリプトは次のような場所に置かれます:

~/.vim/autoload/netlib/ftp.vim

関数は次のように定義します:

function netlib#ftp#read(fname)
" ftp を使ってファイルを読み込む
endfunction

関数定義と関数呼び出しではまったく同じ名前が使われます。最後の '#' より前の部
分がサブディレクトリとスクリプトの名前に対応しています。

同じ方法で変数を扱うこともできます:

let weekdays = dutch#weekdays

これによって "autoload/dutch.vim" が読み込まれます。そのスクリプトには例えば次
のようなコードが書かれています:

let dutch#weekdays = ['zondag', 'maandag', 'dinsdag', 'woensdag',
\ 'donderdag', 'vrijdag', 'zaterdag']

より詳しくは |autoload| を参照してください。

==============================================================================
*41.16* Vim スクリプトを配布する *distribute-script*

Vim ユーザーは Vim のウェブサイト http://www.vim.org でスクリプトを探します。
便利なスクリプトを作ったら、ぜひ共有しましょう！

Vim スクリプトはどのシステムでも使えます。tar や gzip コマンドは存在しないこと
があります。ファイルをまとめたり圧縮したりするには "zip" ユーティリティが推奨
されています。

可搬性を最大限に高めるには、Vim 自身を使ってスクリプトをパッケージ化します。そ
れには Vimball ユーティリティを使います。|vimball| を参照。

自動更新するための行を書いておくと便利です。|glvs-plugins| を参照。

==============================================================================

次章: |usr_42.txt| 新しいメニューを追加する

Copyright: see |manual-copyright| vim:tw=78:ts=8:ft=help:norl:

------------------------------------------------------------------------------------------------------------------------------------------------

top - main help file
Download (not html): vimdoc.zip

Vim日本語ドキュメント

苦情は yukihiro.nakadaira@gmail.com まで。



               {Google} ]> 
              Google 検索
              ( ) WWW を検索 (*) vimdoc を検索



Vim documentation: repeat
=========================

main help file

------------------------------------------------------------------------------------------------------------------------------------------------

*repeat.txt* For Vim バージョン 7.0. Last change: 2006 Apr 30


VIMリファレンスマニュアル by Bram Moolenaar


繰り返しコマンド、Vimスクリプトとデバッグ *repeating*

繰り返しについてはユーザーマニュアルの26章|usr_26.txt|に紹介があります。

1. 単発繰り返し |single-repeat|
2. 多重繰り返し |multi-repeat|
3. 複雑な繰り返し |complex-repeat|
4. Vimスクリプトを使う |using-scripts|
5. スクリプトのデバッグ |debug-scripts|
6. プロファイリング |profiling|

==============================================================================
1. 単発繰り返し *single-repeat*

*.*
. 最後の変更を繰り返す。変更の回数は[count]で指定した回
数で置き換えられる。'cpoptions'に'y'フラグが含まれてる
時には、ヤンクコマンドも繰り返す。コマンドラインコマン
ドは繰り返さない。

単純な変更は"."コマンドで繰り返すことができる。回数を指定しなければ、最後の変
更の回数が使用される。回数を指定した場合、最後のそれと置き換えられる。最後に行
なわれた変更が番号付きレジスタの指定を含んでいた場合、レジスタ番号は増加され
る。これをどのように使うかの例は|redo-register|を参照。ビジュアル選択を使用し
たコマンドを繰り返す時は、同じ「サイズ」の範囲が使用されることに注意。
|visual-repeat|を参照。

*@:*
@: 最後のコマンドラインを[count]回繰り返す。
{|+cmdline_hist|が無効にされていると使えない}


==============================================================================
2. 多重繰り返し *multi-repeat*

*:g* *:global* *E147* *E148*
:[range]g[lobal]/{pattern}/[cmd]
[range]の範囲で{pattern}にマッチする行に対して、Exコマ
ンド[cmd](省略した場合":p")を実行する。

:[range]g[lobal]!/{pattern}/[cmd]
[range]の範囲で{pattern}にマッチしない行に対して、Exコ
マンド[cmd](省略した場合":p")を実行する。

*:v* *:vglobal*
:[range]v[global]/{pattern}/[cmd]
Same as :g!.

globalコマンドの動作はまず第1に[range]の行をスキャンしマッチした行すべてに印を
つける(複数行にかかるパターンではマッチの最初の行だけが重要である)。
次のスキャンでマークされたすべての行の行番号が指定(前置)されて[cmd]が実行され
る。行が変更されたり削除された場合そのマークは消滅する。
省略した場合の[range]はバッファ全体(1,$)である。コマンドを中断するには"CTRL-C"
を使用する。ある行についてエラーメッセージが与えられると、そのラインに対するコ
マンドは中断されglobalコマンドはマッチした次の行の処理を続ける。

非Exコマンドを繰り返すには":normal"コマンドを使用すれば良い:
:g/pat/normal {commands}
{commands}が完全なコマンドとして終了することを確認すること。そうでないとVimは
全部のマッチに1つ1つについて、コマンドの残りを期待して貴方の入力を待ち続けるだ
ろう。画面は更新されないので、いま何をしているのかわからないだろう。|:normal|
を参照。

undo/redoコマンドはglobalコマンドを一度にundo/redoする。以前の文脈マークだけが
一度設定される("''"でグローバルコマンド実行前にカーソルがあった場所に戻ること
が出来る)。

globalコマンドは最後に使用した検索パターンと、最後に使用した置換パターンの両方
を設定する(これはvi互換)。これにより全体に対して文字列置換を行なうのが簡単にな
る:
:g/pat/s//PAT/g
これは総ての"pat"を"PAT"に置き換える。同じことがこれでも可能:
:%s/pat/PAT/g
こっちのほうが2文字短い!

コマンドに ":visual" を使った場合は特別である。これはマッチする行へ移動してノー
マルモードに入り、|Q| を押して Ex モードへ戻るまでコマンドを実行することができ
る。これがマッチする各行に対して繰り返される。これを行っている間は ":global" を
使うことはできない。
(訳注: この段落、意味がわかりません)

==============================================================================
3. 複雑な繰り返し *complex-repeat*

*q* *recording*
q{0-9a-zA-Z"} タイプした文字をレジスタ{0-9a-zA-Z"}にレコーディングす
る(大文字は追加する)。レジスタを実行中は'q'コマンドは
無効になり、マッピングの中でも無効になる。{Vi: レコー
ディングはない}

q レコーディングを終了する。(実装のメモ: レコーディング
を終了する'q'は、それがマッピングの結果であってもレジ
スタに記録されない) {Vi: レコーディングはない}

*@*
@{0-9a-z".=*} レジスタ{0-9a-z".=*}の内容を[count]回実行する。レジス
タ'%'(現在のファイルの名前)と'#' (裏ファイルの名前)は
使用できないことに留意。"@="を使用するとプロンプトが表
示されコマンドの評価式の入力モードになる。入力すると評
価の結果が実行される。|@:|も参照。{Vi: 名前付きレジス
タのみ}

*@@* *E748*
@@ 直前の@{0-9a-z":*}を[count]回繰り返す。

:[addr]*{0-9a-z".=} *:@* *:star*
:[addr]@{0-9a-z".=*} レジスタ{0-9a-z".=*}の内容をExコマンドとして実行する。
まず最初にカーソルを[addr]行に設定する(省略した場合現
在の行)。レジスタの最終行に<CR>が含まれない場合、
'cpoptions'に'e'フラグが含まれていれば自動的に追加され
る。
":*"コマンドは'cpoptions'に'*'フラグが含まれていた場合
にだけ認識されることに留意。これは'nocompatible'が使用
されている時にはデフォルトにはならない。
":@="には最後に評価された式が使用される。式の評価結果
がExコマンドとして実行される。
これらのコマンド内ではマッピングは行なわれない。
{Vi: 幾つかのバージョンだけ} 将来: 指定された範囲の
各々の行にたいしてレジスタの内容が実行されるだろう。

*:@:*
:[addr]@: 最後のコマンドラインを繰り返す。まずカーソルを[addr]行
に設定する(省略した場合現在の行)。 {Vi にはない}

*:@@*
:[addr]@@ 最後の:@{0-9a-z"}を繰り返す。まず最初にカーソルを
[addr]行に設定する(省略した場合現在の行)。 {Vi: 幾つか
のバージョンだけ}

==============================================================================
4. Vimスクリプトを使う *using-scripts*

Vimスクリプトの書き方はユーザーマニュアルの41章|usr_41.txt|を参照してくださ
い。

*:so* *:source* *load-vim-script*
:so[urce] {file} Exコマンドを{file}から読込む。これは":"で始まるコマン
ドを列挙したファイルです。
(訳注:実際に":"を書く必要はない)
自動コマンド |SourcePre| が発生する。

:so[urce]! {file} Vimコマンドを{file}から読込む。ノーマルモードでファイ
ルの内容をあなたがタイプしたのと同じように実行されま
す。
|:global|, |:argdo|, |:windo|, |:bufdo|で使ったとき、
ループ中や他のコマンドが続けられたときは、コマンドの実
行中は表示は更新されません。
{Vi にはない}

*:ru* *:runtime*
:ru[ntime][!] {file} ..
'runtimepath'で示された各ディレクトリの{file}からEx
コマンドを読み込みます。ファイルがなくてもエラーには
なりません。例:
:runtime syntax/c.vim

{file}には空白で区切って複数のファイルを指定できます。
指定された{file}は'runtimepath'の最初のディレクト
リ、次に二番目のディレクトリ、と検索されます。{file}
に空白を含めるにはバックスラッシュを使います(しかし
ファイル名に空白を含めるのは望ましくありません。トラ
ブルのもとです)。

[!]を付けると見つかった全てのファイルを読み込みま
す。付けなければ最初に見つかったファイルだけを読み込
みます。

{file}がワイルドカードを含んでいるとそれは展開されま
す。例:
:runtime! plugin/*.vim
これはVimが起動時にプラグインファイルを読み込むのに
使っているものです。次のは似ていますが:
:runtime plugin/*.vim
これは最初に見つかったファイルだけを読み込みます。

'verbose'が1以上ならファイルが見つからないときにメッ
セージが表示されます。
'verbose'が2以上なら見つかった全てのファイルについて
メッセージが表示されます。
{Vi にはない}

:scripte[ncoding] [encoding] *:scripte* *:scriptencoding* *E167*
スクリプトで使われている文字コードを宣言します。
それ以降の行は必要なら[encoding]から'encoding'オプ
ションの文字コードに変換されます。例:
scriptencoding iso-8859-5
scriptencoding cp932

[encoding]が空のときは変換はされません。これは文字
コードの変換を限定するために使います:
scriptencoding euc-jp
... 変換される ...
scriptencoding
... 変換されない ...

変換がシステムによって提供されない場合、エラーメッ
セージは表示されず変換もされません。

"ucs-2"や"ucs-4"を使わないでください。スクリプトをそ
の文字コードで書くことはできません(NULバイトが含まれ
てしまうため)。
スクリプトの最初にutf-8のBOM(Byte Order Mark : バイ
トオーダーマーク)があるとVimはそれを認識します。
":scriptencoding utf-8"と書く必要はありません。

Vimが|+multi_byte|付きでコンパイルされていない場合、
このコマンドは無視されます。
{Vi にはない}

*:scrip* *:scriptnames*
:scrip[tnames] 読み込まれているスクリプトを読み込まれた順番どおりに
全て表示します。数字はスクリプトのID(識別子)|<SID>|
に使われています。
{Vi にはない} {|+eval|付きでコンパイルしないと使えな
い}

*:fini* *:finish* *E168*
:fini[sh] スクリプトの読み込みを停止します。スクリプトファイル
でのみ使えます。これはファイルの残りを読み込ませない
ための手軽な方法です。|:try|を使った後で|:finally|を
見つける前に使われると、まず":finally"と|:endtry|の
間のコマンドが実行されます。この手続きは入れ子になっ
ている全ての":try"に対して適用されます。入れ子の一番
外側の":endtry"に達するとスクリプトを停止します。
{Vi にはない}

総てのコマンドとコマンドシーケンスは、名前付きレジスタに格納することで繰り返し
実行することができる。レジスタにコマンドを格納する方法は2つある:
- 記録コマンド"q"を使用する。実際にコマンドをタイプし、実行しながらそれをレジ
スタに格納する。今、何が起こっているかを確認できるので簡単である。間違いをし
たならば、レジスタの内容をいったんファイルへ書き出("p"ut)して、コマンドシー
ケンスを編集して、それからそれを削除して再びレジスタに格納することができる。
レジスタに追加することで継続してレコーディングすることができる(大文字を使用
する)。
- コマンドシーケンスを削除かヤンクしてレジスタに入れる。

良く使うコマンドは':map'コマンドでファンクションキーに割当てることができる:

別の方法としてコマンドをファイルに記述しておき、それを':source!'コマンドで読込
んで実行するという方法もある。長いコマンドシーケンスにとっては便利である。ファ
ンクションキーに複雑なコマンドを割当てるために':map'コマンドと組み合わせること
ができる。

':source'コマンドはファイルから一行ずつExコマンドを読込む。キーボード入力が必
要になった場合にはタイプする必要が生じる。':source!'コマンドはスクリプトファイ
ルから一字一句読込む。各々のキャラクタはユーザがタイプしたものとして解釈され
る。

例: ":!ls"コマンドを実行したとすると|hit-enter|プロンプトが表示される。"!ls"
を含むファイルを':source'したならば、自分で<Enter>をタイプする必要がある
だろう。しかし':!ls'を含んだファイルを':source!'したならば、<CR>が見つかるまで
そのファイルから続く文字が読込まれる。":!ls"がファイルの最終行でない限り、<CR>
を自分でタイプする必要はないだろう

スクリプトファイルの中で':source[!]'コマンドを使うことも可能なので、階層関係の
あるスクリプトファイルを作ることもできる。':source'コマンドは同時に開くことの
できるファイル数(だいたい15)と同じだけネスト(入れ子に)することができる。
':source!'コマンドは15段までネストすることができる。

読込まれるファイルの中ではファイル名が必要なところに、"<sfile>"という文字列(
文字 通りであってスペシャルキーではない)を使うことができる。この文字列は読込ま
れた ファイルのファイル名に置き換えられる。例えば、".vimrc"ファイルと同じ場所
に"other.vimrc"というファイルがあれば、".vimrc"から次のコマンドでそれを読込む
ことができる:
:source <sfile>:h/other.vimrc

スクリプトファイル内では端末依存のキーコードは端末非依存の2文字のコードで表現
される。これは異なる種類の端末でも同じ方法で依存キーコードを使用できることを意
味する。最初のキーコードの文字は0x80つまり128で、画面では"~@"と表される。2つ目
のキャラクタは|key-notation|の表にて見ることができる。これらのコードはどれも
CTRL-Vに続けて3つの10進コードを叩くことで入力できる。これはtermcapコード<t_xx>
に対しては使用できない。これらはマッピングの中だけで使うことができる。

*:source_crnl* *W15*
MS-DOS, Win32 and OS/2: ":source"で読込まれるファイルは通常、行末に<CR><NL>を
持っている。これらは常に働く。もしも行末に<NL>を持つファイルを使っているならば
(例えばUNIXで作られたファイル)、'fileformats'が空でかつ先頭行が<CR>で終わって
なければ正しく認識される。しかしこれは先頭行が":map <F1> :help^M"(^Mは<CR>)み
たいな内容だった場合には失敗する。ファイルの先頭行が<CR>で終わっていてその1行
限りの時、先頭行から<CR>が失われてしまうのでエラーメッセージが出るだろう。

Mac Classic: ":source"で読み込まれるファイルは通常、行末に<CR>を持っている。
これらは常に機能する。もしも行末に<NL>を持つファイルを使っているならば(例えば
UNIXで作られたファイル)、'fileformats'が空でかつ先頭行が<CR>で終わってなければ
正しく認識される。先頭行に<CR>を持ち<NL>で改行しているファイルを使用しないよう
に気を付けてください。

その他のシステムでは、Vimは取込まれた(":source"ed)ファイルの行末は<NL>であるこ
とを期待する。これは常に働く。もしも行末が<CR><NL>であるファイル(例えばMS-DOS
で作られたファイル)を使っているならば、総ての行が末尾に<CR>を持っていることに
なる。これは幾つかのコマンドにとって問題となるだろう(例、マッピング)。自動的に
行末記号を検出する機構はない。なぜなら<CR>で終了するマッピングの定義をファイル
の先頭に書くことは一般的で、自動検出用の仕組みを作るのが難しいからである。

*line-continuation*
読込まれた(":source"d")Exコマンドスクリプトのファイル内の長い行は、行継続記号
"\"(backslash)を次行の先頭に挿入することで分割できる。バックスラッシュの前に空
白を挿入することも可能で、これらは無視される。

例: 次の記述は
:set comments=sr:/*,mb:*,el:*/,
\://,
\b:#,
\:%,
\n:>,
\fb:-

次の1行と同じ意味として解釈される:
:set comments=sr:/*,mb:*,el:*/,://,b:#,:%,n:>,fb:-

バックスラッシュの前に先行する空白文字は全部無視される。しかしながらバックス
ラッシュのある行の1つ前の行末には、自由に空白文字を挿入することはできない; 付
加的な空白文字が許されるかどうかは、コマンドが分割される位置に依存する。

":append"と":insert"コマンドには1つ問題がある:
:1append
\asdf
.
バックスラッシュは行継続シンボルに見えるが、コマンドの結果はこのようになる:
:1appendasdf
.
これを避けるには、'cpoptions'に'C'フラグを追加することだ:
:set cpo+=C
:function Foo()
:1append
\asdf
:.
:set cpo-=C

Note 関数の中でその手のコマンドを実行するには、関数定義の際に'C'フラグを追加す
る必要があり、それが実行される際にではない。
:set cpo+=C
:function Foo()
:1append
\asdf
.
:endfunction
:set cpo-=C

解説:
多くのプログラムは行継続を、継続する行の末尾にバックスラッシュを置くこ
とで表現する。その方法をVimで採用してしまうと、Viとの互換性に重大な欠
陥ができてしまう。たとえばこのようなViのマッピングを考えるとわかりやす
い:
:map xx asdf\
従って一般的ではないが行頭のバックスラッシュを採用している。

==============================================================================
5. スクリプトのデバッグ *debug-scripts*

スクリプトの動作を知るためのコードを追加することができるのは当り前として、
Vimはデバッグモードを提供しています。これはスクリプトファイルやユーザーファン
クションをステップ実行することやブレークポイントを仕掛けることを可能にします。

NOTE: デバッグモードは未完成です。デバッグはVimの動作に副作用をあたえます。全
てをデバッグするのには使えません。例えば画面がデバッグメッセージで散乱するとき
など。
{Vi にはデバッグモードはない}

デバッグモードの代わりに'verbose'オプションが使えます。大きな値を設定するとV
imの動作についてより詳細なメッセージを得られます。


デバッグモードを開始する *debug-mode*

デバッグモードを開始するにはこれらの方法のうちどれかを使います:
1. Vimを|-D|引数付きで起動する:
vim -D file.txt
最初にvimrcを読み込むところからデバッグを開始します。これはVimの起動時に何
が起こっているのかを調査するのに便利です。副作用としてVimは初期化が完了する
前に安全のためターミナルモードを切替えます。
(WindowsやMacintoshの)GUI専用バージョンではGUIウインドウを開くとすぐにデバ
ッグが開始します。これを早めるにはvimrcファイルに":gui"と書いてください。
*:debug*
2. ":debug"を前に付けてコマンドを実行します。そのコマンドを実行する間だけデバ
ッグできます。特定のスクリプトファイルやユーザー関数をデバッグするのに便利
です。オートコマンドから呼び出されるスクリプトや関数にも便利です。
例:
:debug edit test.txt.gz

3. ブレークポイントをソースファイルやユーザーファンクションに設定します。コ
マンドラインから次のようにできます:
vim -c "breakadd file */explorer.vim"
これはVimを起動して"explorer.vim"の最初の行を読み込むところで停止します。
デバッグモード中でもブレークポイントを設定できます。

デバッグモード中に実行されるコマンドはそれが実行される前に表示されます。コメン
トや空の行、実行されない行はとばされます。行が"|"を使って二つのコマンドを含ん
でいた場合には分けて表示されます。


デバッグモード
--------------

デバッグモードに入ると、通常のExコマンドが使えます。例えば、変数の値を見るに
は:
echo idx
ユーザーファンクション内では、これはローカル変数の"idx"を表示します。"g:"を頭
に付けるとグローバル変数の値を表示します:
echo g:idx
全てのコマンドは実行中の関数やスクリプトの文脈として実行されます。オプションを
設定することもできます。例えば何が起こっているのかを表示するために'verbose'を
設定することができます。興味のある部分を実行する前に次のようにするといいでしょ
う:
:set verbose=20

スクリーンの更新を必要とするコマンドは避けるべきです。なぜならデバッグモードを
抜けるまでその作用に気付き難いからです。例えば:
:help
これはとても不便です。

デバッグモードのためのコマンドラインヒストリが別に用意されています。

関数の行番号はその関数の始まりから数えます。見ている行の番号を数えるのに苦労す
る場合はその関数の書かれたファイルを別のVimで開き、その関数の始まりを探しだし
、"99j"を実行してください。"99"は実際の行番号に合わせて変えてください。

さらに、以下のコマンドが使えます:
*>cont*
cont 次のブレークポイントまで実行します。
*>quit*
quit 異常停止します。これはCTRL-Cを使うことに似ていますが、
全てを停止するわけではありません。次のブレークポイント
で停止します。
*>next*
next コマンドを実行しそれが終わるとデバッグモードに戻りま
す。ユーザー関数やソースファイルの呼び出し時には呼び
出し元の次の行に進みます。
*>step*
step コマンドを実行しそれが終わるとデバッグモードに戻りま
す。ユーザー関数やソースファイルの呼び出し時には呼び
出し先の行に進みます。
*>interrupt*
interrupt CTRL-Cを使うことに似ていますが、次のコマンドを実行する
ためにデバッグモードに戻る場所が">quit"と違います。例
外割り込みについて|:finally|や|:catch|をテストするのに
便利です。
*>finish*
finish 実行中のスクリプトやユーザー関数を終了し呼び出し元で
デバッグモードに戻ります。

デバッグモードのコマンドについて:
- 補間はできません。通常のExコマンドのみ補間できます。
- 次の一文字に省略すことができます: "c", "n", "s" そして "f"。
- <CR>を押すと前回のものを繰り返します。関係ないコマンドを使うとリセットされま
す(どうすべきかがわかりにくいため)。
- 同じ名前のExコマンドを使うにはコロンを付けてください:
":cont", ":next", ":finish" (省略時も)


ブレークポイントの定義
----------------------
*:breaka* *:breakadd*
:breaka[dd] func [lnum] {name}
関数にブレークポイントを設定します。例:
:breakadd func Explore
関数名が妥当かどうか検査しませので、関数定義の前にブレークポイ
ントを定義できます。

:breaka[dd] file [lnum] {name}
ソースファイルにブレークポイントを設定します。例:
:breakadd file 43 .vimrc

:breaka[dd] here
カレントファイルのカレント行にブレークポイントを設定します。
次を行うのと同様です:
:breakadd file <cursor-line> <current-file>
Note これはファイルを読み込むときに実行されるコマンドに対して
だけ働きます。そのファイル中で定義される関数に対しては働きませ
ん。

[lnum]はブレークポイントにする行番号です。Vimはその行かそれ以降で停止します。
省略時すると1行目になります。

*:debug-name*
{name} はファイル名や関数名のパターンです。パターンはオートコマンドで使われる
ものと同じです。完全に一致しなければなりません(パターンが"^"で始まって"$"で終
わるように)。"*"は全ての文字列に一致します。'ignorecase'は使われませんが、大文
字と小文字を区別しないために"\c"を使うことができます|/c|。関数名には()を付け
ないでください!

ソースファイル名のパターン検査はファイルのフルネームに対して行われます。例:
breakadd file explorer
パスが間違っているので一致しません。
breakadd file *explorer.vim
".../plugin/explorer.vim"と".../plugin/iexplorer.vim"に一致します。
breakadd file */explorer.vim
".../plugin/explorer.vim"だけに一致します。

関数名のパターン検査は";function"で表示される名前に対して行われます。ローカ
ル関数には"<SNR>99_"といったものが前に付くということです。

Note 関数はまず読み込まれ、後で実行されます。読み込まれたときに "file" ブレー
クポイントがチェックされ、実行されるときに "func" ブレークポイントがチェックさ
れます。

ブレークポイントの削除
----------------------
*:breakd* *:breakdel* *E161*
:breakd[el] {nr}
ブレークポイント{nr}を削除します。|:breaklist|を使って番号を
確認してください。

:breakd[el] *
すべてのブレークポイントを削除します。

:breakd[el] func [lnum] {name}
関数内のブレークポイントを削除します。

:breakd[el] file [lnum] {name}
ソースファイル内のブレークポイントを削除します。

:breakd[el] here
カレントファイルのカレント行のブレークポイントを削除します。


[lnum]が省略されると関数、またはファイルの最初のブレークポイントが削除されま
す。
{name}は":breakadd"で使った名前と完全に同じでなければなりません。"eplorer"と
"*explorer.vim"、"*explorer*"は違います。


ブレークポイントを列挙する
--------------------------
*:breakl* *:breaklist*
:breakl[ist]
全てのブレークポイントを列挙します。


その他
------

*:debugg* *:debuggreedy*
:debugg[reedy]
デバッグモードのコマンドをユーザーから直接得るのではなく標準入
力から読み込みます。スクリプトのテストのときに便利です。
例:
echo 'q^Mq' | vim -e -s -c debuggreedy -c 'breakadd file script.vim' -S script.vim

:0debugg[reedy]
":debuggreedy"を取り消します。それ以降のデバッグモードコマンド
を使わず、ユーザーから直接デバッグモードコマンドを受け取ります
。

==============================================================================
6. プロファイリング *profile* *profiling*

プロファイリングとは、関数やスクリプトの実行にかかる時間を計測することです。
これを行うには |+profile| 機能が必要です。
この機能は "huge" 機能つきでコンパイルしたときだけ含まれます。
{Vi はプロファイリング機能を持っていない}

また、関数 |reltime()| を使っても時間を計測できます。この関数には |+reltime|
機能だけが必要です。これは "huge" 以外でもしばしばついてきます。

:prof[ile] start {fname} *:prof* *:profile* *E750*
プロファイリングを開始し、終了時に出力を {fname} に出力します。
{fname} がすでに存在するときは、警告なしに上書きされます。
変数 |v:profiling| に 1 が代入されます。

:prof[ile] continue
":profile pause" の後にこれを実行すると、プロファイリングを再
開します。

:prof[ile] func {pattern}
パターン {pattern} にマッチする関数をプロファイリングします。
{pattern} がどう使われるかは |:debug-name| を参照。

:prof[ile][!] file {pattern}
パターン {pattern} にマッチするスクリプトファイルをプロファイ
リングします。
{pattern} がどう使われるかは |:debug-name| を参照。
このコマンドはスクリプトそのものをプロファイリングするだけで、
その中で定義されている関数のプロファイリングは行いません。
[!] がつけられたときは、そのスクリプト中で定義されている全ての
関数のプロファイリングも行います。しかしスクリプトがこのコマン
ドの後で読み込まれたときだけです。

:profd[el] ... *:profd* *:profdel*
指定された引数に対するプロファイリングを停止します。引数につい
ては |:breakdel| を参照。

最初は常に ":profile start fname" コマンドで始めなければなりません。結果のファ
イルは Vim が終了するときに書き出されます。次に出力の例を挙げます。説明のため
に行番号が行頭についています:

1 FUNCTION Test2()
2 Called 1 time
3 Total time: 0.155251
4 Self time: 0.002006
5
6 count total (s) self (s)
7 9 0.000096 for i in range(8)
8 8 0.153655 0.000410 call Test3()
9 8 0.000070 endfor
10 " Ask a question
11 1 0.001341 echo input("give me an answer: ")

ヘッダ(1行目から4行目)は関数全体にかかった時間を示しています。"Total" はこの関
数を実行している間に経過した時間です。"Self" は "Total" のうち、次のことにかか
った時間を引いたものです:
- 他のユーザ定義関数
- スクリプトの読み込み
- 自動コマンドの実行
- 外部(シェル)プログラム

7行目から11行目は各実行行にかかった時間を示しています。実行されない行はカウン
トされません。それゆえ、コメント行は決してカウントされません。

Count の桁はその行が何回実行されたかを示します。7行目の "for" コマンドはそれ以
下の行と同様に何回も実行されることに注意してください。これは、ループの終わりを
検出するためにこの行が何回も実行されるためです。

ユーザ入力待ちにかかった時間は一切カウントされません。それゆえ、input() のプロ
ンプトに反応するのにどれだけ時間がかかろうとも無関係です。

プロファイリングはどこで時間が費やされたかのよい指標を与えてくれますが、多くの
原因によりその結果がごまかされてしまう場合があるということを覚えておいてくださ
い:

- システム関数 gettimeofday() に依存する時間計測の精度。たとえ時間がマイクロ秒
で表示されていたとしても、1/100秒の精度しかないこともあります。

- 実経過時間が計測されます。他のプロセスがビジーであると、それが予測できない箇
所で遅れを引き起こす可能性があります。

- 1行に複数のコマンドを書いていると、1つの時間しか得られません。ここのコマンド
に対して時間を見るにはその行を分割してください。

- 各行の時間の総和をとると、たいてい関数全体の時間より小さくなります。各行の間
にオーバーヘッドがあります。

- Vim が終了する前に削除された関数はプロファイリング情報を生成しません。必要な
ら変数 |v:profiling| をチェックしてください:
:if !v:profiling
: delfunc MyFunc
:endif

- マルチプロセッサシステム上では、スリープモードが作動したときや、省力のためプ
ロセッサの周波数が下がったとき、プロファイリングが奇妙な結果を出すかもしれま
せん。

vim:tw=78:ts=8:ft=help:norl:

------------------------------------------------------------------------------------------------------------------------------------------------

top - main help file
Download (not html): vimdoc.zip

Vim日本語ドキュメント

苦情は yukihiro.nakadaira@gmail.com まで。





		
#vi list -> hash コマンド
	:'<,'>s/\n/", \r"" => "/gc
#vi option tag -> hash コマンド
	:%s/>/=>"/gc | %s/,$/",/gc 
#view 
	<%= select "post", "code", hs_post_code.invert, :prompt => "選択してください" %>

Excel2migration
  int(11)	t.integer
  varchar(255)	t.string

migrationfile2xls
	:%s/ *\(t\.\|:\|limit *=> *\)/\t/gc 

mysqldesc2seed.csv:
	:'<,'>s/  *.*\n/,/gc
manual-merge
	:<,'>s/^/db\/seeds\//gc |'<,'>s/^/db\/migrates\//gc  
	:'<,'>s/^\(.*\)/cp -p \1 \/opt\/logilogi\/me\/realaf_admin\/\1/gc

Gemfile2xls
	%s/\n//gc | %s/gem ["']/\tgem '/gc | %s/['"]#/'\r#/gc | M/gem 

submit-technix
	<%#= submit_tag l(:button_save), :kind => "save", :confirm => l(:button_curd_confirm) %>
	<%= submit_tag l(:button_ticket), :kind => "ticket", :confirm => l(:button_ticket_confirm) %>
	<%= javascript_tag do %>
	  // Submitボタン切り替え
	  $(document).ready(function() {
		$(":submit").bind("click", function() {
		  $("#commit_kind").val($(this).attr("kind"));
		});
	  });
	<% end %>

ファイルupdown
	ベースは DB に保存で、キャッシュを使って高速化する
G	複数アプリサーバにした場合のキャッシュ削除はキャッシュ削除用の API を用意して wget などする。
	http://d.hatena.ne.jp/takihiro/20090225/1235571810
		ファイル保存の利点
		ファイルに保存の場合、速度重視で作りやすい（public 以下や Web サーバから見えるところに置くなど）
		ファイル保存のマイナス点
		複数アプリサーバにしづらい
		バックアップなどの際に、ファイルも対象にしなければならない
		DB 保存の利点
		複数アプリサーバ、バックアップが楽
		DB 保存のマイナス点
		画像など頻繁にアクセスがあり、かつサイズも大きいデータの場合は遅い

SEED
	insert into reports values (1,1,'㈱CAﾓﾊﾞｲﾙ','ｶﾃｺﾞﾘｰ','20130610',1,1,1,1,100,NULL,10000,NULL,2,1,1,'remarks',now(),now(),NULL);
	mysql> update contents set to_stop_newuser = '["1", "2"]'  where id > 0;
	
#repos merge
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mkdir /opt/logilogi/me/realaf_admin/app/assets/stylesheets/smaaash
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mkdir /opt/logilogi/me/realaf_admin/app/assets/javascripts/smaaash
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mkdir /opt/logilogi/me/realaf_admin/app/assets/images/smaaash
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mv *.css
	common.css   details.css
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mv *.css /opt/logilogi/me/realaf_admin/app/assets/stylesheets/smaaash/
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mv *.js /opt/logilogi/me/realaf_admin/app/assets/javascripts/smaaash/
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mv *.jpg /opt/logilogi/me/realaf_admin/app/assets/images/smaaash/
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/2# mv *.png /opt/logilogi/me/realaf_admin/app/assets/images/smaaash/
	root@localhost:/opt/logilogi/me/realaf_admin/app/views/admin/ex_contents/1# mv *.gif /opt/logilogi/me/realaf_admin/app/assets/images/smaaash/


	tar zcvf r01.tar.gz  r01/
	cd r01
	bundle install
	cp -p /opt/logilogi/me/realaf_admin/config/database.yml config
	diff -Nq  /opt/logilogi/me/realaf_admin/app/models/ /opt/logilogi/me/r01/app/models/


	cd /opt/logilogi/me/r01
	find . -name *.*rb* -mtime -2

git diff -w -b -B --name-only 9e9ab93bb8d08b25b6629daaece4ed11910821b5 HEAD@{0} |xargs ls
#目で除外ファイル群grouping
#目で変化詳細確認ファイル群grouping
git diff -w -b -B -Bbqrで片側しかないファイルを双方向ポピー
 diff -wrtBbq /opt/logilogi/me/r02/db/ /opt/logilogi/me/realaf_admin/db/
 diff -wrtBbq /opt/logilogi/me/r02/config /opt/logilogi/me/realaf_admin/config
  #rsyncにしたい。上の行は。
  vim -d A ../r02/A

  diff --help|grep -niE "(時|付|刻|名|表示)"



/opt/logilogi/me/mergetmp.sh 


mysql> insert into stores values(1,NULL,NULL,'4701ＮＥＷ那覇店',735,47,'','','','','','','',1,1,NULL,'2010-11-30T14:59:00+09:00','2010-11-30T14:59:00+09:00',994701,NULL,NULL,NULL,NULL,'',NULL,NULL,NULL,NULL,NULL);

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-42333036-1', '192.168.85.130');
  ga('send', 'pageview');

</script>



#定番Gem 
		 seeds.rb
		gem  "migration_comments"
	# a gem to load Constants from config/constants.yml
		gem 'settingslogic'

#Gemfile-関数メソッド
	# Load Local Gemfile
	local_gemfile = File.join(File.dirname(__FILE__), "Gemfile.local")
	if File.exists?(local_gemfile)
	  puts "Loading Gemfile.local ..." if $DEBUG # `ruby -d` or `bundle -v`
	  instance_eval File.read(local_gemfile)
	end

	# Load plugins' Gemfiles
	Dir.glob File.expand_path("../plugins/*/Gemfile", __FILE__) do |file|
	  puts "Loading #{file} ..." if $DEBUG # `ruby -d` or `bundle -v`
	  instance_eval File.read(file)
	end

#.gitignore
+/config/database.yml

	# Gems used only for assets and not required
	# in production environments by default.
		group :assets do
		  gem 'sass-rails',   '~> 3.2.3'
		  gem 'coffee-rails', '~> 3.2.1'

		  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
		  gem 'therubyracer', :platforms => :ruby

		  gem 'uglifier', '>= 1.0.3'
		end


        
		gem "migration_comments", "~> 0.3.1"
		group :development do
		  gem 'binding_of_caller'
		  gem 'sextant'
		  gem 'quiet_assets'
		  gem "bullet"
		  #gem 'better_errors'
		  #gem 'guard-livereload'
		end
		group :development, :test do
		  gem 'debugger'

		  #gem 'pry-rails'
		  #gem "pry-debugger"
		  #gem 'hirb'
		  #gem 'hirb-unicode'
		  #gem 'awesome_print'
		end





2)	Scribt2binのwindown版を起動し､gemfileが不足していればgem install “#{genfilename}”を発行する起動スクリプトを (I want you to write the script I a built-in script language of OS -----either in DOS batch file/VBscript/JScript for Windows, and in either sh/perl for linux ) ----

3) postgresql-sharing/ mongoDB linode解約 先行着手｡ 
4) Discuss-scraper


楽天ツール
Language 	: Ruby 1.8.x +  Rails 2.3.x
	(ア)	楽天は開発用アカウントをつくらせることが無理ならば、断念。
	(イ)	日本人に大枠試作させる。		
	(ウ)	出品者ページで出品させる.
	(エ)	Iframeで上に操作フレーム､下はscraping用途iframe表示
	(オ)	管理画面つくる




