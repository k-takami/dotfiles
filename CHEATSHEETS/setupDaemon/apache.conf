 各リクエストが複数回ログ収集されるようにするために TransferLog ディレクティブと CustomLog ディレクティブは複数回使用することができます。
カスタムログ書式

LogFormat ディレクティブと CustomLog ディレクティブの書式を指定する引数は文字列です。この文字列を使ってそれぞれの リクエストがログファイルにログ収集されます。その文字列には ログファイルにそのまま 書かれる文字列や、それぞれ改行とタブを表す C 言語 形式の制御文字 "\n" と "\t" とを含めることができます。そのまま出力させたい引用符とバックスラッシュは バックスラッシュでエスケープする必要があります。

リクエストの特徴そのものは "%" ディレクティブを書式の文字列に書くことで ログ収集されます。"%" ディレクティブはログファイル中では以下のような 値で置換されます:
フォーマット文字列  説明
%%  パーセント記号
%a  リモート IP アドレス
%A  ローカル IP アドレス
%B  レスポンスのバイト数。HTTP ヘッダは除く。
%b  レスポンスのバイト数。HTTP ヘッダは除く。CLF 書式。 すなわち、1 バイトも送られなかったときは 0 ではなく、 '-' になる
%{Foobar}C  サーバに送られたリクエスト中のクッキー Foobar の値
%D  リクエストを処理するのにかかった時間、マイクロ秒単位
%{FOOBAR}e  環境変数 FOOBAR の内容
%f  ファイル名
%h  リモートホスト
%H  リクエストプロトコル
%{Foobar}i  サーバに送られたリクエストの Foobar: ヘッダの内容
%l  (identd からもし提供されていれば) リモートログ名。 これは mod_ident がサーバに存在して、 IdentityCheck ディレクティブが On に設定されていない限り、 - になります。
%m  リクエストメソッド
%{Foobar}n  他のモジュールからのメモ Foobar の内容
%{Foobar}o  応答の Foobar: ヘッダの内容
%p  リクエストを扱っているサーバの正式なポート
%{format}p  サーバがリクエストを処理しているポートの公式 (訳注: canonical) のポート番号か、 サーバの実際のポート番号か、クライアント側の実際のポート番号かです。 format に使える文字列は canonical, local, remote になります。
%P  リクエストを扱った子プロセスのプロセス ID
%{format}P  リクエストを扱ったワーカーのプロセス ID かスレッド ID。 format として有効な値は pid, tid, hextid です。hextid を使うには APR 1.2.0 以降が必要です。
%q  問い合せ文字列 (存在する場合は前に ? が追加される。 そうでない場合は空文字列)
%r  リクエストの最初の行
%s  ステータス。内部でリダイレクトされたリクエストは、元々の リクエストのステータス --- 最後のステータスは %>s
%t  リクエストを受付けた時刻。 CLF の時刻の書式 (標準の英語の書式)
%{format}t  format で与えられた書式による時刻。format は strftime (3) の 書式である必要がある。(地域化されている可能性がある)
%T  リクエストを扱うのにかかった時間、秒単位
%u  リモートユーザ (認証によるもの。ステータス (%s) が 401 のときは意味がないものである可能性がある)
%U  リクエストされた URL パス。クエリ文字列は含まない
%v  リクエストを扱っているサーバの正式な ServerName
%V  UseCanonicalName の設定によるサーバ名
%X  応答が完了したときの接続ステータス:
X =   応答が完了する前に接続が異常終了
+ =   応答が送られた後に接続を持続することが可能
- =   応答が送られた後に接続が切られる

(このディレクティブは Apache 1.3 の後期のバージョンでは %c に割り当てられて いましたが、これは歴史的に ssl が使用している %{var}c 構文と衝突していました。)
%I  リクエストとヘッダを含む、受け取ったバイト数。 0 にはならない。 これを使用するためには mod_logio が必要
%O  ヘッダを含む、送信したバイト数。0 にはならない。 これを使用するためには mod_logio が必要


