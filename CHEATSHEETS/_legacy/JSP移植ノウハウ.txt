confluence

  検索
100_Management
200_Documents
800_Share
AEMのコンテンツをRoRに移植するノウハウ
CMS_Src
Java⇔Rails置き換え確認リスト
MYCODE仕様（161027移行）
MYCODE仕様（移行中）
sling:resourceTypeごとのYAMLへの手作業まとめ
リファクタリング局面を想定した書き置き 備忘録
900_Personal
 編集(E)  お気に入り(F)  ウォッチ中  共有(S)

Platinum-Ext  Platinum-Ext Home  800_Share
AEMのコンテンツをRoRに移植するノウハウ
メタデータの末尾にスキップ
Satoshi Fujiura が作成し、11 14, 2016 に satoshi fujiura (ksf) が最終更新 メタデータの先頭に移動
ディレクトリ構造
.content.xml
各ページのテンプレート
cqのタグ
gljobal.jsp
timingタグ
具体的な移植作業
ページの追加
1.コントローラーの作成
2.コントローラーに継承関係を設定
3.ルーティングの設定
4.テンプレートの格納
5.テンプレートの継承
6._init.html.erb にコントローラーの初期化コードがあるとき
7.
備考.
components/content
コメントをJavaスタイルからRubyスタイルに変更する
ブロックをJavaスタイルからRubyスタイルに変更する
型を指定した変数宣言をやめる
try catchはbegin rescueに
ArrayListは[]に変えよう
properties.getはこう変えよう
文字列比較はequalsではなく==
ArrayList.addではなくarray.pushを使おう
コンテンツを一時的にテンプレートに埋め込む場合のルール
YAML内部に書かれたパスの置き換え
 DAM以下の画像は下記手順で持ってきます
ディレクトリ構造
.content.xml
AEMのディレクトリツリーを確認すると大量の.content.xmlファイルがあります。
これらはAEMの管理ファイルのようなもので、ファイル間の親子関係や参照関係、
あるファイルに対する設定値（パラメータ）を定義するのに使われています。
各ページのテンプレート
platinum-cms-release_src_20160926/content/src/main/content/jcr_root/apps/mycode/components/page
にまとまっています。
RoRのテンプレートに対応するものはAEMではコンポーネントと呼ばれています
※platinum-cms-release_src_20160926 なので注意
cqのタグ
gljobal.jsp
jspファイルの先頭に高頻度で
<%@include file="/apps/mycode/components/global.jsp" %>
というタグが登場するが、これは
platinum-cms-release_src_20160926/content/src/main/content/jcr_root/apps/mycode/components/global.jsp
に存在する、共通ライブラリの読み込み用のjspファイルを読み込んでいる。
timingタグ
例えばここに登場する
platinum-cms-release_src_20160926/content/src/main/content/jcr_root/apps/mycode/components/page/landing/childpage/pc/body.jsp
<cq:include path="timing" resourceType="foundation/components/timing" />
@uehara さんにslackで確認したところ
ちなみにそのコンポーネントは無視して大丈夫です
サイトのパフォーマンス取ってくれてるやつなんですが、まったく利用したことありません
とのことなので無視する。
具体的な移植作業
AEMのパーツごとに、置き換える時のコツがあるのでまとめる
ページの追加
signup.htmlの追加を例にとって解説
1.コントローラーの作成
対応するコンポーネントは
platinum-dev-env\cms\app\views\mycode\components\page\signuppage\
なので
docker-compose run -d web rails controller signuppage signuppgage
でコントローラーを作る
※-dはwindowsの場合必要
2.コントローラーに継承関係を設定
platinum-dev-env\cms\app\views\mycode\components\page\signuppage\.content.xml
を確認するとsling:resourceSuperType="mycode/components/page/guestcontentpage"だったので
platinum-dev-env\cms\app\controllers\signup_controller.rbを編集し、
class SignupController < GuestcontentpageController
にする

JSPの継承概念のERBでの擬似的表現方法
・XML内部のsling:resourceSuperTypeに書かれた継承関係をコントローラーやモデルだけでなく、ERBのrenderの（暗黙の）探索順---render呼び出し元に同名erbがあれば、そちらが優先される---を使って擬似的に表現するとこは経験豊富なメンバーに聞いてください。
　
3.ルーティングの設定
platinum-dev-env\cms\config\routes.rb を編集し、
get 'signup' => 'signup#signup' を追加する
4.テンプレートの格納
platinum-dev-env\cms\app\views\mycode\components\page\signuppage ディレクトリをみて
格納されている.html.erbを全て
platinum-dev-env\cms\app\views\signup に移動
5.テンプレートの継承
platinum-dev-env\cms\app\views\signup のテンプレートを編集する。
signupの親はguestcontentpageであるから、そちらのテンプレートを読み込むように編集する。

slimのまま作業するなら
= render template: 'guestcontentpage/guestcontentpage'
erbなら
<%= render template: 'guestcontentpage/guestcontentpage' %>
6._init.html.erb にコントローラーの初期化コードがあるとき
_init.html.erb は消してしまいましょう
（テンプレート側でコントローラーを初期化するべきではない）
7.
備考.
置き換え時に
We're sorry, but something went wrong.
のエラーが出るときは文字コードが間違っている可能性が高いです
（主にWindows作業者）
components/content
ログイン画面などで
sling:resourceType="mycode/components/content/simpleparagraph"
で参照されているcomponents/content以下のファイル（JSPファイル）を置き換える時は下記をまず行う。
コメントをJavaスタイルからRubyスタイルに変更する
//を#に変えよう。
ブロックをJavaスタイルからRubyスタイルに変更する
if {
}
は
if then
end
に変えよう
型を指定した変数宣言をやめる
String foo =
は
foo =
に変えよう
try catchはbegin rescueに
try {
 xxx
} catch (e) {
}
は
begin
rescure => e
end
に変えよう
ArrayListは[]に変えよう
ArrayList<String> classList = new ArrayList<String>()
は
classList = []
properties.getはこう変えよう
tagName = properties.get("tagName", "p");
は
tagName = properties.fetch(:tagName, "p");
に変えよう
変更の必要なし
文字列比較はequalsではなく==
if(str.equals("foo"))となっているところは
if(str == "foo" )に変えよう
変更の必要なし
ArrayList.addではなくarray.pushを使おう
classList.add("foo")はclassList.push("foo")に変えよう
コンテンツを一時的にテンプレートに埋め込む場合のルール
テンプレートを作成しているときに、一時的にモデルデータ（コンテンツデータ）をテンプレート中に埋め込む場合は
元々のJSPでコンテンツを読み込んでいる箇所（cq:include で parsys を includeする箇所）に埋め込む
YAML内部に書かれたパスの置き換え
content/dam/mycode-dev　--->　content/dam/　に
https://mycode.cdn-dena.com/contents --->  /contents に
 DAM以下の画像は下記手順で持ってきます
① platinum-cms-release_contents_20160926\jcr_root\content\dam\img\symposium など対応するディレクトリにある
　symposium-image1.jpgなど、画像名が付いたディレクトリをひらく
②platinum-cms-release_contents_20160926\jcr_root\content\dam\img\symposium\symposium-image1.jpg/.content.xml
　など画像名ディレクトリにある.content.xmlを開いてImageLength（高さ）、ImageWidth（幅）を確かめる
③上記高さと幅に対応する画像をplatinum-cms-release_contents_20160926\jcr_root\content\dam\img\symposium\symposium-image1.jpg\_jcr_content\renditions
　といったさらに深いディレクトリから取り出し、
　platinum-dev-env\cms\public\content\dam\img\symposium\symposium-image1.jpg
　として格納する

ノウハウ共有
	あ

テンプレート内のcq:includeClientLibはscriptタグやCSSのlinkタグに置換する
https://ksf-jp.slack.com/archives/dls/p1479727328002316

WebAPIのバックエンド実装でrequiredがfalseのパラメーターはオプショナルパラメーター
https://ksf-jp.slack.com/archives/dls/p1479724923002314

Javaのクラス定義に@SerializedNameやgetterが存在するときはaliasを設定する
https://ksf-jp.slack.com/archives/dls/p1479710944002255

ViewModel は app/viewmodelsに配置する
https://ksf-jp.slack.com/archives/dls/p1479702259002241

appear.in は MICミュートで常時接続しておく
https://ksf-jp.slack.com/archives/dls/p1479702395002244

コミット時はコミットコメントに絵文字を入れる
https://ksf-jp.slack.com/archives/dls/p1479463221002185




