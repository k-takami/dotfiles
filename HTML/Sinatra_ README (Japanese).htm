<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Sinatra: README (Japanese)</title>

<link rel='stylesheet'    href="/sinatra.github.com/css/application.css" type='text/css' media="screen, projection">
<link rel='stylesheet'    href="/sinatra.github.com/css/print.css"           type='text/css' media="print">
<link rel='alternate'     href="/sinatra.github.com/feed.xml"                type='application/atom+xml' title='Sinatra Blog'>
<link rel='shortcut icon' href='/sinatra.github.com/images/favicon.ico'>
<link rel="stylesheet" href="https://code.cdn.mozilla.net/fonts/fira.css">

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
<script src="js/min/menu.min.js"></script>


  </head>
  <body id=''>
    <div id='wrap'>
      <div id='head'>

  <ul id='navbar'>
    <li class='nav-list-item'><a href='http://github.com/sinatra/sinatra'>CODE</a></li>
    <li class='nav-list-item'><a href='/sinatra.github.com/documentation.html'>DOCS</a></li>
    <li class='nav-list-item'><a href='/sinatra.github.com/intro.html'>README</a></li>
    <li class='nav-list-item'><a href='/sinatra.github.com/blog.html'>BLOG</a></li>
    <li class='nav-list-item' id='nav-logo'>
      <a href='/sinatra.github.com/'><img src="/sinatra.github.com/images/logo.png" height='59' width='86' alt="Sinatra Logo"></a>
    </li>
    <li class='nav-list-item'><a href='http://github.com/sinatra/sinatra/contributors'>CREW</a></li>
    <li class='nav-list-item'><a href='/sinatra.github.com/contributing.html'>CONTRIBUTE</a></li>
    <li class='nav-list-item'><a href='/sinatra.github.com/about.html'>ABOUT</a></li>
    <li class='nav-list-item'><a href='http://sinatra-slack.herokuapp.com'>SLACK</a></li>
    <li class='nav-list-item' id='toggle-nav-logo'>
      <a href='#'><img src="/sinatra.github.com/images/logo.png" height='59' width='86' alt="Sinatra Logo"></a>
    </li>
  </ul>

  <div id='hidden-navbar-wrapper'>
    <ul class='hide' id='hidden-navbar'>
      <li class='hidden-nav-list-item'><a href='/sinatra.github.com/'>HOME</a></li>
      <li class='hidden-nav-list-item'><a href='http://github.com/sinatra/sinatra'>CODE</a></li>
      <li class='hidden-nav-list-item'><a href='/sinatra.github.com/documentation.html'>DOCS</a></li>
      <li class='hidden-nav-list-item'><a href='/sinatra.github.com/intro.html'>README</a></li>
      <li class='hidden-nav-list-item'><a href='/sinatra.github.com/blog.html'>BLOG</a></li>
      <li class='hidden-nav-list-item'><a href='http://github.com/sinatra/sinatra/contributors'>CREW</a></li>
      <li class='hidden-nav-list-item'><a href='/sinatra.github.com/about.html'>ABOUT</a></li>
      <li class='hidden-nav-list-item'><a href='/sinatra.github.com/contributing.html'>CONTRIBUTE</a></li>
      <li class='hidden-nav-list-item'><a href='http://sinatra-slack.herokuapp.com'>SLACK</a></li>
    </ul>
  </div>

</div>


      <div id='grid-wrapper'>
        <div id='content'>
          <p><small>This page is also available in
  <a href="/intro.html">English</a>,
  <a href="/intro-zh.html">Chinese</a>,
  <a href="/intro-fr.html">French</a>,
  <a href="/intro-de.html">German</a>,
  <a href="/intro-hu.html">Hungarian</a>,
  <a href="/intro-ko.html">Korean</a>,
  <a href="/intro-pt-br.html">Portuguese (Brazilian)</a>,
  <a href="/intro-pt-pt.html">Portuguese (European)</a>,
  <a href="/intro-ru.html">Russian</a> and
  <a href="/intro-es.html">Spanish</a>.</small></p>

<h1>始めよう</h1>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body>

<p><em>注）
本文書は英語から翻訳したものであり、その内容が最新でない場合もあります。最新の情報はオリジナルの英語版を参照してください。</em></p>

<p>Sinatraは最小の労力でRubyによるWebアプリケーションを手早く作るための<a href="https://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E">DSL</a>です。</p>

<pre><code class="language-ruby"># myapp.rb
require 'sinatra'

get '/' do
  'Hello world!'
end
</code></pre>

<p>gemをインストールし、</p>

<pre><code class="language-shell">gem install sinatra
</code></pre>

<p>次のように実行します。</p>

<pre><code class="language-shell">ruby myapp.rb
</code></pre>

<p><a href="http://localhost:4567">http://localhost:4567</a> を開きます。</p>

<p>ThinがあればSinatraはこれを利用するので、<code>gem install thin</code>することをお薦めします。</p>

<h2>目次</h2>



<h2>ルーティング(Routes)</h2>

<p>Sinatraでは、ルーティングはHTTPメソッドとURLマッチングパターンがペアになっています。
ルーティングはブロックに結び付けられています。</p>

<pre><code class="language-ruby">get '/' do
  .. 何か見せる ..
end

post '/' do
  .. 何か生成する ..
end

put '/' do
  .. 何か更新する ..
end

patch '/' do
  .. 何か修正する ..
end

delete '/' do
  .. 何か削除する ..
end

options '/' do
  .. 何か満たす ..
end

link '/' do
  .. 何かリンクを張る ..
end

unlink '/' do
  .. 何かアンリンクする ..
end
</code></pre>

<p>ルーティングは定義された順番にマッチします。
リクエストに最初にマッチしたルーティングが呼び出されます。</p>

<p>トレイリングスラッシュを付けたルートは、そうでないルートと異なったものになります。</p>

<pre><code class="language-ruby">    get '/foo' do
      # Does not match "GET /foo/"
    end
</code></pre>

<p>ルーティングのパターンは名前付きパラメータを含むことができ、
<code>params</code>ハッシュで取得できます。</p>

<pre><code class="language-ruby">get '/hello/:name' do
  # "GET /hello/foo" と "GET /hello/bar" にマッチ
  # params['name'] は 'foo' か 'bar'
  "Hello #{params['name']}!"
end
</code></pre>

<p>また、ブロックパラメータで名前付きパラメータにアクセスすることもできます。</p>

<pre><code class="language-ruby">get '/hello/:name' do |n|
  # "GET /hello/foo" と "GET /hello/bar" にマッチ
  # params['name'] は 'foo' か 'bar'
  # n が params['name'] を保持
  "Hello #{n}!"
end
</code></pre>

<p>ルーティングパターンはアスタリスク(すなわちワイルドカード)を含むこともでき、
<code>params['splat']</code> で取得できます。</p>

<pre><code class="language-ruby">get '/say/*/to/*' do
  # /say/hello/to/world にマッチ
  params['splat'] # =&gt; ["hello", "world"]
end

get '/download/*.*' do
  # /download/path/to/file.xml にマッチ
  params['splat'] # =&gt; ["path/to/file", "xml"]
end
</code></pre>

<p>ここで、ブロックパラメータを使うこともできます。</p>

<pre><code class="language-ruby">get '/download/*.*' do |path, ext|
  [path, ext] # =&gt; ["path/to/file", "xml"]
end
</code></pre>

<p>ルーティングを正規表現にマッチさせることもできます。</p>

<pre><code class="language-ruby">get /\/hello\/([\w]+)/ do
  "Hello, #{params['captures'].first}!"
end
</code></pre>

<p>ここでも、ブロックパラメータが使えます。</p>

<pre><code class="language-ruby">get %r{/hello/([\w]+)} do |c|
  "Hello, #{c}!"
end
</code></pre>

<p>ルーティングパターンは、オプショナルパラメータを取ることもできます。</p>

<pre><code class="language-ruby">get '/posts/:format?' do
  # "GET /posts/" と "GET /posts/json", "GET /posts/xml" の拡張子などにマッチ
end
</code></pre>

<p>ところで、ディレクトリトラバーサル攻撃防御設定を無効にしないと（下記参照）、
ルーティングにマッチする前にリクエストパスが修正される可能性があります。</p>

<h2>条件(Conditions)</h2>

<p>ルーティングにはユーザエージェントのようなさまざまな条件を含めることができます。</p>

<pre><code class="language-ruby">get '/foo', :agent =&gt; /Songbird (\d\.\d)[\d\/]*?/ do
  "Songbirdのバージョン #{params['agent'][0]}を使ってます。"
end

get '/foo' do
  # Songbird以外のブラウザにマッチ
end
</code></pre>

<p>ほかに<code>host_name</code>と<code>provides</code>条件が利用可能です。</p>

<pre><code class="language-ruby">get '/', :host_name =&gt; /^admin\./ do
  "Adminエリアです。アクセスを拒否します!"
end

get '/', :provides =&gt; 'html' do
  haml :index
end

get '/', :provides =&gt; ['rss', 'atom', 'xml'] do
  builder :feed
end
</code></pre>

<p>独自の条件を定義することも簡単にできます。</p>

<pre><code class="language-ruby">set(:probability) { |value| condition { rand &lt;= value } }

get '/win_a_car', :probability =&gt; 0.1 do
  "あなたの勝ちです!"
end

get '/win_a_car' do
  "残念、あなたの負けです。"
end
</code></pre>

<p>複数の値を取る条件には、アスタリスクを使います。</p>

<pre><code class="language-ruby">set(:auth) do |*roles|   # &lt;- ここでアスタリスクを使う
  condition do
    unless logged_in? &amp;&amp; roles.any? {|role| current_user.in_role? role }
      redirect "/login/", 303
    end
  end
end

get "/my/account/", :auth =&gt; [:user, :admin] do
  "アカウントの詳細"
end

get "/only/admin/", :auth =&gt; :admin do
  "ここは管理者だけ!"
end
</code></pre>

<h2>戻り値(Return Values)</h2>

<p>ルーティングブロックの戻り値は、HTTPクライアントまたはRackスタックでの次のミドルウェアに渡されるレスポンスボディを決定します。</p>

<p>これは大抵の場合、上の例のように文字列ですが、それ以外の値も使用することができます。</p>

<p>Rackレスポンス、Rackボディオブジェクト、HTTPステータスコードのいずれかとして妥当なオブジェクトであればどのようなオブジェクトでも返すことができます。</p>

<ul>
  <li>3つの要素を含む配列:
<code>[ステータス(Fixnum), ヘッダ(Hash), レスポンスボディ(#eachに応答する)]</code>
</li>
  <li>2つの要素を含む配列:
<code>[ステータス(Fixnum), レスポンスボディ(#eachに応答する)]</code>
</li>
  <li>
<code>#each</code>に応答するオブジェクト。通常はそのまま何も返さないが、
与えられたブロックに文字列を渡す。</li>
  <li>ステータスコードを表現する整数(Fixnum)</li>
</ul>

<p>これにより、例えばストリーミングを簡単に実装することができます。</p>

<pre><code class="language-ruby">class Stream
  def each
    100.times { |i| yield "#{i}\n" }
  end
end

get('/') { Stream.new }
</code></pre>

<p>後述する<code>stream</code>ヘルパーメソッドを使って、定型パターンを減らしつつストリーミングロジックをルーティングに埋め込むこともできます。</p>

<h2>カスタムルーティングマッチャー(Custom Route Matchers)</h2>

<p>先述のようにSinatraはルーティングマッチャーとして、文字列パターンと正規表現を使うことをビルトインでサポートしています。しかしこれに留まらず、独自のマッチャーを簡単に定義することもできるのです。</p>

<pre><code class="language-ruby">class AllButPattern
  Match = Struct.new(:captures)

  def initialize(except)
    @except   = except
    @captures = Match.new([])
  end

  def match(str)
    @captures unless @except === str
  end
end

def all_but(pattern)
  AllButPattern.new(pattern)
end

get all_but("/index") do
  # ...
end
</code></pre>

<p>ノート: この例はオーバースペックであり、以下のようにも書くことができます。</p>

<pre><code class="language-ruby">get // do
  pass if request.path_info == "/index"
  # ...
end
</code></pre>

<p>または、否定先読みを使って:</p>

<pre><code class="language-ruby">get %r{(?!/index)} do
  # ...
end
</code></pre>

<h2>静的ファイル(Static Files)</h2>

<p>静的ファイルは<code>./public</code>ディレクトリから配信されます。
<code>:public_folder</code>オプションを指定することで別の場所を指定することができます。</p>

<pre><code class="language-ruby">set :public_folder, File.dirname(__FILE__) + '/static'
</code></pre>

<p>ノート: この静的ファイル用のディレクトリ名はURL中に含まれません。
例えば、<code>./public/css/style.css</code>は<code>http://example.com/css/style.css</code>でアクセスできます。</p>

<p><code>Cache-Control</code>の設定をヘッダーへ追加するには<code>:static_cache_control</code>の設定(下記参照)を加えてください。</p>

<h2>ビュー / テンプレート(Views / Templates)</h2>

<p>各テンプレート言語はそれ自身のレンダリングメソッドを通して展開されます。それらのメソッドは単に文字列を返します。</p>

<pre><code class="language-ruby">get '/' do
  erb :index
end
</code></pre>

<p>これは、<code>views/index.erb</code>をレンダリングします。</p>

<p>テンプレート名を渡す代わりに、直接そのテンプレートの中身を渡すこともできます。</p>

<pre><code class="language-ruby">get '/' do
  code = "&lt;%= Time.now %&gt;"
  erb code
end
</code></pre>

<p>テンプレートのレイアウトは第２引数のハッシュ形式のオプションをもとに表示されます。</p>

<pre><code class="language-ruby">get '/' do
  erb :index, :layout =&gt; :post
end
</code></pre>

<p>これは、<code>views/post.erb</code>内に埋め込まれた<code>views/index.erb</code>をレンダリングします（デフォルトは<code>views/layout.erb</code>があればそれになります）。</p>

<p>Sinatraが理解できないオプションは、テンプレートエンジンに渡されることになります。</p>

<pre><code class="language-ruby">get '/' do
  haml :index, :format =&gt; :html5
end
</code></pre>

<p>テンプレート言語ごとにオプションをセットすることもできます。</p>

<pre><code class="language-ruby">set :haml, :format =&gt; :html5

get '/' do
  haml :index
end
</code></pre>

<p>レンダリングメソッドに渡されたオプションは<code>set</code>で設定されたオプションを上書きします。</p>

<p>利用可能なオプション:</p>

<dl>
  <dt>locals</dt>
  <dd>
    ドキュメントに渡されるローカルのリスト。パーシャルに便利。
    例: <tt>erb "&lt;%= foo %&gt;", :locals =&gt; {:foo =&gt; "bar"}</tt>
  </dd>

  <dt>default_encoding</dt>
  <dd>
    文字エンコーディングが確実でない場合に指定。デフォルトは、<tt>settings.default_encoding</tt>。
  </dd>

  <dt>views</dt>
  <dd>
    テンプレートを読み出すビューのディレクトリ。デフォルトは、<tt>settings.views</tt>。
  </dd>

  <dt>layout</dt>
  <dd>
    レイアウトを使うかの指定(<tt>true</tt> または <tt>false</tt>)。値がシンボルの場合は、使用するテンプレートが指定される。例: <tt>erb :index, :layout =&gt; !request.xhr?</tt>
  </dd>

  <dt>content_type</dt>
  <dd>
    テンプレートが生成するContent-Type。デフォルトはテンプレート言語ごとに異なる。
  </dd>

  <dt>scope</dt>
  <dd>
    テンプレートをレンダリングするときのスコープ。デフォルトは、アプリケーションのインスタンス。これを変更した場合、インスタンス変数およびヘルパーメソッドが利用できなくなる。
  </dd>

  <dt>layout_engine</dt>
  <dd>
    レイアウトをレンダリングするために使用するテンプレートエンジン。レイアウトをサポートしない言語で有用。デフォルトはテンプレートに使われるエンジン。例: <tt>set :rdoc, :layout_engine =&gt; :erb</tt>
  </dd>

  <dt>layout_options</dt>
  <dd>
    レイアウトをレンダリングするときだけに使う特別なオプション。例:
    <tt>set :rdoc, :layout_options =&gt; { :views =&gt; 'views/layouts' }</tt>
  </dd>
</dl>

<p>テンプレートは<code>./views</code>ディレクトリ下に配置されています。
他のディレクトリを使用する場合の例:</p>

<pre><code class="language-ruby">set :views, settings.root + '/templates'
</code></pre>

<p>テンプレートの参照は、テンプレートがサブディレクトリ内にある場合でも常にシンボルで指定することを覚えておいてください。
（これは<code>:'subdir/template'</code>または<code>'subdir/template'.to_sym</code>のように指定することを意味します。）
レンダリングメソッドにシンボルではなく文字列を渡してしまうと、そのまま文字列として出力してしまいます。</p>

<h3>リテラルテンプレート(Literal Templates)</h3>

<pre><code class="language-ruby">get '/' do
  haml '%div.title Hello World'
end
</code></pre>

<p>これはテンプレート文字列をレンダリングしています。
テンプレート文字列に関連するファイルパスや行数を<code>:path</code>や<code>:line</code>オプションで指定することで、バックトレースを明確にすることができます。</p>

<pre><code class="language-ruby">get '/' do
  haml '%div.title Hello World', :path =&gt; 'examples/file.haml', :line =&gt; 3
end
</code></pre>

<h3>利用可能なテンプレート言語</h3>

<p>いくつかの言語には複数の実装があります。使用する（そしてスレッドセーフにする）実装を指定するには、それを最初にrequireしてください。</p>

<pre><code class="language-ruby">require 'rdiscount' # または require 'bluecloth'
get('/') { markdown :index }
</code></pre>

<h4>Haml テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://haml.info/" title="haml">haml</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.haml</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>haml :index, :format =&gt; :html5</tt></td>
  </tr>
</table>

<h4>Erb テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td>
      <a href="http://www.kuwata-lab.com/erubis/" title="erubis">erubis</a>
      または erb (Rubyに同梱)
    </td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td>
<tt>.erb</tt>, <tt>.rhtml</tt> or <tt>.erubis</tt> (Erubisだけ)</td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>erb :index</tt></td>
  </tr>
</table>

<h4>Builder テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td>
      <a href="https://github.com/jimweirich/builder" title="builder">builder</a>
    </td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.builder</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>builder { |xml| xml.em "hi" }</tt></td>
  </tr>
</table>

<p>インラインテンプレート用にブロックを取ることもできます（例を参照）。</p>

<h4>Nokogiri テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://www.nokogiri.org/" title="nokogiri">nokogiri</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.nokogiri</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>nokogiri { |xml| xml.em "hi" }</tt></td>
  </tr>
</table>

<p>インラインテンプレート用にブロックを取ることもできます（例を参照）。</p>

<h4>Sass テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://sass-lang.com/" title="sass">sass</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.sass</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>sass :stylesheet, :style =&gt; :expanded</tt></td>
  </tr>
</table>

<h4>Scss テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://sass-lang.com/" title="sass">sass</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.scss</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>scss :stylesheet, :style =&gt; :expanded</tt></td>
  </tr>
</table>

<h4>Less テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://lesscss.org/" title="less">less</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.less</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>less :stylesheet</tt></td>
  </tr>
</table>

<h4>Liquid テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://liquidmarkup.org/" title="liquid">liquid</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.liquid</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>liquid :index, :locals =&gt; { :key =&gt; 'value' }</tt></td>
  </tr>
</table>

<p>LiquidテンプレートからRubyのメソッド(<code>yield</code>を除く)を呼び出すことができないため、ほぼ全ての場合にlocalsを指定する必要があるでしょう。</p>

<h4>Markdown テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td>
      次の何れか:
        <a href="https://github.com/davidfstr/rdiscount" title="RDiscount">RDiscount</a>,
        <a href="https://github.com/vmg/redcarpet" title="RedCarpet">RedCarpet</a>,
        <a href="http://deveiate.org/projects/BlueCloth" title="BlueCloth">BlueCloth</a>,
        <a href="http://kramdown.gettalong.org/" title="kramdown">kramdown</a>,
        <a href="https://github.com/bhollis/maruku" title="maruku">maruku</a>
    </td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td>
<tt>.markdown</tt>, <tt>.mkd</tt> and <tt>.md</tt>
</td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>markdown :index, :layout_engine =&gt; :erb</tt></td>
  </tr>
</table>

<p>Markdownからメソッドを呼び出すことも、localsに変数を渡すこともできません。
それゆえ、他のレンダリングエンジンとの組み合わせで使うのが普通です。</p>

<pre><code class="language-ruby">erb :overview, :locals =&gt; { :text =&gt; markdown(:introduction) }
</code></pre>

<p>ノート: 他のテンプレート内で<code>markdown</code>メソッドを呼び出せます。</p>

<pre><code class="language-ruby">%h1 Hello From Haml!
%p= markdown(:greetings)
</code></pre>

<p>MarkdownからはRubyを呼ぶことができないので、Markdownで書かれたレイアウトを使うことはできません。しかしながら、<code>:layout_engine</code>オプションを渡すことでテンプレートのものとは異なるレンダリングエンジンをレイアウトのために使うことができます。</p>

<h4>Textile テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://redcloth.org/" title="RedCloth">RedCloth</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.textile</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>textile :index, :layout_engine =&gt; :erb</tt></td>
  </tr>
</table>

<p>Textileからメソッドを呼び出すことも、localsに変数を渡すこともできません。
それゆえ、他のレンダリングエンジンとの組み合わせで使うのが普通です。</p>

<pre><code class="language-ruby">erb :overview, :locals =&gt; { :text =&gt; textile(:introduction) }
</code></pre>

<p>ノート: 他のテンプレート内で<code>textile</code>メソッドを呼び出せます。</p>

<pre><code class="language-ruby">%h1 Hello From Haml!
%p= textile(:greetings)
</code></pre>

<p>TexttileからはRubyを呼ぶことができないので、Textileで書かれたレイアウトを使うことはできません。しかしながら、<code>:layout_engine</code>オプションを渡すことでテンプレートのものとは異なるレンダリングエンジンをレイアウトのために使うことができます。</p>

<h4>RDoc テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://rdoc.sourceforge.net/" title="RDoc">RDoc</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.rdoc</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>rdoc :README, :layout_engine =&gt; :erb</tt></td>
  </tr>
</table>

<p>RDocからメソッドを呼び出すことも、localsに変数を渡すこともできません。
それゆえ、他のレンダリングエンジンとの組み合わせで使うのが普通です。</p>

<pre><code class="language-ruby">erb :overview, :locals =&gt; { :text =&gt; rdoc(:introduction) }
</code></pre>

<p>ノート: 他のテンプレート内で<code>rdoc</code>メソッドを呼び出せます。</p>

<pre><code class="language-ruby">%h1 Hello From Haml!
%p= rdoc(:greetings)
</code></pre>

<p>RDocからはRubyを呼ぶことができないので、RDocで書かれたレイアウトを使うことはできません。しかしながら、<code>:layout_engine</code>オプションを渡すことでテンプレートのものとは異なるレンダリングエンジンをレイアウトのために使うことができます。</p>

<h4>AsciiDoc テンプレート</h4>

<table>
 <tr>
   <td>依存</td>
   <td><a href="http://asciidoctor.org/" title="Asciidoctor">Asciidoctor</a></td>
 </tr>
 <tr>
   <td>ファイル拡張子</td>
   <td>
<tt>.asciidoc</tt>, <tt>.adoc</tt> and <tt>.ad</tt>
</td>
 </tr>
 <tr>
   <td>例</td>
   <td><tt>asciidoc :README, :layout_engine =&gt; :erb</tt></td>
 </tr>
</table>

<p>AsciiDocテンプレートからRubyのメソッドを直接呼び出すことができないため、ほぼ全ての場合にlocalsを指定する必要があるでしょう。</p>

<h4>Radius テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="https://github.com/jlong/radius" title="Radius">Radius</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.radius</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>radius :index, :locals =&gt; { :key =&gt; 'value' }</tt></td>
  </tr>
</table>

<p>RadiusテンプレートからRubyのメソッドを直接呼び出すことができないため、ほぼ全ての場合にlocalsを指定する必要があるでしょう。</p>

<h4>Markaby テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://markaby.github.io/" title="Markaby">Markaby</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.mab</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>markaby { h1 "Welcome!" }</tt></td>
  </tr>
</table>

<p>インラインテンプレート用にブロックを取ることもできます（例を参照）。</p>

<h4>RABL テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="https://github.com/nesquena/rabl" title="Rabl">Rabl</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.rabl</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>rabl :index</tt></td>
  </tr>
</table>

<h4>Slim テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="http://slim-lang.com/" title="Slim Lang">Slim Lang</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.slim</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>slim :index</tt></td>
  </tr>
</table>

<h4>Creole テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="https://github.com/minad/creole" title="Creole">Creole</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.creole</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>creole :wiki, :layout_engine =&gt; :erb</tt></td>
  </tr>
</table>

<p>Creoleからメソッドを呼び出すことも、localsに変数を渡すこともできません。
それゆえ、他のレンダリングエンジンとの組み合わせで使うのが普通です。</p>

<pre><code class="language-ruby">erb :overview, :locals =&gt; { :text =&gt; creole(:introduction) }
</code></pre>

<p>ノート: 他のテンプレート内で<code>creole</code>メソッドを呼び出せます。</p>

<pre><code class="language-ruby">%h1 Hello From Haml!
%p= creole(:greetings)
</code></pre>

<p>CreoleからはRubyを呼ぶことができないので、Creoleで書かれたレイアウトを使うことはできません。しかしながら、<code>:layout_engine</code>オプションを渡すことでテンプレートのものとは異なるレンダリングエンジンをレイアウトのために使うことができます。</p>

<h4>MediaWiki テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="https://github.com/nricciar/wikicloth" title="WikiCloth">WikiCloth</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td>
<tt>.mediawiki</tt> および <tt>.mw</tt>
</td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>mediawiki :wiki, :layout_engine =&gt; :erb</tt></td>
  </tr>
</table>

<p>MediaWikiのテンプレートは直接メソッドから呼び出したり、ローカル変数を通すことはできません。それゆえに、通常は別のレンダリングエンジンと組み合わせて利用します。</p>

<pre><code class="language-ruby">erb :overview, :locals =&gt; { :text =&gt; mediawiki(:introduction) }
</code></pre>

<p>ノート: 他のテンプレートから部分的に<code>mediawiki</code>メソッドを呼び出すことも可能です。</p>

<h4>CoffeeScript テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td>
      <a href="https://github.com/josh/ruby-coffee-script" title="Ruby CoffeeScript">
        CoffeeScript
      </a> および
      <a href="https://github.com/sstephenson/execjs/blob/master/README.md#readme" title="ExecJS">
        JavaScriptの起動方法
      </a>
    </td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.coffee</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>coffee :index</tt></td>
  </tr>
</table>

<h4>Stylus テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td>
      <a href="https://github.com/forgecrafted/ruby-stylus" title="Ruby Stylus">
        Stylus
      </a> および
      <a href="https://github.com/sstephenson/execjs/blob/master/README.md#readme" title="ExecJS">
        JavaScriptの起動方法
      </a>
    </td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.styl</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>stylus :index</tt></td>
  </tr>
</table>

<p>Stylusテンプレートを使えるようにする前に、まず<code>stylus</code>と<code>stylus/tilt</code>を読み込む必要があります。</p>

<pre><code class="language-ruby">require 'sinatra'
require 'stylus'
require 'stylus/tilt'

get '/' do
  stylus :example
end
</code></pre>

<h4>Yajl テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="https://github.com/brianmario/yajl-ruby" title="yajl-ruby">yajl-ruby</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.yajl</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td>
      <tt>
        yajl :index,
             :locals =&gt; { :key =&gt; 'qux' },
             :callback =&gt; 'present',
             :variable =&gt; 'resource'
      </tt>
    </td>
  </tr>
</table>

<p>テンプレートのソースはRubyの文字列として評価され、その結果のJSON変数は<code>#to_json</code>を使って変換されます。</p>

<pre><code class="language-ruby">json = { :foo =&gt; 'bar' }
json[:baz] = key
</code></pre>

<p><code>:callback</code>および<code>:variable</code>オプションは、レンダリングされたオブジェクトを装飾するために使うことができます。</p>

<pre><code class="language-ruby">var resource = {"foo":"bar","baz":"qux"}; present(resource);
</code></pre>

<h4>WLang テンプレート</h4>

<table>
  <tr>
    <td>依存</td>
    <td><a href="https://github.com/blambeau/wlang/" title="wlang">wlang</a></td>
  </tr>
  <tr>
    <td>ファイル拡張子</td>
    <td><tt>.wlang</tt></td>
  </tr>
  <tr>
    <td>例</td>
    <td><tt>wlang :index, :locals =&gt; { :key =&gt; 'value' }</tt></td>
  </tr>
</table>

<p>WLang内でのRubyメソッドの呼び出しは一般的ではないので、ほとんどの場合にlocalsを指定する必要があるでしょう。しかしながら、WLangで書かれたレイアウトは<code>yield</code>をサポートしています。</p>

<h3>テンプレート内での変数へのアクセス</h3>

<p>テンプレートはルーティングハンドラと同じコンテキストの中で評価されます。ルーティングハンドラでセットされたインスタンス変数はテンプレート内で直接使うことができます。</p>

<pre><code class="language-ruby">get '/:id' do
  @foo = Foo.find(params['id'])
  haml '%h1= @foo.name'
end
</code></pre>

<p>また、ローカル変数のハッシュで明示的に指定することもできます。</p>

<pre><code class="language-ruby">get '/:id' do
  foo = Foo.find(params['id'])
  haml '%h1= bar.name', :locals =&gt; { :bar =&gt; foo }
end
</code></pre>

<p>これは他のテンプレート内で部分テンプレートとして表示する典型的な手法です。</p>

<h3>
<code>yield</code>を伴うテンプレートとネストしたレイアウト</h3>

<p>レイアウトは通常、<code>yield</code>を呼ぶ単なるテンプレートに過ぎません。
そのようなテンプレートは、既に説明した<code>:template</code>オプションを通して使われるか、または次のようなブロックを伴ってレンダリングされます。</p>

<pre><code class="language-ruby">erb :post, :layout =&gt; false do
  erb :index
end
</code></pre>

<p>このコードは、<code>erb :index, :layout =&gt; :post</code>とほぼ等価です。</p>

<p>レンダリングメソッドにブロックを渡すスタイルは、ネストしたレイアウトを作るために最も役立ちます。</p>

<pre><code class="language-ruby">erb :main_layout, :layout =&gt; false do
  erb :admin_layout do
    erb :user
  end
end
</code></pre>

<p>これはまた次のより短いコードでも達成できます。</p>

<pre><code class="language-ruby">erb :admin_layout, :layout =&gt; :main_layout do
  erb :user
end
</code></pre>

<p>現在、次のレンダリングメソッドがブロックを取れます: <code>erb</code>, <code>haml</code>,
<code>liquid</code>, <code>slim </code>, <code>wlang</code>。
また汎用の<code>render</code>メソッドもブロックを取れます。</p>

<h3>インラインテンプレート(Inline Templates)</h3>

<p>テンプレートはソースファイルの最後で定義することもできます。</p>

<pre><code class="language-ruby">require 'sinatra'

get '/' do
  haml :index
end

__END__

@@ layout
%html
  = yield

@@ index
%div.title Hello world!!!!!
</code></pre>

<p>ノート: Sinatraをrequireするソースファイル内で定義されたインラインテンプレートは自動的に読み込まれます。他のソースファイル内にインラインテンプレートがある場合には<code>enable :inline_templates</code>を明示的に呼んでください。</p>

<h3>名前付きテンプレート(Named Templates)</h3>

<p>テンプレートはトップレベルの<code>template</code>メソッドで定義することもできます。</p>

<pre><code class="language-ruby">template :layout do
  "%html\n  =yield\n"
end

template :index do
  '%div.title Hello World!'
end

get '/' do
  haml :index
end
</code></pre>

<p>「layout」という名前のテンプレートが存在する場合は、そのテンプレートファイルは他のテンプレートがレンダリングされる度に使用されます。<code>:layout =&gt; false</code>で個別に、または<code>set :haml, :layout =&gt; false</code>でデフォルトとして、レイアウトを無効にすることができます。</p>

<pre><code class="language-ruby">get '/' do
  haml :index, :layout =&gt; !request.xhr?
end
</code></pre>

<h3>ファイル拡張子の関連付け</h3>

<p>任意のテンプレートエンジンにファイル拡張子を関連付ける場合は、<code>Tilt.register</code>を使います。例えば、Textileテンプレートに<code>tt</code>というファイル拡張子を使いたい場合は、以下のようにします。</p>

<pre><code class="language-ruby">Tilt.register :tt, Tilt[:textile]
</code></pre>

<h3>オリジナルテンプレートエンジンの追加</h3>

<p>まず、Tiltでそのエンジンを登録し、次にレンダリングメソッドを作ります。</p>

<pre><code class="language-ruby">Tilt.register :myat, MyAwesomeTemplateEngine

helpers do
  def myat(*args) render(:myat, *args) end
end

get '/' do
  myat :index
end
</code></pre>

<p>これは、<code>./views/index.myat</code>をレンダリングします。Tiltについての詳細は、https://github.com/rtomayko/tilt を参照してください。</p>

<h3>カスタムロジックを使用したテンプレートの探索</h3>

<p>オリジナルテンプレートの検索メカニズムを実装するためには、<code>#find_template</code>メソッドを実装します。</p>

<pre><code class="language-ruby">configure do
  set :views [ './views/a', './views/b' ]
end

def find_template(views, name, engine, &amp;block)
  Array(views).each do |v|
    super(v, name, engine, &amp;block)
  end
end
</code></pre>

<h2>フィルタ(Filters)</h2>

<p>beforeフィルタは、リクエストのルーティングと同じコンテキストで各リクエストの前に評価され、それによってリクエストとレスポンスを変更可能にします。フィルタ内でセットされたインスタンス変数はルーティングとテンプレートからアクセスすることができます。</p>

<pre><code class="language-ruby">before do
  @note = 'Hi!'
  request.path_info = '/foo/bar/baz'
end

get '/foo/*' do
  @note #=&gt; 'Hi!'
  params['splat'] #=&gt; 'bar/baz'
end
</code></pre>

<p>afterフィルタは、リクエストのルーティングと同じコンテキストで各リクエストの後に評価され、それによってこれもリクエストとレスポンスを変更可能にします。beforeフィルタとルーティング内でセットされたインスタンス変数はafterフィルタからアクセスすることができます。</p>

<pre><code class="language-ruby">after do
  puts response.status
end
</code></pre>

<p>ノート: <code>body</code>メソッドを使わずにルーティングから文字列を返すだけの場合、その内容はafterフィルタでまだ利用できず、その後に生成されることになります。</p>

<p>フィルタにはオプションとしてパターンを渡すことができ、この場合はリクエストのパスがパターンにマッチした場合にのみフィルタが評価されるようになります。</p>

<pre><code class="language-ruby">before '/protected/*' do
  authenticate!
end

after '/create/:slug' do |slug|
  session[:last_slug] = slug
end
</code></pre>

<p>ルーティング同様、フィルタもまた条件を取ることができます。</p>

<pre><code class="language-ruby">before :agent =&gt; /Songbird/ do
  # ...
end

after '/blog/*', :host_name =&gt; 'example.com' do
  # ...
end
</code></pre>

<h2>ヘルパー(Helpers)</h2>

<p>トップレベルの<code>helpers</code>メソッドを使用してルーティングハンドラやテンプレートで使うヘルパーメソッドを定義できます。</p>

<pre><code class="language-ruby">helpers do
  def bar(name)
    "#{name}bar"
  end
end

get '/:name' do
  bar(params['name'])
end
</code></pre>

<p>あるいは、ヘルパーメソッドをモジュール内で個別に定義することもできます。</p>

<pre><code class="language-ruby">module FooUtils
  def foo(name) "#{name}foo" end
end

module BarUtils
  def bar(name) "#{name}bar" end
end

helpers FooUtils, BarUtils
</code></pre>

<p>その効果は、アプリケーションクラスにモジュールをインクルードするのと同じです。</p>

<h3>セッションの使用</h3>

<p>セッションはリクエスト間での状態維持のために使用されます。セッションを有効化すると、ユーザセッションごとに一つのセッションハッシュが与えられます。</p>

<pre><code class="language-ruby">enable :sessions

get '/' do
  "value = " &lt;&lt; session[:value].inspect
end

get '/:value' do
  session[:value] = params['value']
end
</code></pre>

<p>ノート: <code>enable :sessions</code>は実際にはすべてのデータをクッキーに保持します。これは必ずしも期待通りのものにならないかもしれません（例えば、大量のデータを保持することでトラフィックが増大するなど）。Rackセッションミドルウェアの利用が可能であり、その場合は<code>enable :sessions</code>を呼ばずに、選択したミドルウェアを他のミドルウェアのときと同じようにして取り込んでください。</p>

<pre><code class="language-ruby">use Rack::Session::Pool, :expire_after =&gt; 2592000

get '/' do
  "value = " &lt;&lt; session[:value].inspect
end

get '/:value' do
  session[:value] = params['value']
end
</code></pre>

<p>セキュリティ向上のため、クッキー内のセッションデータはセッション秘密鍵(session secret)で署名されます。Sinatraによりランダムな秘密鍵が個別に生成されます。しかし、この秘密鍵はアプリケーションの立ち上げごとに変わってしまうので、すべてのアプリケーションのインスタンスで共有できる秘密鍵をセットしたくなるかもしれません。</p>

<pre><code class="language-ruby">set :session_secret, 'super secret'
</code></pre>

<p>更に、設定変更をしたい場合は、<code>sessions</code>の設定においてオプションハッシュを保持することもできます。</p>

<pre><code class="language-ruby">set :sessions, :domain =&gt; 'foo.com'
</code></pre>

<p>foo.comのサブドメイン上のアプリ間でセッションを共有化したいときは、代わりにドメインの前に <em>.</em> を付けます。</p>

<pre><code class="language-ruby">set :sessions, :domain =&gt; '.foo.com'
</code></pre>

<h4>セッションミドルウェアの選択</h4>

<p><code>enable :sessions</code>とすることで、クッキー内の全てのデータを実際に保存してしまうことに注意してください。
これは、あなたが望む挙動ではない（例えば、大量のデータを保存することでトラフィックが増大してしまう）かもしれません。
あなたは、次のいずれかの方法によって、任意のRackセッションミドルウェアを使用することができます。</p>

<pre><code class="language-ruby">enable :sessions
set :session_store, Rack::Session::Pool
</code></pre>

<p>オプションのハッシュを設定するためには、次のようにします。</p>

<pre><code class="language-ruby">set :sessions, :expire_after =&gt; 2592000
set :session_store, Rack::Session::Pool
</code></pre>

<p>他の方法は<code>enable :sessions</code>を<strong>しない</strong>で、他のミドルウェアの選択と同様にあなた自身でミドルウェアを選択することです。</p>

<p>この方法を選択する場合は、セッションベースの保護は<strong>デフォルトで有効にならない</strong>ということに注意することが重要です。</p>

<p>これを満たすためのRackミドルウェアを追加することが必要になります。</p>

<pre><code class="language-ruby">use Rack::Session::Pool, :expire_after =&gt; 2592000
use Rack::Protection::RemoteToken
use Rack::Protection::SessionHijacking
</code></pre>

<p>より詳しい情報は、「攻撃防御に対する設定」の項を参照してください。</p>

<h3>停止(Halting)</h3>

<p>フィルタまたはルーティング内で直ちにリクエストを止める場合</p>

<pre><code class="language-ruby">halt
</code></pre>

<p>この際、ステータスを指定することもできます。</p>

<pre><code class="language-ruby">halt 410
</code></pre>

<p>body部を指定することも、</p>

<pre><code class="language-ruby">halt 'ここにbodyを書く'
</code></pre>

<p>ステータスとbody部を指定することも、</p>

<pre><code class="language-ruby">halt 401, '立ち去れ!'
</code></pre>

<p>ヘッダを付けることもできます。</p>

<pre><code class="language-ruby">halt 402, {'Content-Type' =&gt; 'text/plain'}, 'リベンジ'
</code></pre>

<p>もちろん、テンプレートを<code>halt</code>に結びつけることも可能です。</p>

<pre><code class="language-ruby">halt erb(:error)
</code></pre>

<h3>パッシング(Passing)</h3>

<p>ルーティングは<code>pass</code>を使って次のルーティングに飛ばすことができます。</p>

<pre><code class="language-ruby">get '/guess/:who' do
  pass unless params['who'] == 'Frank'
  "見つかっちゃった!"
end

get '/guess/*' do
  "はずれです!"
end
</code></pre>

<p>ルーティングブロックからすぐに抜け出し、次にマッチするルーティングを実行します。マッチするルーティングが見当たらない場合は404が返されます。</p>

<h3>別ルーティングの誘発</h3>

<p><code>pass</code>を使ってルーティングを飛ばすのではなく、他のルーティングを呼んだ結果を得たいという場合があります。
これは<code>call</code>を使用することで実現できます。</p>

<pre><code class="language-ruby">get '/foo' do
  status, headers, body = call env.merge("PATH_INFO" =&gt; '/bar')
  [status, headers, body.map(&amp;:upcase)]
end

get '/bar' do
  "bar"
end
</code></pre>

<p>ノート: 先の例において、テストを楽にしパフォーマンスを改善するには、<code>"bar"</code>を単にヘルパーに移し、<code>/foo</code>および<code>/bar</code>から使えるようにしたほうが良いです。</p>

<p>リクエストが、その複製物でない同じアプリケーションのインスタンスに送られるようにしたいときは、<code>call</code>に代えて<code>call!</code>を使ってください。</p>

<p><code>call</code>についての詳細はRackの仕様を参照してください。</p>

<h3>ボディ、ステータスコードおよびヘッダの設定</h3>

<p>ステータスコードおよびレスポンスボディを、ルーティングブロックの戻り値にセットすることが可能であり、これは推奨されています。しかし、あるケースでは実行フローの任意のタイミングでボディをセットしたくなるかもしれません。<code>body</code>ヘルパーメソッドを使えばそれができます。そうすると、それ以降、ボディにアクセスするためにそのメソッドを使うことができるようになります。</p>

<pre><code class="language-ruby">get '/foo' do
  body "bar"
end

after do
  puts body
end
</code></pre>

<p>また、<code>body</code>にはブロックを渡すことができ、これはRackハンドラにより実行されることになります(これはストリーミングを実装するのに使われます。”戻り値”の項を参照してください。)</p>

<p>ボディと同様に、ステータスコードおよびヘッダもセットできます。</p>

<pre><code class="language-ruby">get '/foo' do
  status 418
  headers \
    "Allow"   =&gt; "BREW, POST, GET, PROPFIND, WHEN",
    "Refresh" =&gt; "Refresh: 20; http://www.ietf.org/rfc/rfc2324.txt"
  body "I'm a tea pot!"
end
</code></pre>

<p>引数を伴わない<code>body</code>、<code>headers</code>、<code>status</code>などは、それらの現在の値にアクセスするために使えます。</p>

<h3>ストリーミングレスポンス(Streaming Responses)</h3>

<p>レスポンスボディの部分を未だ生成している段階で、データを送り出したいということがあります。極端な例では、クライアントがコネクションを閉じるまでデータを送り続けたいことがあります。<code>stream</code>ヘルパーを使えば、独自ラッパーを作る必要はありません。</p>

<pre><code class="language-ruby">get '/' do
  stream do |out|
    out &lt;&lt; "それは伝 -\n"
    sleep 0.5
    out &lt;&lt; " (少し待つ) \n"
    sleep 1
    out &lt;&lt; "- 説になる！\n"
  end
end
</code></pre>

<p>これはストリーミングAPI、<a href="https://w3c.github.io/eventsource/">Server Sent Events</a>の実装を可能にし、<a href="https://en.wikipedia.org/wiki/WebSocket">WebSockets</a>の土台に使うことができます。また、一部のコンテンツが遅いリソースに依存しているときに、スループットを上げるために使うこともできます。</p>

<p>ノート: ストリーミングの挙動、特に並行リクエスト(cuncurrent requests)の数は、アプリケーションを提供するのに使われるWebサーバに強く依存します。いくつかのサーバは、ストリーミングを全くサポートしません。サーバがストリーミングをサポートしない場合、ボディは<code>stream</code>に渡されたブロックの実行が終了した後、一度に全部送られることになります。ストリーミングは、Shotgunを使った場合は全く動作しません。</p>

<p>オプション引数が<code>keep_open</code>にセットされている場合、ストリームオブジェクト上で<code>close</code>は呼ばれず、実行フローの任意の遅れたタイミングでユーザがこれを閉じることを可能にします。これはThinやRainbowsのようなイベント型サーバ上でしか機能しません。他のサーバでは依然ストリームは閉じられます。</p>

<pre><code class="language-ruby"># ロングポーリング

set :server, :thin
connections = []

get '/subscribe' do
  # サーバイベントにおけるクライアントの関心を登録
  stream(:keep_open) do |out|
    connections &lt;&lt; out
    # 死んでいるコネクションを排除
    connections.reject!(&amp;:closed?)
  end
end

post '/message' do
  connections.each do |out|
    # クライアントへ新規メッセージ到着の通知
    out &lt;&lt; params['message'] &lt;&lt; "\n"

    # クライアントへの再接続の指示
    out.close
  end

  # 肯定応答
  "message received"
end
</code></pre>

<p>クライアントはソケットに書き込もうとしている接続を閉じることも可能です。そのため、記述しようとする前に<code>out.closed?</code>をチェックすることを勧めます。</p>

<h3>ロギング(Logging)</h3>

<p>リクエストスコープにおいて、<code>logger</code>ヘルパーは<code>Logger</code>インスタンスを作り出します。</p>

<pre><code class="language-ruby">get '/' do
  logger.info "loading data"
  # ...
end
</code></pre>

<p>このロガーは、自動でRackハンドラのロギング設定を参照します。ロギングが無効(disabled)にされている場合、このメソッドはダミーオブジェクトを返すので、ルーティングやフィルタにおいて特に心配することはありません。</p>

<p>ノート: ロギングは、<code>Sinatra::Application</code>に対してのみデフォルトで有効にされているので、<code>Sinatra::Base</code>を継承している場合は、ユーザがこれを有効化する必要があります。</p>

<pre><code class="language-ruby">class MyApp &lt; Sinatra::Base
  configure :production, :development do
    enable :logging
  end
end
</code></pre>

<p>ロギングミドルウェアが設定されてしまうのを避けるには、<code>logging</code>設定を<code>nil</code>にセットします。しかしこの場合、<code>logger</code>が<code>nil</code>を返すことを忘れないように。よくあるユースケースは、オリジナルのロガーをセットしたいときです。Sinatraは、とにかく<code>env['rack.logger']</code>で見つかるものを使います。</p>

<h3>MIMEタイプ(Mime Types)</h3>

<p><code>send_file</code>か静的ファイルを使う時、SinatraがMIMEタイプを理解できない場合があります。その時は <code>mime_type</code> を使ってファイル拡張子毎に登録してください。</p>

<pre><code class="language-ruby">configure do
  mime_type :foo, 'text/foo'
end
</code></pre>

<p>これは<code>content_type</code>ヘルパーで利用することができます:</p>

<pre><code class="language-ruby">get '/' do
  content_type :foo
  "foo foo foo"
end
</code></pre>

<h3>URLの生成</h3>

<p>URLを生成するためには<code>url</code>ヘルパーメソッドが使えます。Hamlではこのようにします。</p>

<pre><code class="language-ruby">%a{:href =&gt; url('/foo')} foo
</code></pre>

<p>これはリバースプロキシおよびRackルーティングを、それらがあれば考慮に入れます。</p>

<p>このメソッドには<code>to</code>というエイリアスがあります(以下の例を参照)。</p>

<h3>ブラウザリダイレクト(Browser Redirect)</h3>

<p><code>redirect</code> ヘルパーメソッドを使うことで、ブラウザをリダイレクトさせることができます。</p>

<pre><code class="language-ruby">get '/foo' do
  redirect to('/bar')
end
</code></pre>

<p>他に追加されるパラメータは、<code>halt</code>に渡される引数と同様に取り扱われます。</p>

<pre><code class="language-ruby">redirect to('/bar'), 303
redirect 'http://www.google.com/', 'wrong place, buddy'
</code></pre>

<p>また、<code>redirect back</code>を使えば、簡単にユーザが来たページへ戻るリダイレクトを作れます。</p>

<pre><code class="language-ruby">get '/foo' do
  "&lt;a href='/bar'&gt;do something&lt;/a&gt;"
end

get '/bar' do
  do_something
  redirect back
end
</code></pre>

<p>redirectに引数を渡すには、それをクエリーに追加するか、</p>

<pre><code class="language-ruby">redirect to('/bar?sum=42')
</code></pre>

<p>または、セッションを使います。</p>

<pre><code class="language-ruby">enable :sessions

get '/foo' do
  session[:secret] = 'foo'
  redirect to('/bar')
end

get '/bar' do
  session[:secret]
end
</code></pre>

<h3>キャッシュ制御(Cache Control)</h3>

<p>ヘッダを正しく設定することが、適切なHTTPキャッシングのための基礎となります。</p>

<p>キャッシュ制御ヘッダ(Cache-Control header)は、次のように簡単に設定できます。</p>

<pre><code class="language-ruby">get '/' do
  cache_control :public
  "キャッシュしました!"
end
</code></pre>

<p>ヒント: キャッシングをbeforeフィルタ内で設定します。</p>

<pre><code class="language-ruby">before do
  cache_control :public, :must_revalidate, :max_age =&gt; 60
end
</code></pre>

<p><code>expires</code>ヘルパーを対応するヘッダに使っている場合は、キャッシュ制御は自動で設定されます。</p>

<pre><code class="language-ruby">before do
  expires 500, :public, :must_revalidate
end
</code></pre>

<p>キャッシュを適切に使うために、<code>etag</code>または<code>last_modified</code>を使うことを検討してください。これらのヘルパーを、重い仕事をさせる <em>前</em> に呼ぶことを推奨します。そうすれば、クライアントが既にキャッシュに最新版を持っている場合はレスポンスを直ちに破棄するようになります。</p>

<pre><code class="language-ruby">get '/article/:id' do
  @article = Article.find params['id']
  last_modified @article.updated_at
  etag @article.sha1
  erb :article
end
</code></pre>

<p>また、<a href="https://ja.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation">weak ETag</a>を使うこともできます。</p>

<pre><code class="language-ruby">etag @article.sha1, :weak
</code></pre>

<p>これらのヘルパーは、キャッシングをしてくれませんが、必要な情報をキャッシュに与えてくれます。もし手早いリバースプロキシキャッシングの解決策をお探しなら、 <a href="https://github.com/rtomayko/rack-cache">rack-cache</a>を試してください。</p>

<pre><code class="language-ruby">require "rack/cache"
require "sinatra"

use Rack::Cache

get '/' do
  cache_control :public, :max_age =&gt; 36000
  sleep 5
  "hello"
end
</code></pre>

<p><code>:static_cache_control</code>設定(以下を参照)を、キャッシュ制御ヘッダ情報を静的ファイルに追加するために使ってください。</p>

<p>RFC 2616によれば、アプリケーションは、If-MatchまたはIf-None-Matchヘッダが<code>*</code>に設定されている場合には、要求されたリソースが既に存在するか否かに応じて、異なる振る舞いをすべきとなっています。Sinatraは、getのような安全なリクエストおよびputのような冪等なリクエストは既に存在しているものとして仮定し、一方で、他のリソース(例えば、postリクエスト)は新たなリソースとして取り扱われるよう仮定します。この振る舞いは、<code>:new_resource</code>オプションを渡すことで変更できます。</p>

<pre><code class="language-ruby">get '/create' do
  etag '', :new_resource =&gt; true
  Article.create
  erb :new_article
end
</code></pre>

<p>ここでもWeak ETagを使いたい場合は、<code>:kind</code>オプションを渡してください。</p>

<pre><code class="language-ruby">etag '', :new_resource =&gt; true, :kind =&gt; :weak
</code></pre>

<h3>ファイルの送信</h3>

<p>ファイルを送信するには、<code>send_file</code>ヘルパーメソッドを使います。</p>

<pre><code class="language-ruby">get '/' do
  send_file 'foo.png'
end
</code></pre>

<p>これはオプションを取ることもできます。</p>

<pre><code class="language-ruby">send_file 'foo.png', :type =&gt; :jpg
</code></pre>

<p>オプション一覧</p>

<dl>
  <dt>filename</dt>
    <dd>ファイル名。デフォルトは実際のファイル名。</dd>

  <dt>last_modified</dt>
    <dd>Last-Modifiedヘッダの値。デフォルトはファイルのmtime。</dd>

  <dt>type</dt>
    <dd>コンテンツの種類。設定がない場合、ファイル拡張子から類推される。</dd>

  <dt>disposition</dt>
    <dd>
      Content-Dispositionに使われる。許容値: <tt>nil</tt> (デフォルト)、
      <tt>:attachment</tt> および <tt>:inline</tt>
    </dd>

  <dt>length</dt>
    <dd>Content-Lengthヘッダ。デフォルトはファイルサイズ。</dd>

  <dt>status</dt>
    <dd>
      送られるステータスコード。静的ファイルをエラーページとして送るときに便利。

      Rackハンドラでサポートされている場合は、Rubyプロセスからのストリーミング以外の手段が使われる。このヘルパーメソッドを使うと、Sinatraは自動で範囲リクエスト(range requests)を扱う。
    </dd>
</dl>

<h3>リクエストオブジェクトへのアクセス</h3>

<p>受信するリクエストオブジェクトは、<code>request</code>メソッドを通じてリクエストレベル(フィルタ、ルーティング、エラーハンドラ)からアクセスすることができます。</p>

<pre><code class="language-ruby"># アプリケーションが http://example.com/example で動作している場合
get '/foo' do
  t = %w[text/css text/html application/javascript]
  request.accept              # ['text/html', '*/*']
  request.accept? 'text/xml'  # true
  request.preferred_type(t)   # 'text/html'
  request.body                # クライアントによって送信されたリクエストボディ(下記参照)
  request.scheme              # "http"
  request.script_name         # "/example"
  request.path_info           # "/foo"
  request.port                # 80
  request.request_method      # "GET"
  request.query_string        # ""
  request.content_length      # request.bodyの長さ
  request.media_type          # request.bodyのメディアタイプ
  request.host                # "example.com"
  request.get?                # true (他の動詞にも同種メソッドあり)
  request.form_data?          # false
  request["some_param"]       # some_param変数の値。[]はパラメータハッシュのショートカット
  request.referrer            # クライアントのリファラまたは'/'
  request.user_agent          # ユーザエージェント (:agent 条件によって使用される)
  request.cookies             # ブラウザクッキーのハッシュ
  request.xhr?                # Ajaxリクエストかどうか
  request.url                 # "http://example.com/example/foo"
  request.path                # "/example/foo"
  request.ip                  # クライアントのIPアドレス
  request.secure?             # false (sslではtrueになる)
  request.forwarded?          # true (リバースプロキシの裏で動いている場合)
  request.env                 # Rackによって渡された生のenvハッシュ
end
</code></pre>

<p><code>script_name</code>や<code>path_info</code>などのオプションは次のように利用することもできます。</p>

<pre><code class="language-ruby">before { request.path_info = "/" }

get "/" do
  "全てのリクエストはここに来る"
end
</code></pre>

<p><code>request.body</code>はIOまたはStringIOのオブジェクトです。</p>

<pre><code class="language-ruby">post "/api" do
  request.body.rewind  # 既に読まれているときのため
  data = JSON.parse request.body.read
  "Hello #{data['name']}!"
end
</code></pre>

<h3>アタッチメント(Attachments)</h3>

<p><code>attachment</code>ヘルパーを使って、レスポンスがブラウザに表示されるのではなく、ディスクに保存されることをブラウザに対し通知することができます。</p>

<pre><code class="language-ruby">get '/' do
  attachment
  "保存しました!"
end
</code></pre>

<p>ファイル名を渡すこともできます。</p>

<pre><code class="language-ruby">get '/' do
  attachment "info.txt"
  "保存しました!"
end
</code></pre>

<h3>日付と時刻の取り扱い</h3>

<p>Sinatraは<code>time_for</code>ヘルパーメソッドを提供しており、それは与えられた値からTimeオブジェクトを生成します。これはまた<code>DateTime</code>、<code>Date</code>および類似のクラスを変換できます。</p>

<pre><code class="language-ruby">get '/' do
  pass if Time.now &gt; time_for('Dec 23, 2012')
  "まだ時間がある"
end
</code></pre>

<p>このメソッドは、<code>expires</code>、<code>last_modified</code>といった種類のものの内部で使われています。そのため、アプリケーションにおいて、<code>time_for</code>をオーバーライドすることでそれらのメソッドの挙動を簡単に拡張できます。</p>

<pre><code class="language-ruby">helpers do
  def time_for(value)
    case value
    when :yesterday then Time.now - 24*60*60
    when :tomorrow  then Time.now + 24*60*60
    else super
    end
  end
end

get '/' do
  last_modified :yesterday
  expires :tomorrow
  "hello"
end
</code></pre>

<h3>テンプレートファイルの探索</h3>

<p><code>find_template</code>ヘルパーは、レンダリングのためのテンプレートファイルを見つけるために使われます。</p>

<pre><code class="language-ruby">find_template settings.views, 'foo', Tilt[:haml] do |file|
  puts "could be #{file}"
end
</code></pre>

<p>この例はあまり有益ではありません。しかし、このメソッドを、独自の探索機構で働くようオーバーライドするなら有益になります。例えば、複数のビューディレクトリを使えるようにしたいときがあります。</p>

<pre><code class="language-ruby">set :views, ['views', 'templates']

helpers do
  def find_template(views, name, engine, &amp;block)
    Array(views).each { |v| super(v, name, engine, &amp;block) }
  end
end
</code></pre>

<p>他の例としては、異なるエンジン用の異なるディレクトリを使う場合です。</p>

<pre><code class="language-ruby">set :views, :sass =&gt; 'views/sass', :haml =&gt; 'templates', :default =&gt; 'views'

helpers do
  def find_template(views, name, engine, &amp;block)
    _, folder = views.detect { |k,v| engine == Tilt[k] }
    folder ||= views[:default]
    super(folder, name, engine, &amp;block)
  end
end
</code></pre>

<p>これをエクステンションとして書いて、他の人と簡単に共有することもできます！</p>

<p>ノート: <code>find_template</code>はファイルが実際に存在するかのチェックをしませんが、与えられたブロックをすべての可能なパスに対し呼び出します。これがパフォーマンス上の問題にはならないのは、<code>render</code>はファイルを見つけると直ちに<code>break</code>を使うからです。また、テンプレートの場所（および内容）は、developmentモードでの起動でない限りはキャッシュされます。このことは、複雑なメソッド(a really crazy method)を書いた場合は記憶しておく必要があります。</p>

<h2>コンフィギュレーション(Configuration)</h2>

<p>どの環境でも起動時に１回だけ実行されます。</p>

<pre><code class="language-ruby">configure do
  # １つのオプションをセット
  set :option, 'value'

  # 複数のオプションをセット
  set :a =&gt; 1, :b =&gt; 2

  # `set :option, true`と同じ
  enable :option

  # `set :option, false`と同じ
  disable :option

  # ブロックを使って動的な設定をすることもできます。
  set(:css_dir) { File.join(views, 'css') }
end
</code></pre>

<p>環境設定(<code>APP_ENV</code>環境変数)が<code>:production</code>に設定されている時だけ実行する方法:</p>

<pre><code class="language-ruby">configure :production do
  ...
end
</code></pre>

<p>環境設定が<code>:production</code>か<code>:test</code>に設定されている時だけ実行する方法:</p>

<pre><code class="language-ruby">configure :production, :test do
  ...
end
</code></pre>

<p>設定したオプションには<code>settings</code>からアクセスできます:</p>

<pre><code class="language-ruby">configure do
  set :foo, 'bar'
end

get '/' do
  settings.foo? # =&gt; true
  settings.foo  # =&gt; 'bar'
  ...
end
</code></pre>

<h3>攻撃防御に対する設定</h3>

<p>Sinatraは<a href="https://github.com/sinatra/rack-protection#readme">Rack::Protection</a>を使用することで、アプリケーションを一般的な日和見的攻撃から守っています。これは簡単に無効化できます（が、アプリケーションに大量の一般的な脆弱性を埋め込むことになってしまいます）。</p>

<pre><code class="language-ruby">disable :protection
</code></pre>

<p>ある1つの防御を無効にするには、<code>protection</code>にハッシュでオプションを指定します。</p>

<pre><code class="language-ruby">set :protection, :except =&gt; :path_traversal
</code></pre>

<p>配列を渡すことで、複数の防御を無効にすることもできます。</p>

<pre><code class="language-ruby">set :protection, :except =&gt; [:path_traversal, :session_hijacking]
</code></pre>

<p>デフォルトでSinatraは、<code>:sessions</code>が有効になっている場合、セッションベースの防御だけを設定します。しかし、自身でセッションを設定したい場合があります。その場合は、<code>:session</code>オプションを渡すことにより、セッションベースの防御を設定することができます。</p>

<pre><code class="language-ruby">use Rack::Session::Pool
set :protection, :session =&gt; true
</code></pre>

<h3>利用可能な設定</h3>

<dl>
  <dt>absolute_redirects</dt>
  <dd>
    無効のとき、Sinatraは相対リダイレクトを許容するが、RFC 2616 (HTTP 1.1)は絶対リダイレクトのみを許容するので、これには準拠しなくなる。
  </dd>
  <dd>
    アプリケーションが、適切に設定されていないリバースプロキシの裏で走っている場合は有効。ノート: <tt>url</tt>ヘルパーは、第２引数に<tt>false</tt>を渡さない限り、依然として絶対URLを生成する。
  </dd>
  <dd>デフォルトは無効。</dd>

  <dt>add_charset</dt>
  <dd>
    Mimeタイプ <tt>content_type</tt>ヘルパーが自動的にキャラクタセット情報をここに追加する。このオプションは書き換えるのではなく、値を追加するようにすること。
    <tt>settings.add_charset &lt;&lt; "application/foobar"</tt>
  </dd>

  <dt>app_file</dt>
  <dd>
    メインのアプリケーションファイルのパスであり、プロジェクトのルート、viewsおよびpublicフォルダを見つけるために使われる。
  </dd>

  <dt>bind</dt>
  <dd>バインドするIPアドレス(デフォルト: `environment`がdevelopmentにセットされているときは、<tt>0.0.0.0</tt> <em>または</em> <tt>localhost</tt>)。ビルトインサーバでのみ使われる。</dd>

  <dt>default_encoding</dt>
  <dd>不明なときに仮定されるエンコーディング(デフォルトは<tt>"utf-8"</tt>)。</dd>

  <dt>dump_errors</dt>
  <dd>ログにおけるエラーの表示。</dd>

  <dt>environment</dt>
  <dd>
    現在の環境。デフォルトは<tt>ENV['APP_ENV']</tt>、それが無い場合は<tt>"development"</tt>。
  </dd>

  <dt>logging</dt>
  <dd>ロガーの使用。</dd>

  <dt>lock</dt>
  <dd>
    各リクエスト周りのロックの配置で、Rubyプロセスごとにリクエスト処理を並行して走らせるようにする。
  </dd>
  <dd>アプリケーションがスレッドセーフでなければ有効。デフォルトは無効。</dd>

  <dt>method_override</dt>
  <dd>
    put/deleteフォームを、それらをサポートしないブラウザで使えるように<tt>_method</tt>のおまじないを使えるようにする。
  </dd>

  <dt>port</dt>
  <dd>待ち受けポート。ビルトインサーバのみで有効。</dd>

  <dt>prefixed_redirects</dt>
  <dd>
    絶対パスが与えられていないときに、リダイレクトに<tt>request.script_name</tt>を挿入するか否かの設定。これにより<tt>redirect '/foo'</tt>は、<tt>redirect to('/foo')</tt>のように振る舞う。デフォルトは無効。
  </dd>

  <dt>protection</dt>
  <dd>Web攻撃防御を有効にするか否かの設定。上述の攻撃防御の項を参照。</dd>

  <dt>public_dir</dt>
  <dd>
<tt>public_folder</tt>のエイリアス。以下を参照。</dd>

  <dt>public_folder</dt>
  <dd>
    publicファイルが提供されるディレクトリのパス。静的ファイルの提供が有効になっている場合にのみ使われる (以下の<tt>static</tt>設定を参照)。設定されていない場合、<tt>app_file</tt>設定から推定。
  </dd>

  <dt>reload_templates</dt>
  <dd>
    リクエスト間でテンプレートを再ロードするか否かの設定。developmentモードでは有効。
  </dd>

  <dt>root</dt>
  <dd>
    プロジェクトのルートディレクトリのパス。設定されていない場合、<tt>app_file</tt>設定から推定。
  </dd>

  <dt>raise_errors</dt>
  <dd>
    例外発生の設定(アプリケーションは止まる)。<tt>environment</tt>が<tt>"test"</tt>に設定されているときはデフォルトは有効。それ以外は無効。
  </dd>

  <dt>run</dt>
  <dd>
    有効のとき、SinatraがWebサーバの起動を取り扱う。rackupまたは他の手段を使うときは有効にしないこと。
  </dd>

  <dt>running</dt>
  <dd>ビルトインサーバが稼働中か？この設定を変更しないこと！</dd>

  <dt>server</dt>
  <dd>
    ビルトインサーバとして使用するサーバまたはサーバ群の指定。指定順位は優先度を表し、デフォルトはRuby実装に依存。
  </dd>

  <dt>sessions</dt>
  <dd>
    <tt>Rack::Session::Cookie</tt>を使ったクッキーベースのセッションサポートの有効化。詳しくは、'セッションの使用'の項を参照のこと。
  </dd>

  <dt>show_exceptions</dt>
  <dd>
    例外発生時にブラウザにスタックトレースを表示する。<tt>environment</tt>が<tt>"development"</tt>に設定されているときは、デフォルトで有効。それ以外は無効。
  </dd>
  <dd>
    また、<tt>:after_handler</tt>をセットすることができ、これにより、ブラウザにスタックトレースを表示する前に、アプリケーション固有のエラーハンドリングを起動させられる。
  </dd>

  <dt>static</dt>
  <dd>Sinatraが静的ファイルの提供を取り扱うかの設定。</dd>
  <dd>その取り扱いができるサーバを使う場合は無効。</dd>
  <dd>無効化でパフォーマンスは改善する</dd>
  <dd>
    クラッシックスタイルではデフォルトで有効。モジュラースタイルでは無効。
  </dd>

  <dt>static_cache_control</dt>
  <dd>
    Sinatraが静的ファイルを提供するときこれをセットして、レスポンスに<tt>Cache-Control</tt>ヘッダを追加するようにする。<tt>cache_control</tt>ヘルパーを使うこと。デフォルトは無効。
  </dd>
  <dd>
    複数の値をセットするときは明示的に配列を使う:
    <tt>set :static_cache_control, [:public, :max_age =&gt; 300]</tt>
  </dd>

  <dt>threaded</dt>
  <dd>
    <tt>true</tt>に設定されているときは、Thinにリクエストを処理するために<tt>EventMachine.defer</tt>を使うことを通知する。
  </dd>

  <dt>views</dt>
  <dd>
    ビューディレクトリのパス。設定されていない場合、<tt>app_file</tt>設定から推定する。
  </dd>

  <dt>x_cascade</dt>
  <dd>
    マッチするルーティングが無い場合に、X-Cascadeヘッダをセットするか否かの設定。デフォルトは<tt>true</tt>。
  </dd>
</dl>

<h2>環境設定(Environments)</h2>

<p>3種類の既定環境、<code>"development"</code>、<code>"production"</code>および<code>"test"</code>があります。環境は、<code>APP_ENV</code>環境変数を通して設定できます。デフォルト値は、<code>"development"</code>です。<code>"development"</code>環境において、すべてのテンプレートは、各リクエスト間で再ロードされ、そして、特別の<code>not_found</code>および<code>error</code>ハンドラがブラウザにスタックトレースを表示します。<code>"production"</code>および<code>"test"</code>環境においては、テンプレートはデフォルトでキャッシュされます。</p>

<p>異なる環境を走らせるには、<code>APP_ENV</code>環境変数を設定します。</p>

<pre><code class="language-shell">APP_ENV=production ruby my_app.rb
</code></pre>

<p>既定メソッド、<code>development?</code>、<code>test?</code>および<code>production?</code>を、現在の環境設定を確認するために使えます。</p>

<pre><code class="language-ruby">get '/' do
  if settings.development?
    "development!"
  else
    "not development!"
  end
end
</code></pre>

<h2>エラーハンドリング(Error Handling)</h2>

<p>エラーハンドラはルーティングおよびbeforeフィルタと同じコンテキストで実行されます。すなわちこれは、<code>haml</code>、<code>erb</code>、<code>halt</code>といった便利なものが全て使えることを意味します。</p>

<h3>未検出(Not Found)</h3>

<p><code>Sinatra::NotFound</code>例外が発生したとき、またはレスポンスのステータスコードが404のときに、<code>not_found</code>ハンドラが発動します。</p>

<pre><code class="language-ruby">not_found do
  'ファイルが存在しません'
end
</code></pre>

<h3>エラー(Error)</h3>

<p><code>error</code>ハンドラはルーティングブロックまたはフィルタ内で例外が発生したときはいつでも発動します。
しかし、環境設定がdevelopmentの場合は<code>:after_handler</code>を設定している場合のみ発動するようになります。</p>

<pre><code class="language-ruby">set :show_exceptions, :after_handler
</code></pre>

<p>例外オブジェクトはRack変数<code>sinatra.error</code>から取得できます。</p>

<pre><code class="language-ruby">error do
  'エラーが発生しました。 - ' + env['sinatra.error'].message
end
</code></pre>

<p>エラーをカスタマイズする場合は、</p>

<pre><code class="language-ruby">error MyCustomError do
  'エラーメッセージ...' + env['sinatra.error'].message
end
</code></pre>

<p>と書いておいて、下記のように呼び出します。</p>

<pre><code class="language-ruby">get '/' do
  raise MyCustomError, '何かがまずかったようです'
end
</code></pre>

<p>そうするとこうなります。</p>

<pre><code>エラーメッセージ... 何かがまずかったようです
</code></pre>

<p>あるいは、ステータスコードに対応するエラーハンドラを設定することもできます。</p>

<pre><code class="language-ruby">error 403 do
  'Access forbidden'
end

get '/secret' do
  403
end
</code></pre>

<p>範囲指定もできます。</p>

<pre><code class="language-ruby">error 400..510 do
  'Boom'
end
</code></pre>

<p>Sinatraを開発環境の下で実行している場合は、特別な<code>not_found</code>および<code>error</code>ハンドラが導入され、これは親切なスタックトレースと追加のデバッギング情報をブラウザに表示します。</p>

<h2>Rackミドルウェア(Rack Middleware)</h2>

<p>SinatraはRuby製Webフレームワークのミニマルな標準的インタフェースである<a href="http://rack.github.io/">Rack</a>上に構築されています。アプリケーションデベロッパーにとってRackにおける最も興味深い機能は、「ミドルウェア(middleware)」をサポートしていることであり、これは、サーバとアプリケーションとの間に置かれ、HTTPリクエスト/レスポンスを監視および/または操作することで、各種の汎用的機能を提供するコンポーネントです。</p>

<p>Sinatraはトップレベルの<code>use</code>メソッドを通して、Rackミドルウェアパイプラインの構築を楽にします。</p>

<pre><code class="language-ruby">require 'sinatra'
require 'my_custom_middleware'

use Rack::Lint
use MyCustomMiddleware

get '/hello' do
  'Hello World'
end
</code></pre>

<p><code>use</code>の文法は、<a href="http://www.rubydoc.info/github/rack/rack/master/Rack/Builder">Rack::Builder</a>DSLで定義されているそれ（rackupファイルで最もよく使われる）と同じです。例えば <code>use</code>メソッドは複数の引数、そしてブロックも取ることができます。</p>

<pre><code class="language-ruby">use Rack::Auth::Basic do |username, password|
  username == 'admin' &amp;&amp; password == 'secret'
end
</code></pre>

<p>Rackは、ロギング、デバッギング、URLルーティング、認証、セッション管理など、多様な標準的ミドルウェアを共に配布されています。Sinatraはその多くのコンポーネントを自動で使うよう基本設定されているため、通常、それらを<code>use</code>で明示的に指定する必要はありません。</p>

<p>便利なミドルウェアを以下で見つけられます。</p>

<p><a href="https://github.com/rack/rack/tree/master/lib/rack">rack</a>、
<a href="https://github.com/rack/rack-contrib#readm">rack-contrib</a>、
または<a href="https://github.com/rack/rack/wiki/List-of-Middleware">Rack wiki</a>。</p>

<h2>テスト(Testing)</h2>

<p>SinatraでのテストはRackベースのテストライブラリまたはフレームワークを使って書くことができます。<a href="http://www.rubydoc.info/github/brynary/rack-test/master/frames">Rack::Test</a>をお薦めします。</p>

<pre><code class="language-ruby">require 'my_sinatra_app'
require 'minitest/autorun'
require 'rack/test'

class MyAppTest &lt; Minitest::Test
  include Rack::Test::Methods

  def app
    Sinatra::Application
  end

  def test_my_default
    get '/'
    assert_equal 'Hello World!', last_response.body
  end

  def test_with_params
    get '/meet', :name =&gt; 'Frank'
    assert_equal 'Hello Frank!', last_response.body
  end

  def test_with_user_agent
    get '/', {}, 'HTTP_USER_AGENT' =&gt; 'Songbird'
    assert_equal "Songbirdを使ってます!", last_response.body
  end
end
</code></pre>

<p>ノート: モジュラースタイルでSinatraを使う場合は、上記<code>Sinatra::Application</code>をアプリケーションのクラス名に置き換えてください。</p>

<h2>Sinatra::Base - ミドルウェア、ライブラリおよびモジュラーアプリ</h2>

<p>軽量なアプリケーションであれば、トップレベルでアプリケーションを定義していくことはうまくいきますが、再利用性可能なコンポーネント、例えばRackミドルウェア、RailsのMetal、サーバコンポーネントを含むシンプルなライブラリ、あるいはSinatraの拡張プログラムを構築するような場合、これは無視できない欠点を持つものとなります。トップレベルは、軽量なアプリケーションのスタイルにおける設定（例えば、単一のアプリケーションファイル、<code>./public</code>および<code>./views</code>ディレクトリ、ロギング、例外詳細ページなど）を仮定しています。そこで<code>Sinatra::Base</code>の出番です。</p>

<pre><code class="language-ruby">require 'sinatra/base'

class MyApp &lt; Sinatra::Base
  set :sessions, true
  set :foo, 'bar'

  get '/' do
    'Hello world!'
  end
end
</code></pre>

<p><code>Sinatra::Base</code>のサブクラスで利用できるメソッドは、トップレベルDSLで利用できるものと全く同じです。ほとんどのトップレベルで記述されたアプリは、以下の2点を修正することで<code>Sinatra::Base</code>コンポーネントに変えることができます。</p>

<ul>
  <li>
<code>sinatra</code>の代わりに<code>sinatra/base</code>を読み込む
(そうしない場合、SinatraのDSLメソッドの全てがmainの名前空間にインポートされます)</li>
  <li>ルーティング、エラーハンドラ、フィルタ、オプションを<code>Sinatra::Base</code>のサブクラスに書く</li>
</ul>

<p><code>Sinatra::Base</code>はまっさらです。ビルトインサーバを含む、ほとんどのオプションがデフォルトで無効になっています。利用可能なオプションとその挙動の詳細については<a href="http://www.sinatrarb.com/configuration.html">Configuring Settings</a>(英語)をご覧ください。</p>

<p>もしもクラシックスタイルと同じような挙動のアプリケーションをトップレベルで定義させる必要があれば、<code>Sinatra::Application</code>をサブクラス化させてください。</p>

<pre><code class="language-ruby">require "sinatra/base"

class MyApp &lt; Sinatra::Application
  get "/" do
    'Hello world!'
  end
end
</code></pre>

<h3>モジュラースタイル vs クラッシックスタイル</h3>

<p>一般的認識と違って、クラッシックスタイルを使うことに問題はなにもありません。それがそのアプリケーションに合っているのであれば、モジュラーアプリケーションに移行する必要はありません。</p>

<p>モジュラースタイルを使わずにクラッシックスタイルを使った場合の一番の不利な点は、Rubyプロセスごとにただ一つのSinatraアプリケーションしか持てない点です。複数が必要な場合はモジュラースタイルに移行してください。モジュラースタイルとクラッシックスタイルを混合できないということはありません。</p>

<p>一方のスタイルから他方へ移行する場合、デフォルト設定がわずかに異なる点に注意が必要です。</p>

<table>
  <tr>
    <th>設定</th>
    <th>クラッシック</th>
    <th>モジュラー</th>
    <th>モジュラー</th>
  </tr>

  <tr>
    <td>app_file</td>
    <td>sinatraを読み込むファイル</td>
    <td>Sinatra::Baseをサブクラス化したファイル</td>
    <td>Sinatra::Applicationをサブクラス化したファイル</td>
  </tr>

  <tr>
    <td>run</td>
    <td>$0 == app_file</td>
    <td>false</td>
    <td>false</td>
  </tr>

  <tr>
    <td>logging</td>
    <td>true</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>method_override</td>
    <td>true</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>inline_templates</td>
    <td>true</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>static</td>
    <td>true</td>
    <td>File.exist?(public_folder)</td>
    <td>true</td>
  </tr>
</table>

<h3>モジュラーアプリケーションの提供</h3>

<p>モジュラーアプリケーションを開始、つまり<code>run!</code>を使って開始させる二種類のやり方があります。</p>

<pre><code class="language-ruby"># my_app.rb
require 'sinatra/base'

class MyApp &lt; Sinatra::Base
  # ... アプリケーションのコードを書く ...

  # Rubyファイルが直接実行されたらサーバを立ち上げる
  run! if app_file == $0
end
</code></pre>

<p>として、次のように起動するか、</p>

<pre><code class="language-shell">ruby my_app.rb
</code></pre>

<p>または、Rackハンドラを使えるようにする<code>config.ru</code>ファイルを書いて、</p>

<pre><code class="language-ruby"># config.ru (rackupで起動)
require './my_app'
run MyApp
</code></pre>

<p>起動します。</p>

<pre><code class="language-shell">rackup -p 4567
</code></pre>

<h3>config.ruを用いたクラッシックスタイルアプリケーションの使用</h3>

<p>アプリケーションファイルと、</p>

<pre><code class="language-ruby"># app.rb
require 'sinatra'

get '/' do
  'Hello world!'
end
</code></pre>

<p>対応する<code>config.ru</code>を書きます。</p>

<pre><code class="language-ruby">require './app'
run Sinatra::Application
</code></pre>

<h3>config.ruはいつ使うのか？</h3>

<p><code>config.ru</code>ファイルは、以下の場合に適しています。</p>

<ul>
  <li>異なるRackハンドラ(Passenger, Unicorn, Herokuなど)でデプロイしたいとき</li>
  <li>
<code>Sinatra::Base</code>の複数のサブクラスを使いたいとき</li>
  <li>Sinatraをミドルウェアとして利用し、エンドポイントとしては利用しないとき</li>
</ul>

<p><strong>モジュラースタイルに移行したという理由だけで、<code>config.ru</code>に移行する必要はなく、<code>config.ru</code>で起動するためにモジュラースタイルを使う必要はありません。</strong></p>

<h3>Sinatraのミドルウェアとしての利用</h3>

<p>Sinatraは他のRackミドルウェアを利用することができるだけでなく、
全てのSinatraアプリケーションは、それ自体ミドルウェアとして別のRackエンドポイントの前に追加することが可能です。</p>

<p>このエンドポイントには、別のSinatraアプリケーションまたは他のRackベースのアプリケーション(Rails/Ramaze/Camping/…)が用いられるでしょう。</p>

<pre><code class="language-ruby">require 'sinatra/base'

class LoginScreen &lt; Sinatra::Base
  enable :sessions

  get('/login') { haml :login }

  post('/login') do
    if params['name'] = 'admin' and params['password'] = 'admin'
      session['user_name'] = params['name']
    else
      redirect '/login'
    end
  end
end

class MyApp &lt; Sinatra::Base
  # ミドルウェアはbeforeフィルタの前に実行される
  use LoginScreen

  before do
    unless session['user_name']
      halt "アクセスは拒否されました。&lt;a href='/login'&gt;ログイン&lt;/a&gt;してください。"
    end
  end

  get('/') { "Hello #{session['user_name']}." }
end
</code></pre>

<h3>動的なアプリケーションの生成</h3>

<p>新しいアプリケーションを実行時に、定数に割り当てることなく生成したくなる場合があるでしょう。<code>Sinatra.new</code>を使えばそれができます。</p>

<pre><code class="language-ruby">require 'sinatra/base'
my_app = Sinatra.new { get('/') { "hi" } }
my_app.run!
</code></pre>

<p>これは省略できる引数として、それが継承するアプリケーションを取ります。</p>

<pre><code class="language-ruby"># config.ru (rackupで起動)
require 'sinatra/base'

controller = Sinatra.new do
  enable :logging
  helpers MyHelpers
end

map('/a') do
  run Sinatra.new(controller) { get('/') { 'a' } }
end

map('/b') do
  run Sinatra.new(controller) { get('/') { 'b' } }
end
</code></pre>

<p>これは特にSinatraのextensionをテストするときや、Sinatraを自身のライブラリで利用する場合に役立ちます。</p>

<p>これはまた、Sinatraをミドルウェアとして利用することを極めて簡単にします。</p>

<pre><code class="language-ruby">require 'sinatra/base'

use Sinatra do
  get('/') { ... }
end

run RailsProject::Application
</code></pre>

<h2>スコープとバインディング(Scopes and Binding)</h2>

<p>現在のスコープはどのメソッドや変数が利用可能かを決定します。</p>

<h3>アプリケーション/クラスのスコープ</h3>

<p>全てのSinatraアプリケーションはSinatra::Baseのサブクラスに相当します。
もしトップレベルDSLを利用しているならば(<code>require 'sinatra'</code>)このクラスはSinatra::Applicationであり、
そうでなければ、あなたが明示的に作成したサブクラスです。
クラスレベルでは<code>get</code>や<code>before</code>のようなメソッドを持っています。
しかし<code>request</code>や<code>session</code>オブジェクトには、全てのリクエストに対する単一のアプリケーションクラスがあるだけなので、アクセスできません。</p>

<p><code>set</code>によって作られたオプションはクラスレベルのメソッドです。</p>

<pre><code class="language-ruby">class MyApp &lt; Sinatra::Base
  # アプリケーションスコープの中だよ!
  set :foo, 42
  foo # =&gt; 42

  get '/foo' do
    # もうアプリケーションスコープの中にいないよ!
  end
end
</code></pre>

<p>次の場所ではアプリケーションスコープバインディングを持ちます。</p>

<ul>
  <li>アプリケーションクラス本体</li>
  <li>拡張によって定義されたメソッド</li>
  <li>
<code>helpers</code>に渡されたブロック</li>
  <li>
<code>set</code>の値として使われるProcまたはブロック</li>
  <li>
<code>Sinatra.new</code>に渡されたブロック</li>
</ul>

<p>このスコープオブジェクト(クラス)は次のように利用できます。</p>

<ul>
  <li>configureブロックに渡されたオブジェクト経由(<code>configure { |c| ... }</code>)</li>
  <li>リクエストスコープの中での<code>settings</code>
</li>
</ul>

<h3>リクエスト/インスタンスのスコープ</h3>

<p>やってくるリクエストごとに、あなたのアプリケーションクラスの新しいインスタンスが作成され、全てのハンドラブロックがそのスコープで実行されます。
このスコープの内側からは<code>request</code>や<code>session</code>オブジェクトにアクセスすることができ、<code>erb</code>や<code>haml</code>のようなレンダリングメソッドを呼び出すことができます。
リクエストスコープの内側からは、<code>settings</code>ヘルパーによってアプリケーションスコープにアクセスすることができます。</p>

<pre><code class="language-ruby">class MyApp &lt; Sinatra::Base
  # アプリケーションスコープの中だよ!
  get '/define_route/:name' do
    # '/define_route/:name'のためのリクエストスコープ
    @value = 42

    settings.get("/#{params['name']}") do
      # "/#{params['name']}"のためのリクエストスコープ
      @value # =&gt; nil (not the same request)
    end

    "ルーティングが定義された!"
  end
end
</code></pre>

<p>次の場所ではリクエストスコープバインディングを持ちます。</p>

<ul>
  <li>get/head/post/put/delete/options/patch/link/unlink ブロック</li>
  <li>before/after フィルタ</li>
  <li>helper メソッド</li>
  <li>テンプレート/ビュー</li>
</ul>

<h3>デリゲートスコープ</h3>

<p>デリゲートスコープは、単にクラススコープにメソッドを転送します。
しかしながら、クラスのバインディングを持っていないため、クラススコープと全く同じふるまいをするわけではありません。
委譲すると明示的に示されたメソッドのみが利用可能であり、またクラススコープと変数/状態を共有することはできません(注:
異なった<code>self</code>を持っています)。
<code>Sinatra::Delegator.delegate :method_name</code>を呼び出すことによってデリゲートするメソッドを明示的に追加することができます。</p>

<p>次の場所ではデリゲートスコープを持ちます。</p>

<ul>
  <li>もし<code>require "sinatra"</code>しているならば、トップレベルバインディング</li>
  <li>
<code>Sinatra::Delegator</code> mixinでextendされたオブジェクト</li>
</ul>

<p>コードをご覧ください: ここでは <a href="https://github.com/sinatra/sinatra/blob/ca06364/lib/sinatra/base.rb#L1609-1633">Sinatra::Delegator
mixin</a>は<a href="https://github.com/sinatra/sinatra/blob/ca06364/lib/sinatra/main.rb#L28-30">mainオブジェクトにextendされています</a>。</p>

<h2>コマンドライン</h2>

<p>Sinatraアプリケーションは直接実行できます。</p>

<pre><code class="language-shell">ruby myapp.rb [-h] [-x] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]
</code></pre>

<p>オプション:</p>

<pre><code>-h # ヘルプ
-p # ポート指定(デフォルトは4567)
-o # ホスト指定(デフォルトは0.0.0.0)
-e # 環境を指定 (デフォルトはdevelopment)
-s # rackserver/handlerを指定 (デフォルトはthin)
-x # mutex lockを付ける (デフォルトはoff)
</code></pre>

<h3>マルチスレッド</h3>

<p><em>この<a href="http://stackoverflow.com/questions/6278817/is-sinatra-multi-threaded/6282999#6282999)">StackOverflow</a>でのKonstantinによる回答を言い換えています。</em></p>

<p>Sinatraでは同時実行モデルを負わせることはできませんが、根本的な部分であるThinやPuma、WebrickのようなRackハンドラ(サーバー)部分に委ねることができます。
Sinatra自身はスレッドセーフであり、もしRackハンドラが同時実行モデルのスレッドを使用していても問題はありません。
つまり、これはサーバーを起動させる時、特定のRackハンドラに対して正しい起動処理を特定することが出来ます。
この例はThinサーバーをマルチスレッドで起動する方法のデモです。</p>

<pre><code class="language-ruby"># app.rb

require 'sinatra/base'

class App &lt; Sinatra::Base
  get '/' do
    "Hello, World"
  end
end

App.run!
</code></pre>

<p>サーバーを開始するコマンドです。</p>

<pre><code>thin --threaded start
</code></pre>

<h2>必要環境</h2>

<p>次のRubyバージョンが公式にサポートされています。</p>

<dl>
  <dt>Ruby 1.8.7</dt>
  <dd>
    1.8.7は完全にサポートされていますが、特にそれでなければならないという理由がないのであれば、アップグレードまたはJRubyまたはRubiniusへの移行を薦めます。1.8.7のサポートがSinatra 2.0の前に終わることはないでしょう。Ruby 1.8.6はサポート対象外です。
  </dd>

  <dt>Ruby 1.9.2</dt>
  <dd>
    1.9.2は完全にサポートされています。1.9.2p0は、Sinatraを起動したときにセグメントフォルトを引き起こすことが分かっているので、使わないでください。公式なサポートは、少なくともSinatra 1.5のリリースまでは続きます。
  </dd>

  <dt>Ruby 1.9.3</dt>
  <dd>
    1.9.3は完全にサポート、そして推奨されています。以前のバージョンからの1.9.3への移行は全セッションを無効にする点、覚えておいてください。
  </dd>

  <dt>Ruby 2.0.0</dt>
  <dd>
    2.0.0は完全にサポート、そして推奨されています。現在、その公式サポートを終了する計画はありません。
  </dd>

  <dt>Rubinius</dt>
  <dd>
    Rubiniusは公式にサポートされています(Rubinius &gt;= 2.x)。
    <tt>gem install puma</tt>することが推奨されています。
  </dd>

  <dt>JRuby</dt>
  <dd>
    JRubyの最新安定版が公式にサポートされています。JRubyでC拡張を使うことは推奨されていません。
    <tt>gem install trinidad</tt>することが推奨されています。
  </dd>
</dl>

<p>開発チームは常に最新となるRubyバージョンに注視しています。</p>

<p>次のRuby実装は公式にはサポートされていませんが、Sinatraが起動すると報告されています。</p>

<ul>
  <li>JRubyとRubiniusの古いバージョン</li>
  <li>Ruby Enterprise Edition</li>
  <li>MacRuby, Maglev, IronRuby</li>
  <li>Ruby 1.9.0と1.9.1 (これらの使用はお薦めしません)</li>
</ul>

<p>公式サポートをしないという意味は、問題がそこだけで起こり、サポートされているプラットフォーム上では起きない場合に、開発チームはそれはこちら側の問題ではないとみなすということです。</p>

<p>開発チームはまた、ruby-head(最新となる2.1.0)に対しCIを実行していますが、それが一貫して動くようになるまで何も保証しません。2.1.0が完全にサポートされればその限りではありません。</p>

<p>Sinatraは、利用するRuby実装がサポートしているオペレーティングシステム上なら動作するはずです。</p>

<p>MacRubyを使う場合は、<code>gem install control_tower</code>してください。</p>

<p>Sinatraは現在、Cardinal、SmallRuby、BlueRubyまたは1.8.7以前のバージョンのRuby上では動作しません。</p>

<h2>最新開発版</h2>

<p>Sinatraの最新開発版のコードを使いたい場合は、マスターブランチに対してアプリケーションを走らせて構いません。ある程度安定しています。また、適宜プレリリース版gemをpushしているので、</p>

<pre><code class="language-shell">gem install sinatra --pre
</code></pre>

<p>すれば、最新の機能のいくつかを利用できます。</p>

<h3>Bundlerを使う場合</h3>

<p>最新のSinatraでアプリケーションを動作させたい場合には、<a href="http://bundler.io">Bundler</a>を使うのがお薦めのやり方です。</p>

<p>まず、Bundlerがなければそれをインストールします。</p>

<pre><code class="language-shell">gem install bundler
</code></pre>

<p>そして、プロジェクトのディレクトリで、<code>Gemfile</code>を作ります。</p>

<pre><code class="language-ruby">source 'https://rubygems.org'
gem 'sinatra', :github =&gt; "sinatra/sinatra"

# 他の依存ライブラリ
gem 'haml'                    # Hamlを使う場合
gem 'activerecord', '~&gt; 3.0'  # ActiveRecord 3.xが必要かもしれません
</code></pre>

<p>ノート: <code>Gemfile</code>にアプリケーションの依存ライブラリのすべてを並べる必要があります。しかし、Sinatraが直接依存するもの(RackおよびTile)はBundlerによって自動的に取り込まれ、追加されます。</p>

<p>これで、以下のようにしてアプリケーションを起動することができます。</p>

<pre><code class="language-shell">bundle exec ruby myapp.rb
</code></pre>

<h3>直接組み込む場合</h3>

<p>ローカルにクローンを作って、<code>sinatra/lib</code>ディレクトリを<code>$LOAD_PATH</code>に追加してアプリケーションを起動します。</p>

<pre><code class="language-shell">cd myapp
git clone git://github.com/sinatra/sinatra.git
ruby -I sinatra/lib myapp.rb
</code></pre>

<p>追ってSinatraのソースを更新する方法。</p>

<pre><code class="language-shell">cd myapp/sinatra
git pull
</code></pre>

<h3>グローバル環境にインストールする場合</h3>

<p>Sinatraのgemを自身でビルドすることもできます。</p>

<pre><code class="language-shell">git clone git://github.com/sinatra/sinatra.git
cd sinatra
rake sinatra.gemspec
rake install
</code></pre>

<p>gemをルートとしてインストールする場合は、最後のステップはこうなります。</p>

<pre><code class="language-shell">sudo rake install
</code></pre>

<h2>バージョニング(Versioning)</h2>

<p>Sinatraは、<a href="http://semver.org/">Semantic Versioning</a>におけるSemVerおよびSemVerTagの両方に準拠しています。</p>

<h2>参考文献</h2>

<ul>
  <li>
<a href="http://www.sinatrarb.com/">プロジェクトサイト</a> - ドキュメント、ニュース、他のリソースへのリンクがあります。</li>
  <li>
<a href="http://www.sinatrarb.com/contributing.html">プロジェクトに参加(貢献)する</a> - バグレポート パッチの送信、サポートなど</li>
  <li><a href="https://github.com/sinatra/sinatra/issues">Issue tracker</a></li>
  <li><a href="https://twitter.com/sinatra">Twitter</a></li>
  <li><a href="http://groups.google.com/group/sinatrarb/topics">メーリングリスト</a></li>
  <li>http://freenode.net上のIRC: <a href="irc://chat.freenode.net/#sinatra">#sinatra</a>
</li>
  <li>
<a href="https://github.com/sinatra/sinatra-book/">Sinatra Book</a> クックブック、チュートリアル</li>
  <li>
<a href="http://recipes.sinatrarb.com/">Sinatra Recipes</a> コミュニティによるレシピ集</li>
  <li>http://www.rubydoc.info/上のAPIドキュメント: <a href="http://www.rubydoc.info/gems/sinatra">最新版(latest release)用</a>または<a href="http://www.rubydoc.info/github/sinatra/sinatra">現在のHEAD用</a>
</li>
  <li><a href="https://travis-ci.org/sinatra/sinatra">CIサーバ</a></li>
  <li><a href="http://route477.net/w/RackReferenceJa.html">Greenbear Laboratory Rack日本語マニュアル</a></li>
</ul>
</body></html>


        </div>
        <div id='foot'>
        </div>
      </div>
    </div>
  </body>
</html>
